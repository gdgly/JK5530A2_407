; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\key.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\key.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\key.crf --no_multibyte_chars ..\drive\key.c]
                          THUMB

                          AREA ||i.Key_Funtion||, CODE, READONLY, ALIGN=2

                  Key_Funtion PROC
;;;203    /***************************************************************************************************************************/
;;;204    void Key_Funtion(void)
000000  b508              PUSH     {r3,lr}
;;;205    {
;;;206    	vu32 KeyValue = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;207    	static vu8 t_KEYON;
;;;208    	static vu8 a,b;
;;;209    /****************************************************鐭寜鍔熻兘************************************************************/
;;;210    	if(Flag_Key_Scan==1){
000006  48e4              LDR      r0,|L1.920|
000008  7800              LDRB     r0,[r0,#0]  ; flagA
00000a  f3c000c0          UBFX     r0,r0,#3,#1
00000e  2800              CMP      r0,#0
000010  d06f              BEQ      |L1.242|
;;;211    		
;;;212    		Flag_Key_Scan = 0;
000012  48e1              LDR      r0,|L1.920|
000014  6800              LDR      r0,[r0,#0]  ; flagA
000016  f0200008          BIC      r0,r0,#8
00001a  49df              LDR      r1,|L1.920|
00001c  6008              STR      r0,[r1,#0]  ; flagA
;;;213    		
;;;214    		KeyValue = Key_Scan();
00001e  f7fffffe          BL       Key_Scan
000022  9000              STR      r0,[sp,#0]
;;;215    		
;;;216    		switch(KeyValue){
000024  9800              LDR      r0,[sp,#0]
000026  3844              SUBS     r0,r0,#0x44
000028  2834              CMP      r0,#0x34
00002a  d26f              BCS      |L1.268|
00002c  e8dff000          TBB      [pc,r0]
000030  fb626f96          DCB      0xfb,0x62,0x6f,0x96
000034  6e6e6e6e          DCB      0x6e,0x6e,0x6e,0x6e
000038  fa7b1ace          DCB      0xfa,0x7b,0x1a,0xce
00003c  6e6e6e6e          DCB      0x6e,0x6e,0x6e,0x6e
000040  f968202c          DCB      0xf9,0x68,0x20,0x2c
000044  6e6e6e6e          DCB      0x6e,0x6e,0x6e,0x6e
000048  f8502632          DCB      0xf8,0x50,0x26,0x32
00004c  6e6e6e6e          DCB      0x6e,0x6e,0x6e,0x6e
000050  f756f63e          DCB      0xf7,0x56,0xf6,0x3e
000054  6e6e6e6e          DCB      0x6e,0x6e,0x6e,0x6e
000058  f55c8044          DCB      0xf5,0x5c,0x80,0x44
00005c  6e6e6e6e          DCB      0x6e,0x6e,0x6e,0x6e
000060  75e2384a          DCB      0x75,0xe2,0x38,0x4a
;;;217    			
;;;218    			case KEY_1 :{
;;;219    	
;;;220    				key_input_window("1");
000064  a0cd              ADR      r0,|L1.924|
000066  f7fffffe          BL       key_input_window
;;;221    				BEEP_Tiggr();
00006a  f7fffffe          BL       BEEP_Tiggr
;;;222    			}
;;;223    			break;
00006e  e191              B        |L1.916|
;;;224    			
;;;225    			case KEY_2 :{
;;;226    				
;;;227    				key_input_window("2");
000070  a0cb              ADR      r0,|L1.928|
000072  f7fffffe          BL       key_input_window
;;;228    				BEEP_Tiggr();
000076  f7fffffe          BL       BEEP_Tiggr
;;;229    			}
;;;230    			break;
00007a  e18b              B        |L1.916|
;;;231    			
;;;232    			case KEY_3 :{
;;;233    				
;;;234    				key_input_window("3");
00007c  a0c9              ADR      r0,|L1.932|
00007e  f7fffffe          BL       key_input_window
;;;235    				BEEP_Tiggr();
000082  f7fffffe          BL       BEEP_Tiggr
;;;236    			}
;;;237    			break;
000086  e185              B        |L1.916|
;;;238    			
;;;239    			case KEY_4 :{
;;;240    				
;;;241    				key_input_window("4");
000088  a0c7              ADR      r0,|L1.936|
00008a  f7fffffe          BL       key_input_window
;;;242    				BEEP_Tiggr();
00008e  f7fffffe          BL       BEEP_Tiggr
;;;243    			}
;;;244    			break;
000092  e17f              B        |L1.916|
;;;245    			
;;;246    			case KEY_5 :{
;;;247    				
;;;248    				key_input_window("5");	
000094  a0c5              ADR      r0,|L1.940|
000096  f7fffffe          BL       key_input_window
;;;249    				BEEP_Tiggr();
00009a  f7fffffe          BL       BEEP_Tiggr
;;;250    			}
;;;251    			break;	
00009e  e179              B        |L1.916|
;;;252    			
;;;253    			case KEY_6 :{
;;;254    				
;;;255    				key_input_window("6");	
0000a0  a0c3              ADR      r0,|L1.944|
0000a2  f7fffffe          BL       key_input_window
;;;256    				BEEP_Tiggr();
0000a6  f7fffffe          BL       BEEP_Tiggr
;;;257    			}
;;;258    			break;
0000aa  e173              B        |L1.916|
;;;259    			
;;;260    			case KEY_7 :{
;;;261    				
;;;262    				key_input_window("7");	
0000ac  a0c1              ADR      r0,|L1.948|
0000ae  f7fffffe          BL       key_input_window
;;;263    				BEEP_Tiggr();
0000b2  f7fffffe          BL       BEEP_Tiggr
;;;264    			}
;;;265    			break;
0000b6  e16d              B        |L1.916|
;;;266    			
;;;267    			case KEY_8 :{
;;;268    				
;;;269    				key_input_window("8");	
0000b8  a0bf              ADR      r0,|L1.952|
0000ba  f7fffffe          BL       key_input_window
;;;270    				BEEP_Tiggr();
0000be  f7fffffe          BL       BEEP_Tiggr
;;;271    			}
;;;272    			break;
0000c2  e167              B        |L1.916|
;;;273    			
;;;274    			case KEY_9 :{
;;;275    				
;;;276    				key_input_window("9");
0000c4  a0bd              ADR      r0,|L1.956|
0000c6  f7fffffe          BL       key_input_window
;;;277    				BEEP_Tiggr();
0000ca  f7fffffe          BL       BEEP_Tiggr
;;;278    			}
;;;279    			break;
0000ce  e161              B        |L1.916|
;;;280    			
;;;281    			case KEY_0 :{
;;;282    				
;;;283    				key_input_window("0");
0000d0  a0bb              ADR      r0,|L1.960|
0000d2  f7fffffe          BL       key_input_window
;;;284    				BEEP_Tiggr();
0000d6  f7fffffe          BL       BEEP_Tiggr
;;;285    			}
;;;286    			break;
0000da  e15b              B        |L1.916|
;;;287    			
;;;288    			case KEY_dian :{
;;;289    				
;;;290    				key_input_window(".");
0000dc  a0b9              ADR      r0,|L1.964|
0000de  f7fffffe          BL       key_input_window
;;;291    				BEEP_Tiggr();
0000e2  f7fffffe          BL       BEEP_Tiggr
;;;292    			}
;;;293    			break;
0000e6  e155              B        |L1.916|
;;;294    			
;;;295    			case KEY_ESC :  // 退格
;;;296    			{
;;;297    				key_delete_input();
0000e8  f7fffffe          BL       key_delete_input
;;;298    				BEEP_Tiggr();
0000ec  f7fffffe          BL       BEEP_Tiggr
;;;299    				
;;;300    			}
;;;301    			break;
0000f0  e150              B        |L1.916|
                  |L1.242|
0000f2  e150              B        |L1.918|
;;;302    			
;;;303    			case PUSH_Lift :  {		
;;;304    			
;;;305    				key_down_window( WIN_KEYLEFT );	
0000f4  2004              MOVS     r0,#4
0000f6  f7fffffe          BL       key_down_window
;;;306    				BEEP_Tiggr();
0000fa  f7fffffe          BL       BEEP_Tiggr
;;;307    			}
;;;308    			break;
0000fe  e149              B        |L1.916|
;;;309    			case PUSH_Right :{	
;;;310    			
;;;311    				key_down_window( WIN_KEYRIGHT );
000100  2006              MOVS     r0,#6
000102  f7fffffe          BL       key_down_window
;;;312    				BEEP_Tiggr();
000106  f7fffffe          BL       BEEP_Tiggr
;;;313    			}
;;;314    			break;
00010a  e143              B        |L1.916|
                  |L1.268|
00010c  e141              B        |L1.914|
;;;315    			case PUSH_Up :{		
;;;316    			
;;;317    				key_down_window( WIN_KEYUP );
00010e  2008              MOVS     r0,#8
000110  f7fffffe          BL       key_down_window
;;;318    				BEEP_Tiggr();				
000114  f7fffffe          BL       BEEP_Tiggr
;;;319    			}
;;;320    			break;
000118  e13c              B        |L1.916|
;;;321    			case PUSH_Down :{
;;;322    				
;;;323    				key_down_window( WIN_KEYDOWN );	
00011a  2002              MOVS     r0,#2
00011c  f7fffffe          BL       key_down_window
;;;324    				BEEP_Tiggr();
000120  f7fffffe          BL       BEEP_Tiggr
;;;325    			}
;;;326    			break;
000124  e136              B        |L1.916|
;;;327    			
;;;328    			case ENTER :  //确认键
;;;329    			{
;;;330    				ent_input_win();
000126  f7fffffe          BL       ent_input_win
;;;331    				BEEP_Tiggr();
00012a  f7fffffe          BL       BEEP_Tiggr
;;;332    			}
;;;333    			break;
00012e  e131              B        |L1.916|
;;;334    
;;;335    			case KEY_BIAS:{   //空白键
;;;336    			
;;;337    				if( FLAG_INPUTAUTH != 1 && FLAG_WIN != 6 ){
000130  48a5              LDR      r0,|L1.968|
000132  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000134  2801              CMP      r0,#1
000136  d00e              BEQ      |L1.342|
000138  48a4              LDR      r0,|L1.972|
00013a  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
00013c  2806              CMP      r0,#6
00013e  d00a              BEQ      |L1.342|
;;;338    					
;;;339    					delteWindow();
000140  f7fffffe          BL       delteWindow
;;;340    					
;;;341    					Off_GPOI_ResetSet();
000144  f7fffffe          BL       Off_GPOI_ResetSet
;;;342    					
;;;343    					FLAG_FBUTWIN = 6;
000148  2006              MOVS     r0,#6
00014a  49a1              LDR      r1,|L1.976|
00014c  7008              STRB     r0,[r1,#0]
;;;344    					
;;;345    					FLAG_WIN = 6;
00014e  499f              LDR      r1,|L1.972|
000150  7008              STRB     r0,[r1,#0]
;;;346    					
;;;347    					CreateSysinfo();
000152  f7fffffe          BL       CreateSysinfo
                  |L1.342|
;;;348    				}
;;;349    				BEEP_Tiggr();
000156  f7fffffe          BL       BEEP_Tiggr
;;;350    			}
;;;351    			break;
00015a  e11b              B        |L1.916|
;;;352    			case PUSH_DISP :
;;;353    			{
;;;354    				if( FLAG_INPUTAUTH != 1 && FLAG_WIN == 5){
00015c  489a              LDR      r0,|L1.968|
00015e  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000160  2801              CMP      r0,#1
000162  d030              BEQ      |L1.454|
000164  4899              LDR      r0,|L1.972|
000166  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
000168  2805              CMP      r0,#5
00016a  d12c              BNE      |L1.454|
;;;355    					
;;;356    					delteWindow(); 
00016c  f7fffffe          BL       delteWindow
;;;357    					
;;;358    					Off_GPOI_ResetSet();
000170  f7fffffe          BL       Off_GPOI_ResetSet
;;;359    					
;;;360    					switch( FLAG_FBUTWIN ){						
000174  4896              LDR      r0,|L1.976|
000176  7800              LDRB     r0,[r0,#0]  ; FLAG_FBUTWIN
000178  2807              CMP      r0,#7
00017a  d223              BCS      |L1.452|
00017c  e8dff000          TBB      [pc,r0]
000180  040a1016          DCB      0x04,0x0a,0x10,0x16
000184  22221c00          DCB      0x22,0x22,0x1c,0x00
;;;361    						case 0 : 
;;;362    							
;;;363    							FLAG_WIN = 0 ;	
000188  2000              MOVS     r0,#0
00018a  4990              LDR      r1,|L1.972|
00018c  7008              STRB     r0,[r1,#0]
;;;364    							CreateWindowMenu();  	
00018e  f7fffffe          BL       CreateWindowMenu
;;;365    						break;
000192  e017              B        |L1.452|
;;;366    						case 1 : 
;;;367    					
;;;368    							FLAG_WIN = 1 ;	
000194  2001              MOVS     r0,#1
000196  498d              LDR      r1,|L1.972|
000198  7008              STRB     r0,[r1,#0]
;;;369    							CreateR();  			
00019a  f7fffffe          BL       CreateR
;;;370    						break;
00019e  e011              B        |L1.452|
;;;371    						case 2 :
;;;372    						 
;;;373    							FLAG_WIN = 2 ; 
0001a0  2002              MOVS     r0,#2
0001a2  498a              LDR      r1,|L1.972|
0001a4  7008              STRB     r0,[r1,#0]
;;;374    							CreateWindowload(); 	
0001a6  f7fffffe          BL       CreateWindowload
;;;375    						break;
0001aa  e00b              B        |L1.452|
;;;376    						case 3 :
;;;377    						
;;;378    							FLAG_WIN = 3 ;
0001ac  2003              MOVS     r0,#3
0001ae  4987              LDR      r1,|L1.972|
0001b0  7008              STRB     r0,[r1,#0]
;;;379    							CreateCdCharge();  		
0001b2  f7fffffe          BL       CreateCdCharge
;;;380    						break;
0001b6  e005              B        |L1.452|
;;;381    						case 6 :
;;;382    						
;;;383    							FLAG_WIN = 6 ;
0001b8  2006              MOVS     r0,#6
0001ba  4984              LDR      r1,|L1.972|
0001bc  7008              STRB     r0,[r1,#0]
;;;384    							CreateSysinfo();  		
0001be  f7fffffe          BL       CreateSysinfo
;;;385    						break;
0001c2  bf00              NOP      
                  |L1.452|
0001c4  bf00              NOP                            ;365
                  |L1.454|
;;;386    						
;;;387    					}
;;;388    					
;;;389    				}
;;;390    				BEEP_Tiggr();
0001c6  f7fffffe          BL       BEEP_Tiggr
;;;391    			}
;;;392    			break;
0001ca  e0e3              B        |L1.916|
;;;393    			 case PUSH_SETUP :
;;;394    			{
;;;395    				if( FLAG_INPUTAUTH != 1 && FLAG_WIN != 5 ){
0001cc  487e              LDR      r0,|L1.968|
0001ce  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
0001d0  2801              CMP      r0,#1
0001d2  d00c              BEQ      |L1.494|
0001d4  487d              LDR      r0,|L1.972|
0001d6  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
0001d8  2805              CMP      r0,#5
0001da  d008              BEQ      |L1.494|
;;;396    					delteWindow();
0001dc  f7fffffe          BL       delteWindow
;;;397    					Off_GPOI_ResetSet();
0001e0  f7fffffe          BL       Off_GPOI_ResetSet
;;;398    					FLAG_WIN = 5;
0001e4  2005              MOVS     r0,#5
0001e6  4979              LDR      r1,|L1.972|
0001e8  7008              STRB     r0,[r1,#0]
;;;399    					CreateSysSetting();
0001ea  f7fffffe          BL       CreateSysSetting
                  |L1.494|
;;;400    				}
;;;401    				BEEP_Tiggr();
0001ee  f7fffffe          BL       BEEP_Tiggr
;;;402    			}
;;;403    			break;
0001f2  e0cf              B        |L1.916|
;;;404    			
;;;405    			case KEY_TRIG:
;;;406    			{
;;;407    				if( FLAG_INPUTAUTH != 1 ){
0001f4  4874              LDR      r0,|L1.968|
0001f6  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
0001f8  2801              CMP      r0,#1
0001fa  d030              BEQ      |L1.606|
;;;408    					switch( FLAG_WIN ){
0001fc  4873              LDR      r0,|L1.972|
0001fe  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
000200  2806              CMP      r0,#6
000202  d22b              BCS      |L1.604|
000204  e8dff000          TBB      [pc,r0]
000208  03221625          DCB      0x03,0x22,0x16,0x25
00020c  2829              DCB      0x28,0x29
;;;409    						
;;;410    						case 0:{         //程控电源
;;;411    							
;;;412    							POWER_RECHARGE = (POWER_RECHARGE == 1) ? 0 : 1;			
00020e  4871              LDR      r0,|L1.980|
000210  7800              LDRB     r0,[r0,#0]  ; POWER_RECHARGE
000212  2801              CMP      r0,#1
000214  d008              BEQ      |L1.552|
000216  2001              MOVS     r0,#1
000218  e007              B        |L1.554|
00021a  e04e              B        |L1.698|
00021c  e022              B        |L1.612|
00021e  e04d              B        |L1.700|
000220  e062              B        |L1.744|
000222  e076              B        |L1.786|
000224  e08b              B        |L1.830|
000226  e0a0              B        |L1.874|
                  |L1.552|
000228  2000              MOVS     r0,#0
                  |L1.554|
00022a  496a              LDR      r1,|L1.980|
00022c  7008              STRB     r0,[r1,#0]
;;;413    							trig_power_charge();	
00022e  f7fffffe          BL       trig_power_charge
;;;414    						}
;;;415    						
;;;416    						break;
000232  e013              B        |L1.604|
;;;417    						
;;;418    						case 2: {        //程控负载
;;;419    						
;;;420    							C_DISCHARGE = (C_DISCHARGE == 1) ? 0 : 1;
000234  4868              LDR      r0,|L1.984|
000236  7800              LDRB     r0,[r0,#0]  ; C_DISCHARGE
000238  2801              CMP      r0,#1
00023a  d001              BEQ      |L1.576|
00023c  2001              MOVS     r0,#1
00023e  e000              B        |L1.578|
                  |L1.576|
000240  2000              MOVS     r0,#0
                  |L1.578|
000242  4965              LDR      r1,|L1.984|
000244  7008              STRB     r0,[r1,#0]
;;;421    							trig_load_discharge();
000246  f7fffffe          BL       trig_load_discharge
;;;422    						}	
;;;423    						
;;;424    						break;
00024a  e007              B        |L1.604|
;;;425    						
;;;426    						case 1:	{
;;;427    							
;;;428    							trig_R_charge();
00024c  f7fffffe          BL       trig_R_charge
;;;429    						}
;;;430    						break;			
000250  e004              B        |L1.604|
;;;431    						case 3:	{
;;;432    							
;;;433    							trig_Cdc_charge();
000252  f7fffffe          BL       trig_Cdc_charge
;;;434    						}
;;;435    						
;;;436    						case 4:
000256  bf00              NOP      
;;;437    						case 5:
000258  bf00              NOP      
;;;438    							
;;;439    						break;
00025a  bf00              NOP      
                  |L1.604|
00025c  bf00              NOP                            ;416
                  |L1.606|
;;;440    						
;;;441    					}
;;;442    				}
;;;443    				BEEP_Tiggr();
00025e  f7fffffe          BL       BEEP_Tiggr
;;;444    			} 
;;;445    			break;
000262  e097              B        |L1.916|
                  |L1.612|
;;;446    			case KEY_Reset://稳压电源ON/OFF
;;;447    			{
;;;448    				 switch(FLAG_WIN){
000264  4859              LDR      r0,|L1.972|
000266  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
000268  b120              CBZ      r0,|L1.628|
00026a  2801              CMP      r0,#1
00026c  d00d              BEQ      |L1.650|
00026e  2802              CMP      r0,#2
000270  d121              BNE      |L1.694|
000272  e015              B        |L1.672|
                  |L1.628|
;;;449    						case 0:
;;;450    
;;;451    							if(LOAD_V_SW == 0){
000274  4859              LDR      r0,|L1.988|
000276  69c0              LDR      r0,[r0,#0x1c]  ; Run_Control
000278  b918              CBNZ     r0,|L1.642|
;;;452    							
;;;453    								LOAD_V_SW = 1;
00027a  2001              MOVS     r0,#1
00027c  4957              LDR      r1,|L1.988|
00027e  61c8              STR      r0,[r1,#0x1c]  ; Run_Control
000280  e002              B        |L1.648|
                  |L1.642|
;;;454    
;;;455    							}else{
;;;456    								LOAD_V_SW = 0;
000282  2000              MOVS     r0,#0
000284  4955              LDR      r1,|L1.988|
000286  61c8              STR      r0,[r1,#0x1c]  ; Run_Control
                  |L1.648|
;;;457    							}
;;;458    
;;;459    						break;
000288  e015              B        |L1.694|
                  |L1.650|
;;;460    
;;;461    						case 1 :
;;;462    
;;;463    							if(RCONT_SW == 0){
00028a  4854              LDR      r0,|L1.988|
00028c  6a40              LDR      r0,[r0,#0x24]  ; Run_Control
00028e  b918              CBNZ     r0,|L1.664|
;;;464    
;;;465    								RCONT_SW = 1;
000290  2001              MOVS     r0,#1
000292  4952              LDR      r1,|L1.988|
000294  6248              STR      r0,[r1,#0x24]  ; Run_Control
000296  e002              B        |L1.670|
                  |L1.664|
;;;466    							}else{
;;;467    								RCONT_SW = 0;
000298  2000              MOVS     r0,#0
00029a  4950              LDR      r1,|L1.988|
00029c  6248              STR      r0,[r1,#0x24]  ; Run_Control
                  |L1.670|
;;;468    							}
;;;469    
;;;470    						break;
00029e  e00a              B        |L1.694|
                  |L1.672|
;;;471    
;;;472    						case 2:
;;;473    
;;;474    							if(LOAD_I_SW == 0){	
0002a0  484e              LDR      r0,|L1.988|
0002a2  6a00              LDR      r0,[r0,#0x20]  ; Run_Control
0002a4  b918              CBNZ     r0,|L1.686|
;;;475    
;;;476    								LOAD_I_SW = 1;//自动切换为高档位
0002a6  2001              MOVS     r0,#1
0002a8  494c              LDR      r1,|L1.988|
0002aa  6208              STR      r0,[r1,#0x20]  ; Run_Control
0002ac  e002              B        |L1.692|
                  |L1.686|
;;;477    
;;;478    							}else{
;;;479    								LOAD_I_SW = 0;
0002ae  2000              MOVS     r0,#0
0002b0  494a              LDR      r1,|L1.988|
0002b2  6208              STR      r0,[r1,#0x20]  ; Run_Control
                  |L1.692|
;;;480    							}
;;;481    						  break;
0002b4  bf00              NOP      
                  |L1.694|
0002b6  bf00              NOP                            ;459
;;;482    				 }
;;;483    			}
;;;484    			break; 
0002b8  e06c              B        |L1.916|
                  |L1.698|
;;;485    			case KEY_Powe :
;;;486    			{
;;;487    				
;;;488    				
;;;489    
;;;490    			}
;;;491    			break;
0002ba  e06b              B        |L1.916|
                  |L1.700|
;;;492    			case KEY_Face1 :
;;;493    			{
;;;494    				if( FLAG_INPUTAUTH != 1 && FLAG_WIN != 1  ){
0002bc  4842              LDR      r0,|L1.968|
0002be  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
0002c0  2801              CMP      r0,#1
0002c2  d00e              BEQ      |L1.738|
0002c4  4841              LDR      r0,|L1.972|
0002c6  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
0002c8  2801              CMP      r0,#1
0002ca  d00a              BEQ      |L1.738|
;;;495    					delteWindow();
0002cc  f7fffffe          BL       delteWindow
;;;496    					Off_GPOI_ResetSet();
0002d0  f7fffffe          BL       Off_GPOI_ResetSet
;;;497    					FLAG_FBUTWIN = 1;
0002d4  2001              MOVS     r0,#1
0002d6  493e              LDR      r1,|L1.976|
0002d8  7008              STRB     r0,[r1,#0]
;;;498    					FLAG_WIN = 1;
0002da  493c              LDR      r1,|L1.972|
0002dc  7008              STRB     r0,[r1,#0]
;;;499    					CreateR();
0002de  f7fffffe          BL       CreateR
                  |L1.738|
;;;500    				}
;;;501    				BEEP_Tiggr();
0002e2  f7fffffe          BL       BEEP_Tiggr
;;;502    			}
;;;503    			break;
0002e6  e055              B        |L1.916|
                  |L1.744|
;;;504    			case KEY_Face2 :
;;;505    			{
;;;506    				if( FLAG_INPUTAUTH != 1 && FLAG_WIN != 0  ){
0002e8  4837              LDR      r0,|L1.968|
0002ea  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
0002ec  2801              CMP      r0,#1
0002ee  d00d              BEQ      |L1.780|
0002f0  4836              LDR      r0,|L1.972|
0002f2  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
0002f4  b150              CBZ      r0,|L1.780|
;;;507    					delteWindow();
0002f6  f7fffffe          BL       delteWindow
;;;508    					Off_GPOI_ResetSet();
0002fa  f7fffffe          BL       Off_GPOI_ResetSet
;;;509    					FLAG_FBUTWIN = 0;
0002fe  2000              MOVS     r0,#0
000300  4933              LDR      r1,|L1.976|
000302  7008              STRB     r0,[r1,#0]
;;;510    					FLAG_WIN = 0;
000304  4931              LDR      r1,|L1.972|
000306  7008              STRB     r0,[r1,#0]
;;;511    					CreateWindowMenu();
000308  f7fffffe          BL       CreateWindowMenu
                  |L1.780|
;;;512    				}
;;;513    				BEEP_Tiggr();
00030c  f7fffffe          BL       BEEP_Tiggr
;;;514    			}
;;;515    			break;
000310  e040              B        |L1.916|
                  |L1.786|
;;;516    			case KEY_Face3 :
;;;517    			{
;;;518    				if( FLAG_INPUTAUTH != 1 && FLAG_WIN != 2  ){
000312  482d              LDR      r0,|L1.968|
000314  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000316  2801              CMP      r0,#1
000318  d00e              BEQ      |L1.824|
00031a  482c              LDR      r0,|L1.972|
00031c  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
00031e  2802              CMP      r0,#2
000320  d00a              BEQ      |L1.824|
;;;519    					delteWindow();
000322  f7fffffe          BL       delteWindow
;;;520    					Off_GPOI_ResetSet();
000326  f7fffffe          BL       Off_GPOI_ResetSet
;;;521    					FLAG_FBUTWIN = 2;
00032a  2002              MOVS     r0,#2
00032c  4928              LDR      r1,|L1.976|
00032e  7008              STRB     r0,[r1,#0]
;;;522    					FLAG_WIN = 2;
000330  4926              LDR      r1,|L1.972|
000332  7008              STRB     r0,[r1,#0]
;;;523    					CreateWindowload();
000334  f7fffffe          BL       CreateWindowload
                  |L1.824|
;;;524    				}
;;;525    				BEEP_Tiggr();
000338  f7fffffe          BL       BEEP_Tiggr
;;;526    			}
;;;527    			break;
00033c  e02a              B        |L1.916|
                  |L1.830|
;;;528    			case KEY_Face4 :  
;;;529    			{	
;;;530    			
;;;531    				if ( FLAG_INPUTAUTH != 1 && FLAG_WIN != 3 ){
00033e  4822              LDR      r0,|L1.968|
000340  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000342  2801              CMP      r0,#1
000344  d00e              BEQ      |L1.868|
000346  4821              LDR      r0,|L1.972|
000348  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
00034a  2803              CMP      r0,#3
00034c  d00a              BEQ      |L1.868|
;;;532    					delteWindow();
00034e  f7fffffe          BL       delteWindow
;;;533    					Off_GPOI_ResetSet();
000352  f7fffffe          BL       Off_GPOI_ResetSet
;;;534    					FLAG_FBUTWIN = 3;
000356  2003              MOVS     r0,#3
000358  491d              LDR      r1,|L1.976|
00035a  7008              STRB     r0,[r1,#0]
;;;535    					FLAG_WIN = 3;
00035c  491b              LDR      r1,|L1.972|
00035e  7008              STRB     r0,[r1,#0]
;;;536    					CreateCdCharge();
000360  f7fffffe          BL       CreateCdCharge
                  |L1.868|
;;;537    				}
;;;538    				BEEP_Tiggr();
000364  f7fffffe          BL       BEEP_Tiggr
;;;539    			}
;;;540    			break;
000368  e014              B        |L1.916|
                  |L1.874|
;;;541    			case KEY_Face5 :
;;;542    			{
;;;543    				if( FLAG_INPUTAUTH != 1 && FLAG_WIN != 5 ){
00036a  4817              LDR      r0,|L1.968|
00036c  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
00036e  2801              CMP      r0,#1
000370  d00c              BEQ      |L1.908|
000372  4816              LDR      r0,|L1.972|
000374  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
000376  2805              CMP      r0,#5
000378  d008              BEQ      |L1.908|
;;;544    					delteWindow();
00037a  f7fffffe          BL       delteWindow
;;;545    					Off_GPOI_ResetSet();
00037e  f7fffffe          BL       Off_GPOI_ResetSet
;;;546    					FLAG_WIN = 5;
000382  2005              MOVS     r0,#5
000384  4911              LDR      r1,|L1.972|
000386  7008              STRB     r0,[r1,#0]
;;;547    					CreateSysSetting();
000388  f7fffffe          BL       CreateSysSetting
                  |L1.908|
;;;548    				}
;;;549    				BEEP_Tiggr();
00038c  f7fffffe          BL       BEEP_Tiggr
;;;550    			}
;;;551    			break;
000390  e000              B        |L1.916|
                  |L1.914|
;;;552    			default:
;;;553    			break;
000392  bf00              NOP      
                  |L1.916|
000394  bf00              NOP                            ;223
                  |L1.918|
;;;554    		}	
;;;555    	}
;;;556    }
000396  bd08              POP      {r3,pc}
;;;557    
                          ENDP

                  |L1.920|
                          DCD      flagA
                  |L1.924|
00039c  3100              DCB      "1",0
00039e  00                DCB      0
00039f  00                DCB      0
                  |L1.928|
0003a0  3200              DCB      "2",0
0003a2  00                DCB      0
0003a3  00                DCB      0
                  |L1.932|
0003a4  3300              DCB      "3",0
0003a6  00                DCB      0
0003a7  00                DCB      0
                  |L1.936|
0003a8  3400              DCB      "4",0
0003aa  00                DCB      0
0003ab  00                DCB      0
                  |L1.940|
0003ac  3500              DCB      "5",0
0003ae  00                DCB      0
0003af  00                DCB      0
                  |L1.944|
0003b0  3600              DCB      "6",0
0003b2  00                DCB      0
0003b3  00                DCB      0
                  |L1.948|
0003b4  3700              DCB      "7",0
0003b6  00                DCB      0
0003b7  00                DCB      0
                  |L1.952|
0003b8  3800              DCB      "8",0
0003ba  00                DCB      0
0003bb  00                DCB      0
                  |L1.956|
0003bc  3900              DCB      "9",0
0003be  00                DCB      0
0003bf  00                DCB      0
                  |L1.960|
0003c0  3000              DCB      "0",0
0003c2  00                DCB      0
0003c3  00                DCB      0
                  |L1.964|
0003c4  2e00              DCB      ".",0
0003c6  00                DCB      0
0003c7  00                DCB      0
                  |L1.968|
                          DCD      FLAG_INPUTAUTH
                  |L1.972|
                          DCD      FLAG_WIN
                  |L1.976|
                          DCD      FLAG_FBUTWIN
                  |L1.980|
                          DCD      POWER_RECHARGE
                  |L1.984|
                          DCD      C_DISCHARGE
                  |L1.988|
                          DCD      Run_Control

                          AREA ||i.Key_Scan||, CODE, READONLY, ALIGN=2

                  Key_Scan PROC
;;;147    /************************************************************************************************************************/
;;;148    vu32 Key_Scan(void)
000000  b508              PUSH     {r3,lr}
;;;149    {
;;;150    	static vu8 KeyState = KEY_INIT_STATE;
;;;151    	static vu8 IsKeyRelease = 1;
;;;152    
;;;153    	static vu8 KeyValueTemp = 0;
;;;154    	vu8 KeyValue ;
;;;155    	KeyValue= KEY_NULL_VALUE;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;156    	
;;;157    	if((NewKey>0x37)&&(IsKeyRelease==1))
000006  4833              LDR      r0,|L2.212|
000008  7800              LDRB     r0,[r0,#0]  ; NewKey
00000a  2837              CMP      r0,#0x37
00000c  dd4f              BLE      |L2.174|
00000e  4832              LDR      r0,|L2.216|
000010  7800              LDRB     r0,[r0,#0]  ; IsKeyRelease
000012  2801              CMP      r0,#1
000014  d14b              BNE      |L2.174|
;;;158    	{
;;;159    		if(KeyState == KEY_INIT_STATE)                    /*无按键按下*/
000016  4831              LDR      r0,|L2.220|
000018  7800              LDRB     r0,[r0,#0]  ; KeyState
00001a  b920              CBNZ     r0,|L2.38|
;;;160    		{
;;;161    			KeyState = KEY_WOBBLE_STATE;
00001c  2001              MOVS     r0,#1
00001e  492f              LDR      r1,|L2.220|
000020  7008              STRB     r0,[r1,#0]
;;;162    			return KEY_NULL_VALUE;
000022  2000              MOVS     r0,#0
                  |L2.36|
;;;163    		}
;;;164    		else if(KeyState == KEY_WOBBLE_STATE)                /* 消抖 */
;;;165    		{
;;;166    			KeyState = KEY_PRESS_STATE;
;;;167    			return KEY_NULL_VALUE;
;;;168    		}
;;;169    		else if(KeyState == KEY_PRESS_STATE)                /* 有按键按下，返回按键值 */
;;;170    		{
;;;171    			KeyValue = NewKey;
;;;172    			KeyValueTemp = KeyValue;
;;;173    			KeyState = KEY_CONTINUE_STATE;
;;;174    			return KeyValue;
;;;175    		}
;;;176    		else if(KeyState == KEY_CONTINUE_STATE)           /*双击按键*/
;;;177    		{
;;;178    			KeyCounter ++;
;;;179    			if(KeyCounter == KEY_CONTINUE_PERIOD)
;;;180    			{
;;;181    				 KeyCounter = 0;
;;;182    				 KeyState = KEY_LONG_STATE;
;;;183    			}
;;;184    		}
;;;185    		else if(KeyState == KEY_LONG_STATE)                        /* 长按按键 */
;;;186    		{
;;;187    			KeyCounter ++;
;;;188    			if(KeyCounter == KEY_LONG_PERIOD)
;;;189    			{
;;;190    				KeyCounter = 0;
;;;191    				Flag_Long=1; //长按触发标志位
;;;192    			}
;;;193    		}
;;;194    	}
;;;195    	else if(NewKey<=0x37)
;;;196    	{
;;;197    		KeyState = KEY_INIT_STATE;        /* 误触发，返回到初始状态 */
;;;198    		IsKeyRelease = 1;
;;;199    		Flag_Long=0;
;;;200    	}
;;;201    	return KEY_NULL_VALUE;
;;;202    }
000024  bd08              POP      {r3,pc}
                  |L2.38|
000026  482d              LDR      r0,|L2.220|
000028  7800              LDRB     r0,[r0,#0]            ;164  ; KeyState
00002a  2801              CMP      r0,#1                 ;164
00002c  d104              BNE      |L2.56|
00002e  2002              MOVS     r0,#2                 ;166
000030  492a              LDR      r1,|L2.220|
000032  7008              STRB     r0,[r1,#0]            ;166
000034  2000              MOVS     r0,#0                 ;167
000036  e7f5              B        |L2.36|
                  |L2.56|
000038  4828              LDR      r0,|L2.220|
00003a  7800              LDRB     r0,[r0,#0]            ;169  ; KeyState
00003c  2802              CMP      r0,#2                 ;169
00003e  d10c              BNE      |L2.90|
000040  4824              LDR      r0,|L2.212|
000042  7800              LDRB     r0,[r0,#0]            ;171  ; NewKey
000044  9000              STR      r0,[sp,#0]            ;171
000046  f89d0000          LDRB     r0,[sp,#0]            ;172
00004a  4925              LDR      r1,|L2.224|
00004c  7008              STRB     r0,[r1,#0]            ;172
00004e  2004              MOVS     r0,#4                 ;173
000050  4922              LDR      r1,|L2.220|
000052  7008              STRB     r0,[r1,#0]            ;173
000054  f89d0000          LDRB     r0,[sp,#0]            ;174
000058  e7e4              B        |L2.36|
                  |L2.90|
00005a  4820              LDR      r0,|L2.220|
00005c  7800              LDRB     r0,[r0,#0]            ;176  ; KeyState
00005e  2804              CMP      r0,#4                 ;176
000060  d10e              BNE      |L2.128|
000062  4820              LDR      r0,|L2.228|
000064  8800              LDRH     r0,[r0,#0]            ;178  ; KeyCounter
000066  1c40              ADDS     r0,r0,#1              ;178
000068  491e              LDR      r1,|L2.228|
00006a  8008              STRH     r0,[r1,#0]            ;178
00006c  4608              MOV      r0,r1                 ;179
00006e  8800              LDRH     r0,[r0,#0]            ;179  ; KeyCounter
000070  280a              CMP      r0,#0xa               ;179
000072  d12c              BNE      |L2.206|
000074  2000              MOVS     r0,#0                 ;181
000076  8008              STRH     r0,[r1,#0]            ;181
000078  2003              MOVS     r0,#3                 ;182
00007a  4918              LDR      r1,|L2.220|
00007c  7008              STRB     r0,[r1,#0]            ;182
00007e  e026              B        |L2.206|
                  |L2.128|
000080  4816              LDR      r0,|L2.220|
000082  7800              LDRB     r0,[r0,#0]            ;185  ; KeyState
000084  2803              CMP      r0,#3                 ;185
000086  d122              BNE      |L2.206|
000088  4816              LDR      r0,|L2.228|
00008a  8800              LDRH     r0,[r0,#0]            ;187  ; KeyCounter
00008c  1c40              ADDS     r0,r0,#1              ;187
00008e  4915              LDR      r1,|L2.228|
000090  8008              STRH     r0,[r1,#0]            ;187
000092  4608              MOV      r0,r1                 ;188
000094  8800              LDRH     r0,[r0,#0]            ;188  ; KeyCounter
000096  2832              CMP      r0,#0x32              ;188
000098  d119              BNE      |L2.206|
00009a  2000              MOVS     r0,#0                 ;190
00009c  8008              STRH     r0,[r1,#0]            ;190
00009e  4812              LDR      r0,|L2.232|
0000a0  6800              LDR      r0,[r0,#0]            ;191  ; flagB
0000a2  f0200004          BIC      r0,r0,#4              ;191
0000a6  1d00              ADDS     r0,r0,#4              ;191
0000a8  490f              LDR      r1,|L2.232|
0000aa  6008              STR      r0,[r1,#0]            ;191  ; flagB
0000ac  e00f              B        |L2.206|
                  |L2.174|
0000ae  4809              LDR      r0,|L2.212|
0000b0  7800              LDRB     r0,[r0,#0]            ;195  ; NewKey
0000b2  2837              CMP      r0,#0x37              ;195
0000b4  dc0b              BGT      |L2.206|
0000b6  2000              MOVS     r0,#0                 ;197
0000b8  4908              LDR      r1,|L2.220|
0000ba  7008              STRB     r0,[r1,#0]            ;197
0000bc  2001              MOVS     r0,#1                 ;198
0000be  4906              LDR      r1,|L2.216|
0000c0  7008              STRB     r0,[r1,#0]            ;198
0000c2  4809              LDR      r0,|L2.232|
0000c4  6800              LDR      r0,[r0,#0]            ;199  ; flagB
0000c6  f0200004          BIC      r0,r0,#4              ;199
0000ca  4907              LDR      r1,|L2.232|
0000cc  6008              STR      r0,[r1,#0]            ;199  ; flagB
                  |L2.206|
0000ce  2000              MOVS     r0,#0                 ;201
0000d0  e7a8              B        |L2.36|
;;;203    /***************************************************************************************************************************/
                          ENDP

0000d2  0000              DCW      0x0000
                  |L2.212|
                          DCD      NewKey
                  |L2.216|
                          DCD      IsKeyRelease
                  |L2.220|
                          DCD      KeyState
                  |L2.224|
                          DCD      KeyValueTemp
                  |L2.228|
                          DCD      KeyCounter
                  |L2.232|
                          DCD      flagB

                          AREA ||i.Off_GPOI_ResetSet||, CODE, READONLY, ALIGN=2

                  Off_GPOI_ResetSet PROC
;;;722    //关闭所有 -- 使用的
;;;723    void Off_GPOI_ResetSet(){
000000  b510              PUSH     {r4,lr}
;;;724    	
;;;725    	POWER_RECHARGE = 0;						
000002  2000              MOVS     r0,#0
000004  4907              LDR      r1,|L3.36|
000006  7008              STRB     r0,[r1,#0]
;;;726    	C_DISCHARGE = 0;							
000008  4907              LDR      r1,|L3.40|
00000a  7008              STRB     r0,[r1,#0]
;;;727    	OnOff_GPOI_ResetSet( 0,	POWER_RECHARGE );
00000c  4805              LDR      r0,|L3.36|
00000e  7801              LDRB     r1,[r0,#0]  ; POWER_RECHARGE
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       OnOff_GPOI_ResetSet
;;;728    	OnOff_GPOI_ResetSet( 2, C_DISCHARGE );
000016  4804              LDR      r0,|L3.40|
000018  7801              LDRB     r1,[r0,#0]  ; C_DISCHARGE
00001a  2002              MOVS     r0,#2
00001c  f7fffffe          BL       OnOff_GPOI_ResetSet
;;;729    }
000020  bd10              POP      {r4,pc}
;;;730    
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      POWER_RECHARGE
                  |L3.40|
                          DCD      C_DISCHARGE

                          AREA ||i.OnOff_GPOI_ResetSet||, CODE, READONLY, ALIGN=2

                  OnOff_GPOI_ResetSet PROC
;;;673    //根据页面
;;;674    void OnOff_GPOI_ResetSet( vu8 _type, vu8 _value ){
000000  b513              PUSH     {r0,r1,r4,lr}
;;;675    	
;;;676    	switch( _type ){
000002  f89d0000          LDRB     r0,[sp,#0]
000006  b1f8              CBZ      r0,|L4.72|
000008  2802              CMP      r0,#2
00000a  d136              BNE      |L4.122|
;;;677    		
;;;678    //		case 1024:   
;;;679    //			if( _value == 0 ){
;;;680    //					
;;;681    //				flag_Load_CC = 1;//CC模式
;;;682    //				GPIO_ResetBits(GPIOC,GPIO_Pin_12);   //CC		
;;;683    //			}
;;;684    //			else if( _value == 1 ){
;;;685    //					
;;;686    //				flag_Load_CC=0;//CV模式
;;;687    //				GPIO_SetBits(GPIOC,GPIO_Pin_12);   //CV
;;;688    //			}
;;;689    //		break;
;;;690    		
;;;691    		case 2:  //电子负载ON/OFF
;;;692    			if( _value == 0 ){
00000c  f89d0004          LDRB     r0,[sp,#4]
000010  b950              CBNZ     r0,|L4.40|
;;;693    				
;;;694    				Flag_Swtich_ON = 0;
000012  481b              LDR      r0,|L4.128|
000014  6800              LDR      r0,[r0,#0]  ; flagA
000016  f0200040          BIC      r0,r0,#0x40
00001a  4919              LDR      r1,|L4.128|
00001c  6008              STR      r0,[r1,#0]  ; flagA
;;;695    				GPIO_SetBits(GPIOC,GPIO_Pin_7);//OFF	  	
00001e  2180              MOVS     r1,#0x80
000020  4818              LDR      r0,|L4.132|
000022  f7fffffe          BL       GPIO_SetBits
000026  e00e              B        |L4.70|
                  |L4.40|
;;;696    			}
;;;697    			else if( _value == 1 ){
000028  f89d0004          LDRB     r0,[sp,#4]
00002c  2801              CMP      r0,#1
00002e  d10a              BNE      |L4.70|
;;;698    				
;;;699    				Flag_Swtich_ON = 1;
000030  4813              LDR      r0,|L4.128|
000032  6800              LDR      r0,[r0,#0]  ; flagA
000034  f0200040          BIC      r0,r0,#0x40
000038  3040              ADDS     r0,r0,#0x40
00003a  4911              LDR      r1,|L4.128|
00003c  6008              STR      r0,[r1,#0]  ; flagA
;;;700    				GPIO_ResetBits(GPIOC,GPIO_Pin_7);//On
00003e  2180              MOVS     r1,#0x80
000040  4810              LDR      r0,|L4.132|
000042  f7fffffe          BL       GPIO_ResetBits
                  |L4.70|
;;;701    			}
;;;702    		break;
000046  e018              B        |L4.122|
                  |L4.72|
;;;703    		
;;;704    		case 0:  //稳压电源ON/OFF
;;;705    		
;;;706    			if( _value == 0 ){
000048  f89d0004          LDRB     r0,[sp,#4]
00004c  b940              CBNZ     r0,|L4.96|
;;;707    				
;;;708    				GPIO_ResetBits(GPIOC,GPIO_Pin_1); //关闭电源输出
00004e  2102              MOVS     r1,#2
000050  480c              LDR      r0,|L4.132|
000052  f7fffffe          BL       GPIO_ResetBits
;;;709    				GPIO_ResetBits(GPIOE,GPIO_Pin_2); //关闭电源输出继电器
000056  2104              MOVS     r1,#4
000058  480b              LDR      r0,|L4.136|
00005a  f7fffffe          BL       GPIO_ResetBits
00005e  e00b              B        |L4.120|
                  |L4.96|
;;;710    			}
;;;711    			else if( _value == 1 ){
000060  f89d0004          LDRB     r0,[sp,#4]
000064  2801              CMP      r0,#1
000066  d107              BNE      |L4.120|
;;;712    				
;;;713    				GPIO_SetBits(GPIOE,GPIO_Pin_2);   //打开电源输出继电器
000068  2104              MOVS     r1,#4
00006a  4807              LDR      r0,|L4.136|
00006c  f7fffffe          BL       GPIO_SetBits
;;;714    				GPIO_SetBits(GPIOC,GPIO_Pin_1);   //打开电源输出
000070  2102              MOVS     r1,#2
000072  4804              LDR      r0,|L4.132|
000074  f7fffffe          BL       GPIO_SetBits
                  |L4.120|
;;;715    			}
;;;716    		break;
000078  bf00              NOP      
                  |L4.122|
00007a  bf00              NOP                            ;702
;;;717    		
;;;718    	}
;;;719    	
;;;720    }
00007c  bd1c              POP      {r2-r4,pc}
;;;721    
                          ENDP

00007e  0000              DCW      0x0000
                  |L4.128|
                          DCD      flagA
                  |L4.132|
                          DCD      0x40020800
                  |L4.136|
                          DCD      0x40021000

                          AREA ||i.delteWindow||, CODE, READONLY, ALIGN=2

                  delteWindow PROC
;;;558    //删除窗口
;;;559    void delteWindow(void){
000000  b510              PUSH     {r4,lr}
;;;560    	
;;;561    	trig_flag_state = 0;
000002  2000              MOVS     r0,#0
000004  490f              LDR      r1,|L5.68|
000006  7008              STRB     r0,[r1,#0]
;;;562    	
;;;563    	WM_DeleteWindow(hWinR);
000008  480f              LDR      r0,|L5.72|
00000a  6800              LDR      r0,[r0,#0]  ; hWinR
00000c  f7fffffe          BL       WM_DeleteWindow
;;;564    	
;;;565    	WM_DeleteWindow(hWinWind);
000010  480e              LDR      r0,|L5.76|
000012  6800              LDR      r0,[r0,#0]  ; hWinWind
000014  f7fffffe          BL       WM_DeleteWindow
;;;566    	
;;;567    	WM_DeleteWindow(cdchargeWin);
000018  480d              LDR      r0,|L5.80|
00001a  6800              LDR      r0,[r0,#0]  ; cdchargeWin
00001c  f7fffffe          BL       WM_DeleteWindow
;;;568    	
;;;569    	WM_DeleteWindow(load_wind);
000020  480c              LDR      r0,|L5.84|
000022  6800              LDR      r0,[r0,#0]  ; load_wind
000024  f7fffffe          BL       WM_DeleteWindow
;;;570    	
;;;571    	WM_DeleteWindow(GhWin);
000028  480b              LDR      r0,|L5.88|
00002a  6800              LDR      r0,[r0,#0]  ; GhWin
00002c  f7fffffe          BL       WM_DeleteWindow
;;;572    	
;;;573    	WM_DeleteWindow(sysSettingWin);
000030  480a              LDR      r0,|L5.92|
000032  6800              LDR      r0,[r0,#0]  ; sysSettingWin
000034  f7fffffe          BL       WM_DeleteWindow
;;;574    	
;;;575    	WM_DeleteWindow(sysinfoWin);
000038  4809              LDR      r0,|L5.96|
00003a  6800              LDR      r0,[r0,#0]  ; sysinfoWin
00003c  f7fffffe          BL       WM_DeleteWindow
;;;576    	
;;;577    }
000040  bd10              POP      {r4,pc}
;;;578    
                          ENDP

000042  0000              DCW      0x0000
                  |L5.68|
                          DCD      trig_flag_state
                  |L5.72|
                          DCD      hWinR
                  |L5.76|
                          DCD      hWinWind
                  |L5.80|
                          DCD      cdchargeWin
                  |L5.84|
                          DCD      load_wind
                  |L5.88|
                          DCD      GhWin
                  |L5.92|
                          DCD      sysSettingWin
                  |L5.96|
                          DCD      sysinfoWin

                          AREA ||i.ent_input_win||, CODE, READONLY, ALIGN=2

                  ent_input_win PROC
;;;630    // 确认键
;;;631    void ent_input_win(){
000000  b510              PUSH     {r4,lr}
;;;632    	
;;;633    	switch( FLAG_WIN ){		
000002  4810              LDR      r0,|L6.68|
000004  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
000006  2807              CMP      r0,#7
000008  d21a              BCS      |L6.64|
00000a  e8dff000          TBB      [pc,r0]
00000e  0407              DCB      0x04,0x07
000010  0a0d1013          DCB      0x0a,0x0d,0x10,0x13
000014  1600              DCB      0x16,0x00
;;;634    	
;;;635    		case 0:	Power_ent(); 	break;
000016  f7fffffe          BL       Power_ent
00001a  e011              B        |L6.64|
;;;636    		
;;;637    		case 1: R_ent();		break;
00001c  f7fffffe          BL       R_ent
000020  e00e              B        |L6.64|
;;;638    		
;;;639    		case 2: Load_ent();		break;
000022  f7fffffe          BL       Load_ent
000026  e00b              B        |L6.64|
;;;640    		
;;;641    		case 3: Cdc_ent();		break;
000028  f7fffffe          BL       Cdc_ent
00002c  e008              B        |L6.64|
;;;642    		
;;;643    		case 4: Graph_ent();	break;
00002e  f7fffffe          BL       Graph_ent
000032  e005              B        |L6.64|
;;;644    		
;;;645    		case 5: Sysset_ent();	break;
000034  f7fffffe          BL       Sysset_ent
000038  e002              B        |L6.64|
;;;646    		
;;;647    		case 6: Sysinfo_ent();	break;
00003a  f7fffffe          BL       Sysinfo_ent
00003e  bf00              NOP      
                  |L6.64|
000040  bf00              NOP                            ;635
;;;648    		
;;;649    	}
;;;650    }
000042  bd10              POP      {r4,pc}
;;;651    
                          ENDP

                  |L6.68|
                          DCD      FLAG_WIN

                          AREA ||i.key_delete_input||, CODE, READONLY, ALIGN=2

                  key_delete_input PROC
;;;652    //删除输入字符
;;;653    void key_delete_input(){
000000  b510              PUSH     {r4,lr}
;;;654    	
;;;655    	switch( FLAG_WIN ){
000002  4810              LDR      r0,|L7.68|
000004  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
000006  2807              CMP      r0,#7
000008  d21a              BCS      |L7.64|
00000a  e8dff000          TBB      [pc,r0]
00000e  0407              DCB      0x04,0x07
000010  0a0d1013          DCB      0x0a,0x0d,0x10,0x13
000014  1600              DCB      0x16,0x00
;;;656    		
;;;657    		case 0:	Power_delete_input(); 	break;
000016  f7fffffe          BL       Power_delete_input
00001a  e011              B        |L7.64|
;;;658    		
;;;659    		case 1: R_delete_input();		break;
00001c  f7fffffe          BL       R_delete_input
000020  e00e              B        |L7.64|
;;;660    		
;;;661    		case 2: Load_delete_input();	break;
000022  f7fffffe          BL       Load_delete_input
000026  e00b              B        |L7.64|
;;;662    		
;;;663    		case 3: Cdc_delete_input();		break;
000028  f7fffffe          BL       Cdc_delete_input
00002c  e008              B        |L7.64|
;;;664    		
;;;665    		case 4: Graph_delete_input();	break;
00002e  f7fffffe          BL       Graph_delete_input
000032  e005              B        |L7.64|
;;;666    		
;;;667    		case 5: Sysset_delete_input();	break;
000034  f7fffffe          BL       Sysset_delete_input
000038  e002              B        |L7.64|
;;;668    		
;;;669    		case 6: Sysinfo_delete_input();	break;
00003a  f7fffffe          BL       Sysinfo_delete_input
00003e  bf00              NOP      
                  |L7.64|
000040  bf00              NOP                            ;657
;;;670    	}
;;;671    }
000042  bd10              POP      {r4,pc}
;;;672    
                          ENDP

                  |L7.68|
                          DCD      FLAG_WIN

                          AREA ||i.key_down_window||, CODE, READONLY, ALIGN=2

                  key_down_window PROC
;;;579    /*   按键输入 ----  上下左右    */
;;;580    void key_down_window( vu8 direction )
000000  b501              PUSH     {r0,lr}
;;;581    {
;;;582    	
;;;583    	if	( FLAG_INPUTAUTH == 1 ) 
000002  4819              LDR      r0,|L8.104|
000004  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000006  2801              CMP      r0,#1
000008  d12d              BNE      |L8.102|
;;;584    	{
;;;585    		switch( FLAG_WIN )
00000a  4818              LDR      r0,|L8.108|
00000c  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
00000e  2807              CMP      r0,#7
000010  d228              BCS      |L8.100|
000012  e8dff000          TBB      [pc,r0]
000016  0409              DCB      0x04,0x09
000018  0e13181d          DCB      0x0e,0x13,0x18,0x1d
00001c  2200              DCB      0x22,0x00
;;;586    		{			
;;;587    			case 0:	KEY_DOWN_POWER(direction); break;
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  f7fffffe          BL       KEY_DOWN_POWER
000026  e01d              B        |L8.100|
;;;588    			
;;;589    			case 1: KEY_DOWN_IRT(direction); break;
000028  f89d0000          LDRB     r0,[sp,#0]
00002c  f7fffffe          BL       KEY_DOWN_IRT
000030  e018              B        |L8.100|
;;;590    			
;;;591    			case 2: KEY_DOWN_LOAD(direction); break;
000032  f89d0000          LDRB     r0,[sp,#0]
000036  f7fffffe          BL       KEY_DOWN_LOAD
00003a  e013              B        |L8.100|
;;;592    			
;;;593    			case 3: KEY_DOWN_CDC(direction); break;
00003c  f89d0000          LDRB     r0,[sp,#0]
000040  f7fffffe          BL       KEY_DOWN_CDC
000044  e00e              B        |L8.100|
;;;594    			
;;;595    			case 4: KEY_DOWN_GRAPH(direction); break;
000046  f89d0000          LDRB     r0,[sp,#0]
00004a  f7fffffe          BL       KEY_DOWN_GRAPH
00004e  e009              B        |L8.100|
;;;596    			
;;;597    			case 5: KEY_DOWN_SYSSET(direction); break;
000050  f89d0000          LDRB     r0,[sp,#0]
000054  f7fffffe          BL       KEY_DOWN_SYSSET
000058  e004              B        |L8.100|
;;;598    			
;;;599    			case 6: KEY_DOWN_SYSINFO(direction); break;
00005a  f89d0000          LDRB     r0,[sp,#0]
00005e  f7fffffe          BL       KEY_DOWN_SYSINFO
000062  bf00              NOP      
                  |L8.100|
000064  bf00              NOP                            ;587
                  |L8.102|
;;;600    		}
;;;601    	}
;;;602    	
;;;603    }
000066  bd08              POP      {r3,pc}
;;;604    
                          ENDP

                  |L8.104|
                          DCD      FLAG_INPUTAUTH
                  |L8.108|
                          DCD      FLAG_WIN

                          AREA ||i.key_input_window||, CODE, READONLY, ALIGN=2

                  key_input_window PROC
;;;605    /*   按键输入 ----   数字    */
;;;606    void key_input_window(char *strx)
000000  b510              PUSH     {r4,lr}
;;;607    {
000002  4604              MOV      r4,r0
;;;608    	if	( FLAG_INPUTAUTH == 1 ) 
000004  4815              LDR      r0,|L9.92|
000006  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000008  2801              CMP      r0,#1
00000a  d126              BNE      |L9.90|
;;;609    	{	
;;;610    		switch( FLAG_WIN )
00000c  4814              LDR      r0,|L9.96|
00000e  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
000010  2807              CMP      r0,#7
000012  d221              BCS      |L9.88|
000014  e8dff000          TBB      [pc,r0]
000018  04080c10          DCB      0x04,0x08,0x0c,0x10
00001c  14181c00          DCB      0x14,0x18,0x1c,0x00
;;;611    		{
;;;612    					
;;;613    			case 0:	KEY_POWER_INPUT(strx); 	break;
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       KEY_POWER_INPUT
000026  e017              B        |L9.88|
;;;614    			
;;;615    			case 1: KEY_IRT_INPUT(strx);	break;
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       KEY_IRT_INPUT
00002e  e013              B        |L9.88|
;;;616    			
;;;617    			case 2: KEY_LOAD_INPUT(strx);	break;
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       KEY_LOAD_INPUT
000036  e00f              B        |L9.88|
;;;618    			
;;;619    			case 3: KEY_CDC_INPUT(strx);	break;
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       KEY_CDC_INPUT
00003e  e00b              B        |L9.88|
;;;620    			
;;;621    			case 4: KEY_GRAPH_INPUT(strx);	break;
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       KEY_GRAPH_INPUT
000046  e007              B        |L9.88|
;;;622    			
;;;623    			case 5: KEY_SYSSET_INPUT(strx);	break;
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       KEY_SYSSET_INPUT
00004e  e003              B        |L9.88|
;;;624    			
;;;625    			case 6: KEY_SYSINFO_INPUT(strx);	break;
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       KEY_SYSINFO_INPUT
000056  bf00              NOP      
                  |L9.88|
000058  bf00              NOP                            ;613
                  |L9.90|
;;;626    		}
;;;627    	}
;;;628    }
00005a  bd10              POP      {r4,pc}
;;;629    
                          ENDP

                  |L9.92|
                          DCD      FLAG_INPUTAUTH
                  |L9.96|
                          DCD      FLAG_WIN

                          AREA ||.data||, DATA, ALIGN=2

                  t_MODE
000000  00                DCB      0x00
                  t_KeyScan
000001  00                DCB      0x00
                  NewKey
000002  00                DCB      0x00
                  t_wei
000003  00                DCB      0x00
                  t_beep
000004  00                DCB      0x00
                  t_Str
000005  00                DCB      0x00
                  t_lock
000006  00                DCB      0x00
                  t_onoff
000007  00                DCB      0x00
                  t_doub
000008  00                DCB      0x00
                  t_key_step
000009  00                DCB      0x00
                  Key1
00000a  0000              DCB      0x00,0x00
                  Key2
00000c  0000              DCB      0x00,0x00
                  Key3
00000e  0000              DCB      0x00,0x00
                  Key4
000010  0000              DCB      0x00,0x00
                  Key5
000012  0000              DCB      0x00,0x00
                  Key6
000014  0000              DCB      0x00,0x00
                  Key7
000016  0000              DCB      0x00,0x00
                  Key8
000018  00000000          DCB      0x00,0x00,0x00,0x00
                  Key9
                          DCD      0x00000000
                  KeyCounter
000020  0000              DCB      0x00,0x00
                  MAX_limit
000022  0000              DCB      0x00,0x00
                  MIN_limit
000024  0000              DCB      0x00,0x00
                  Test_Time
000026  0000              DCB      0x00,0x00
                  Test_Time1
000028  0000              DCB      0x00,0x00
                  Time_sw
00002a  0000              DCB      0x00,0x00
                  Test_Daley
00002c  0000              DCB      0x00,0x00
                  Test_C_Door
00002e  0000              DCB      0x00,0x00
                  OFFSET_Zore
000030  00                DCB      0x00
                  FLAG_WIN
000031  00                DCB      0x00
                  FLAG_LANG
000032  00                DCB      0x00
                  FIRST_LOAD
000033  00                DCB      0x00
                  FLAG_OVTest
000034  00                DCB      0x00
                  FLAG_INPUTAUTH
000035  00                DCB      0x00
                  FLAG_FBUTWIN
000036  00                DCB      0x00
                  POWER_RECHARGE
000037  00                DCB      0x00
                  C_DISCHARGE
000038  00                DCB      0x00
                  KeyState
000039  00                DCB      0x00
                  IsKeyRelease
00003a  01                DCB      0x01
                  KeyValueTemp
00003b  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\drive\\key.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_key_c_Key_Scan____REV16|
#line 129 "D:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_key_c_Key_Scan____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_key_c_Key_Scan____REVSH|
#line 144
|__asm___5_key_c_Key_Scan____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
