; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\menu.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\menu.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\menu.crf --no_multibyte_chars ..\APP\menu.c]
                          THUMB

                          AREA ||i.CreateWindowMenu||, CODE, READONLY, ALIGN=2

                  CreateWindowMenu PROC
;;;216    
;;;217    WM_HWIN CreateWindowMenu(void) {
000000  b57c              PUSH     {r2-r6,lr}
;;;218    
;;;219    	int dlen = 0;
000002  2500              MOVS     r5,#0
;;;220    	
;;;221    	int *key_loc;
;;;222    	
;;;223    	if( FLAG_FIRSTWIN[0] )
000004  4834              LDR      r0,|L1.216|
000006  7800              LDRB     r0,[r0,#0]  ; FLAG_FIRSTWIN
000008  b398              CBZ      r0,|L1.114|
;;;224    	{
;;;225    		if( CLists.POWER_OutPut_V 	  !=	0xffffff )
00000a  4834              LDR      r0,|L1.220|
00000c  f8b000de          LDRH     r0,[r0,#0xde]  ; CLists
000010  f06f417f          MVN      r1,#0xff000000
000014  4288              CMP      r0,r1
000016  d007              BEQ      |L1.40|
;;;226    		
;;;227    			strcpy( SGhListM[10].f_SName , Read_Data_Parse(1) ); 		strcpy( SGhListM[10].f_EName , Read_Data_Parse(1) ); 			
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       Read_Data_Parse
00001e  4606              MOV      r6,r0
000020  4631              MOV      r1,r6
000022  482f              LDR      r0,|L1.224|
000024  f7fffffe          BL       strcpy
                  |L1.40|
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       Read_Data_Parse
00002e  4606              MOV      r6,r0
000030  4631              MOV      r1,r6
000032  482b              LDR      r0,|L1.224|
000034  3014              ADDS     r0,r0,#0x14
000036  f7fffffe          BL       strcpy
;;;228    		
;;;229    		if( CLists.POWER_Limit_C 	  != 	0xffffff )
00003a  4828              LDR      r0,|L1.220|
00003c  f8b000e0          LDRH     r0,[r0,#0xe0]  ; CLists
000040  f06f417f          MVN      r1,#0xff000000
000044  4288              CMP      r0,r1
000046  d008              BEQ      |L1.90|
;;;230    			
;;;231    			strcpy( SGhListM[13].f_SName , Read_Data_Parse(2) ); 		strcpy( SGhListM[13].f_EName , Read_Data_Parse(2) ); 		
000048  2002              MOVS     r0,#2
00004a  f7fffffe          BL       Read_Data_Parse
00004e  4606              MOV      r6,r0
000050  4631              MOV      r1,r6
000052  4823              LDR      r0,|L1.224|
000054  30d8              ADDS     r0,r0,#0xd8
000056  f7fffffe          BL       strcpy
                  |L1.90|
00005a  2002              MOVS     r0,#2
00005c  f7fffffe          BL       Read_Data_Parse
000060  4606              MOV      r6,r0
000062  4631              MOV      r1,r6
000064  481e              LDR      r0,|L1.224|
000066  30ec              ADDS     r0,r0,#0xec
000068  f7fffffe          BL       strcpy
;;;232    		
;;;233    		FLAG_FIRSTWIN[0] = 0;	
00006c  2000              MOVS     r0,#0
00006e  491a              LDR      r1,|L1.216|
000070  7008              STRB     r0,[r1,#0]
                  |L1.114|
;;;234    	} 	
;;;235    	CLists.CSET_Voltage = CLists.POWER_OutPut_V;
000072  481a              LDR      r0,|L1.220|
000074  f8b000de          LDRH     r0,[r0,#0xde]  ; CLists
000078  4918              LDR      r1,|L1.220|
00007a  6088              STR      r0,[r1,#8]  ; CLists
;;;236    	 
;;;237    	CLists.CSET_Current = CLists.POWER_Limit_C;
00007c  4608              MOV      r0,r1
00007e  f8b000e0          LDRH     r0,[r0,#0xe0]  ; CLists
000082  60c8              STR      r0,[r1,#0xc]  ; CLists
;;;238    	
;;;239    	dlen = sizeof(SGhListM) / sizeof(SGhListM[0]);
000084  250f              MOVS     r5,#0xf
;;;240    	
;;;241    	key_loc = get_id_index( SGhListM, dlen);
000086  4629              MOV      r1,r5
000088  4816              LDR      r0,|L1.228|
00008a  f7fffffe          BL       get_id_index
00008e  4604              MOV      r4,r0
;;;242    	
;;;243    	memset( displayStr, '\0', sizeof(displayStr));
000090  2114              MOVS     r1,#0x14
000092  4815              LDR      r0,|L1.232|
000094  f7fffffe          BL       __aeabi_memclr
;;;244    	
;;;245    	if( *key_loc != 11 )
000098  6820              LDR      r0,[r4,#0]
00009a  280b              CMP      r0,#0xb
00009c  d00b              BEQ      |L1.182|
;;;246    	{
;;;247    		SGhListM[*(key_loc+1)].focusType = 0;
00009e  2000              MOVS     r0,#0
0000a0  6861              LDR      r1,[r4,#4]
0000a2  eb0101c1          ADD      r1,r1,r1,LSL #3
0000a6  4a0f              LDR      r2,|L1.228|
0000a8  eb0201c1          ADD      r1,r2,r1,LSL #3
0000ac  6048              STR      r0,[r1,#4]
;;;248    		
;;;249    		SGhListM[10].focusType = 1;
0000ae  2101              MOVS     r1,#1
0000b0  4610              MOV      r0,r2
0000b2  f8c012d4          STR      r1,[r0,#0x2d4]
                  |L1.182|
;;;250    	}
;;;251    	hWinWind = GUI_CreateDialogBox(_aDialogCreateMenu, GUI_COUNTOF(_aDialogCreateMenu), _cbDialogMenu, WM_HBKWIN, 0, 0);
0000b6  f7fffffe          BL       WM_GetDesktopWindow
0000ba  4606              MOV      r6,r0
0000bc  2000              MOVS     r0,#0
0000be  9000              STR      r0,[sp,#0]
0000c0  4633              MOV      r3,r6
0000c2  4a0a              LDR      r2,|L1.236|
0000c4  2106              MOVS     r1,#6
0000c6  9001              STR      r0,[sp,#4]
0000c8  4809              LDR      r0,|L1.240|
0000ca  f7fffffe          BL       GUI_CreateDialogBox
0000ce  4909              LDR      r1,|L1.244|
0000d0  6008              STR      r0,[r1,#0]  ; hWinWind
;;;252    	
;;;253    	return hWinWind;
0000d2  4608              MOV      r0,r1
0000d4  6800              LDR      r0,[r0,#0]  ; hWinWind
;;;254    }
0000d6  bd7c              POP      {r2-r6,pc}
;;;255    
                          ENDP

                  |L1.216|
                          DCD      FLAG_FIRSTWIN
                  |L1.220|
                          DCD      CLists
                  |L1.224|
                          DCD      SGhListM+0x2dc
                  |L1.228|
                          DCD      SGhListM
                  |L1.232|
                          DCD      displayStr
                  |L1.236|
                          DCD      _cbDialogMenu
                  |L1.240|
                          DCD      _aDialogCreateMenu
                  |L1.244|
                          DCD      hWinWind

                          AREA ||i.KEY_DOWN_POWER||, CODE, READONLY, ALIGN=2

                  KEY_DOWN_POWER PROC
;;;313    
;;;314    void KEY_DOWN_POWER( int handle )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;315    {
000004  4606              MOV      r6,r0
;;;316    	int i;
;;;317    	int *key_loc;
;;;318    	int get_nextid = 0, nowid = 0, nowid_index = 0, dlen = 0;  
000006  2700              MOVS     r7,#0
000008  46b8              MOV      r8,r7
00000a  46ba              MOV      r10,r7
00000c  46b9              MOV      r9,r7
;;;319    	
;;;320    	if( FLAG_INPUTAUTH == 0)
00000e  4825              LDR      r0,|L2.164|
000010  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000012  2800              CMP      r0,#0
000014  d143              BNE      |L2.158|
;;;321    	{
;;;322    		dlen = sizeof(SGhListM) / sizeof(SGhListM[0]);
000016  f04f090f          MOV      r9,#0xf
;;;323    		key_loc = get_id_index( SGhListM, dlen);
00001a  4649              MOV      r1,r9
00001c  4822              LDR      r0,|L2.168|
00001e  f7fffffe          BL       get_id_index
000022  4605              MOV      r5,r0
;;;324    				
;;;325    		nowid = *key_loc;
000024  f8d58000          LDR      r8,[r5,#0]
;;;326    		nowid_index = *(key_loc + 1);
000028  f8d5a004          LDR      r10,[r5,#4]
;;;327    		
;;;328    		if( nowid == 0x194 )
00002c  f5b87fca          CMP      r8,#0x194
000030  d103              BNE      |L2.58|
;;;329    			
;;;330    			SGhListM[10].focusType = 1;
000032  2101              MOVS     r1,#1
000034  481c              LDR      r0,|L2.168|
000036  f8c012d4          STR      r1,[r0,#0x2d4]
                  |L2.58|
;;;331    		
;;;332    		get_nextid = get_nextindex( nowid, WINM_id_DataLists, handle);
00003a  4632              MOV      r2,r6
00003c  491b              LDR      r1,|L2.172|
00003e  4640              MOV      r0,r8
000040  f7fffffe          BL       get_nextindex
000044  4607              MOV      r7,r0
;;;333    		
;;;334    		if(  get_nextid != 0xFF )
000046  2fff              CMP      r7,#0xff
000048  d029              BEQ      |L2.158|
;;;335    		{
;;;336    			SGhListM[nowid_index].focusType = 0;	
00004a  2000              MOVS     r0,#0
00004c  eb0a01ca          ADD      r1,r10,r10,LSL #3
000050  4a15              LDR      r2,|L2.168|
000052  eb0201c1          ADD      r1,r2,r1,LSL #3
000056  6048              STR      r0,[r1,#4]
;;;337    				
;;;338    			for	( i = 0; i < dlen; i++)
000058  2400              MOVS     r4,#0
00005a  e01d              B        |L2.152|
                  |L2.92|
;;;339    			{
;;;340    				if( SGhListM[i].d_ID == get_nextid && (SGhListM[i].t_Type == T_THref || SGhListM[i].t_Type == T_TLISTBOX) )
00005c  eb0400c4          ADD      r0,r4,r4,LSL #3
000060  4911              LDR      r1,|L2.168|
000062  f8510030          LDR      r0,[r1,r0,LSL #3]
000066  42b8              CMP      r0,r7
000068  d115              BNE      |L2.150|
00006a  eb0400c4          ADD      r0,r4,r4,LSL #3
00006e  eb0100c0          ADD      r0,r1,r0,LSL #3
000072  6880              LDR      r0,[r0,#8]
000074  2801              CMP      r0,#1
000076  d006              BEQ      |L2.134|
000078  eb0400c4          ADD      r0,r4,r4,LSL #3
00007c  eb0100c0          ADD      r0,r1,r0,LSL #3
000080  6880              LDR      r0,[r0,#8]
000082  2803              CMP      r0,#3
000084  d107              BNE      |L2.150|
                  |L2.134|
;;;341    				{				
;;;342    					  SGhListM[i].focusType = 1;	
000086  2001              MOVS     r0,#1
000088  eb0401c4          ADD      r1,r4,r4,LSL #3
00008c  4a06              LDR      r2,|L2.168|
00008e  eb0201c1          ADD      r1,r2,r1,LSL #3
000092  6048              STR      r0,[r1,#4]
;;;343    					  break;
000094  e002              B        |L2.156|
                  |L2.150|
000096  1c64              ADDS     r4,r4,#1              ;338
                  |L2.152|
000098  454c              CMP      r4,r9                 ;338
00009a  dbdf              BLT      |L2.92|
                  |L2.156|
00009c  bf00              NOP      
                  |L2.158|
;;;344    				}
;;;345    			}	
;;;346    		}
;;;347    	}
;;;348    	else	
;;;349    	{
;;;350    	
;;;351    	}
;;;352    
;;;353    }
00009e  e8bd87f0          POP      {r4-r10,pc}
;;;354    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L2.164|
                          DCD      FLAG_INPUTAUTH
                  |L2.168|
                          DCD      SGhListM
                  |L2.172|
                          DCD      WINM_id_DataLists

                          AREA ||i.KEY_POWER_INPUT||, CODE, READONLY, ALIGN=2

                  KEY_POWER_INPUT PROC
;;;256    
;;;257    void KEY_POWER_INPUT(char *strx){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
;;;258    	
;;;259    	int i, dot_loc = 1024, dlen = 0;	
000006  f44f6780          MOV      r7,#0x400
00000a  f04f0800          MOV      r8,#0
;;;260    	int *key_loc;
;;;261    	
;;;262    	dlen = sizeof(SGhListM) / sizeof(SGhListM[0]);
00000e  f04f080f          MOV      r8,#0xf
;;;263    		
;;;264    	key_loc = get_id_index( SGhListM, dlen);
000012  4641              MOV      r1,r8
000014  483c              LDR      r0,|L3.264|
000016  f7fffffe          BL       get_id_index
00001a  4605              MOV      r5,r0
;;;265    		
;;;266    	if( *key_loc == 0x194 )
00001c  6828              LDR      r0,[r5,#0]
00001e  f5b07fca          CMP      r0,#0x194
000022  d104              BNE      |L3.46|
;;;267    			
;;;268    		SGhListM[20].focusType = 1;
000024  2101              MOVS     r1,#1
000026  4838              LDR      r0,|L3.264|
000028  f8c015a4          STR      r1,[r0,#0x5a4]
00002c  e064              B        |L3.248|
                  |L3.46|
;;;269    	else
;;;270    	{
;;;271    	
;;;272    		if( displayStr[0] == '\0' && *strx == 0x2e )
00002e  4837              LDR      r0,|L3.268|
000030  7800              LDRB     r0,[r0,#0]  ; displayStr
000032  b938              CBNZ     r0,|L3.68|
000034  7830              LDRB     r0,[r6,#0]
000036  282e              CMP      r0,#0x2e
000038  d104              BNE      |L3.68|
;;;273    			
;;;274    			  strcat( displayStr, "0.");
00003a  a135              ADR      r1,|L3.272|
00003c  4833              LDR      r0,|L3.268|
00003e  f7fffffe          BL       strcat
000042  e02a              B        |L3.154|
                  |L3.68|
;;;275    		else
;;;276    		{
;;;277    			for ( i = 0; i < strlen(displayStr); i++)
000044  2400              MOVS     r4,#0
000046  e00d              B        |L3.100|
                  |L3.72|
;;;278    			{			
;;;279    				if( displayStr[i] == 0x2e )
000048  4830              LDR      r0,|L3.268|
00004a  5d00              LDRB     r0,[r0,r4]
00004c  282e              CMP      r0,#0x2e
00004e  d100              BNE      |L3.82|
;;;280    					
;;;281    					dot_loc = i;
000050  4627              MOV      r7,r4
                  |L3.82|
;;;282    
;;;283    				if( displayStr[i] == 0x2e && *strx == 0x2e )
000052  482e              LDR      r0,|L3.268|
000054  5d00              LDRB     r0,[r0,r4]
000056  282e              CMP      r0,#0x2e
000058  d103              BNE      |L3.98|
00005a  7830              LDRB     r0,[r6,#0]
00005c  282e              CMP      r0,#0x2e
00005e  d100              BNE      |L3.98|
;;;284    					
;;;285    					goto mmore_point;
000060  e04b              B        |L3.250|
                  |L3.98|
000062  1c64              ADDS     r4,r4,#1              ;277
                  |L3.100|
000064  4829              LDR      r0,|L3.268|
000066  f7fffffe          BL       strlen
00006a  42a0              CMP      r0,r4                 ;277
00006c  d8ec              BHI      |L3.72|
;;;286    			}
;;;287    			if( dot_loc == 1024 ){
00006e  f5b76f80          CMP      r7,#0x400
000072  d109              BNE      |L3.136|
;;;288    				
;;;289    				if( strlen(displayStr) < 4 )
000074  4825              LDR      r0,|L3.268|
000076  f7fffffe          BL       strlen
00007a  2804              CMP      r0,#4
00007c  d20d              BCS      |L3.154|
;;;290    					
;;;291    					strcat( displayStr, strx);
00007e  4631              MOV      r1,r6
000080  4822              LDR      r0,|L3.268|
000082  f7fffffe          BL       strcat
000086  e008              B        |L3.154|
                  |L3.136|
;;;292    			}
;;;293    			else
;;;294    			{
;;;295    				if( strlen(displayStr) < 6 )
000088  4820              LDR      r0,|L3.268|
00008a  f7fffffe          BL       strlen
00008e  2806              CMP      r0,#6
000090  d203              BCS      |L3.154|
;;;296    					
;;;297    					strcat( displayStr, strx);
000092  4631              MOV      r1,r6
000094  481d              LDR      r0,|L3.268|
000096  f7fffffe          BL       strcat
                  |L3.154|
;;;298    			}
;;;299    		}	
;;;300    		if(  SGhListM[*(key_loc+1)].focusType == 1 &&( SGhListM[*(key_loc+1)].t_Type == T_THref || SGhListM[*(key_loc+1)].t_Type == T_TLISTBOX ))
00009a  6868              LDR      r0,[r5,#4]
00009c  eb0000c0          ADD      r0,r0,r0,LSL #3
0000a0  4919              LDR      r1,|L3.264|
0000a2  eb0100c0          ADD      r0,r1,r0,LSL #3
0000a6  6840              LDR      r0,[r0,#4]
0000a8  2801              CMP      r0,#1
0000aa  d125              BNE      |L3.248|
0000ac  6868              LDR      r0,[r5,#4]
0000ae  eb0000c0          ADD      r0,r0,r0,LSL #3
0000b2  eb0100c0          ADD      r0,r1,r0,LSL #3
0000b6  6880              LDR      r0,[r0,#8]
0000b8  2801              CMP      r0,#1
0000ba  d007              BEQ      |L3.204|
0000bc  6868              LDR      r0,[r5,#4]
0000be  eb0000c0          ADD      r0,r0,r0,LSL #3
0000c2  eb0100c0          ADD      r0,r1,r0,LSL #3
0000c6  6880              LDR      r0,[r0,#8]
0000c8  2803              CMP      r0,#3
0000ca  d115              BNE      |L3.248|
                  |L3.204|
;;;301    		{				
;;;302    			strcpy( SGhListM[*(key_loc+1)].f_SName, displayStr );	
0000cc  6869              LDR      r1,[r5,#4]
0000ce  eb0101c1          ADD      r1,r1,r1,LSL #3
0000d2  4a0d              LDR      r2,|L3.264|
0000d4  eb0201c1          ADD      r1,r2,r1,LSL #3
0000d8  f101000c          ADD      r0,r1,#0xc
0000dc  490b              LDR      r1,|L3.268|
0000de  f7fffffe          BL       strcpy
;;;303    					 
;;;304    			strcpy( SGhListM[*(key_loc+1)].f_EName, displayStr );
0000e2  6869              LDR      r1,[r5,#4]
0000e4  eb0101c1          ADD      r1,r1,r1,LSL #3
0000e8  4a07              LDR      r2,|L3.264|
0000ea  eb0201c1          ADD      r1,r2,r1,LSL #3
0000ee  f1010020          ADD      r0,r1,#0x20
0000f2  4906              LDR      r1,|L3.268|
0000f4  f7fffffe          BL       strcpy
                  |L3.248|
;;;305    		}			
;;;306    	}
;;;307    	mmore_point:
0000f8  bf00              NOP      
                  |L3.250|
;;;308    	
;;;309    		WM_InvalidateWindow(hWinWind);
0000fa  4806              LDR      r0,|L3.276|
0000fc  6800              LDR      r0,[r0,#0]  ; hWinWind
0000fe  f7fffffe          BL       WM_InvalidateWindow
;;;310    	
;;;311    }
000102  e8bd81f0          POP      {r4-r8,pc}
;;;312    
                          ENDP

000106  0000              DCW      0x0000
                  |L3.264|
                          DCD      SGhListM
                  |L3.268|
                          DCD      displayStr
                  |L3.272|
000110  302e00            DCB      "0.",0
000113  00                DCB      0
                  |L3.276|
                          DCD      hWinWind

                          AREA ||i.Power_delete_input||, CODE, READONLY, ALIGN=2

                  Power_delete_input PROC
;;;394    
;;;395    void Power_delete_input(){
000000  b570              PUSH     {r4-r6,lr}
;;;396    	
;;;397    	int dlen = 0;
000002  2500              MOVS     r5,#0
;;;398    	
;;;399    	int *key_loc;
;;;400    	
;;;401    	if( FLAG_INPUTAUTH  ){	
000004  4827              LDR      r0,|L4.164|
000006  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000008  2800              CMP      r0,#0
00000a  d04a              BEQ      |L4.162|
;;;402    	
;;;403    		dlen = sizeof( SGhListM ) / sizeof( SGhListM[0] );
00000c  250f              MOVS     r5,#0xf
;;;404    		
;;;405    		key_loc = get_id_index( SGhListM, dlen);
00000e  4629              MOV      r1,r5
000010  4825              LDR      r0,|L4.168|
000012  f7fffffe          BL       get_id_index
000016  4604              MOV      r4,r0
;;;406    		
;;;407    		if( *key_loc == 0x194 )
000018  6820              LDR      r0,[r4,#0]
00001a  f5b07fca          CMP      r0,#0x194
00001e  d104              BNE      |L4.42|
;;;408    			
;;;409    		   SGhListM[10].focusType = 1;
000020  2101              MOVS     r1,#1
000022  4821              LDR      r0,|L4.168|
000024  f8c012d4          STR      r1,[r0,#0x2d4]
000028  e03b              B        |L4.162|
                  |L4.42|
;;;410    			
;;;411    		else
;;;412    		{	
;;;413    			strcpy( displayStr , SGhListM[*(key_loc+1)].f_EName );
00002a  6860              LDR      r0,[r4,#4]
00002c  eb0000c0          ADD      r0,r0,r0,LSL #3
000030  4a1d              LDR      r2,|L4.168|
000032  eb0200c0          ADD      r0,r2,r0,LSL #3
000036  f1000120          ADD      r1,r0,#0x20
00003a  481c              LDR      r0,|L4.172|
00003c  f7fffffe          BL       strcpy
;;;414    			
;;;415    			if( SGhListM[*(key_loc+1)].t_Type == T_THref && ( strlen( displayStr) != 0 || displayStr[0] != '\0' ) ){
000040  6860              LDR      r0,[r4,#4]
000042  eb0000c0          ADD      r0,r0,r0,LSL #3
000046  4918              LDR      r1,|L4.168|
000048  eb0100c0          ADD      r0,r1,r0,LSL #3
00004c  6880              LDR      r0,[r0,#8]
00004e  2801              CMP      r0,#1
000050  d127              BNE      |L4.162|
000052  4816              LDR      r0,|L4.172|
000054  f7fffffe          BL       strlen
000058  b910              CBNZ     r0,|L4.96|
00005a  4814              LDR      r0,|L4.172|
00005c  7800              LDRB     r0,[r0,#0]  ; displayStr
00005e  b300              CBZ      r0,|L4.162|
                  |L4.96|
;;;416    				
;;;417    				displayStr[ strlen( displayStr) - 1 ] = '\0'; 
000060  4812              LDR      r0,|L4.172|
000062  f7fffffe          BL       strlen
000066  1e40              SUBS     r0,r0,#1
000068  4910              LDR      r1,|L4.172|
00006a  2200              MOVS     r2,#0
00006c  540a              STRB     r2,[r1,r0]
;;;418    					
;;;419    				strcpy( SGhListM[*(key_loc+1)].f_SName, displayStr );	
00006e  6861              LDR      r1,[r4,#4]
000070  eb0101c1          ADD      r1,r1,r1,LSL #3
000074  4a0c              LDR      r2,|L4.168|
000076  eb0201c1          ADD      r1,r2,r1,LSL #3
00007a  f101000c          ADD      r0,r1,#0xc
00007e  490b              LDR      r1,|L4.172|
000080  f7fffffe          BL       strcpy
;;;420    					
;;;421    				strcpy( SGhListM[*(key_loc+1)].f_EName, displayStr );	
000084  6861              LDR      r1,[r4,#4]
000086  eb0101c1          ADD      r1,r1,r1,LSL #3
00008a  4a07              LDR      r2,|L4.168|
00008c  eb0201c1          ADD      r1,r2,r1,LSL #3
000090  f1010020          ADD      r0,r1,#0x20
000094  4905              LDR      r1,|L4.172|
000096  f7fffffe          BL       strcpy
;;;422    					
;;;423    				WM_InvalidateWindow(hWinWind);
00009a  4805              LDR      r0,|L4.176|
00009c  6800              LDR      r0,[r0,#0]  ; hWinWind
00009e  f7fffffe          BL       WM_InvalidateWindow
                  |L4.162|
;;;424    			}
;;;425    		}
;;;426    	}
;;;427    	
;;;428    	
;;;429    }
0000a2  bd70              POP      {r4-r6,pc}
;;;430    
                          ENDP

                  |L4.164|
                          DCD      FLAG_INPUTAUTH
                  |L4.168|
                          DCD      SGhListM
                  |L4.172|
                          DCD      displayStr
                  |L4.176|
                          DCD      hWinWind

                          AREA ||i.Power_ent||, CODE, READONLY, ALIGN=2

                  Power_ent PROC
;;;354    
;;;355    void Power_ent(){
000000  b570              PUSH     {r4-r6,lr}
;;;356    	
;;;357    	int dlen, flen;
;;;358    	
;;;359    	int *key_loc;
;;;360    	
;;;361    	if( FLAG_INPUTAUTH ){
000002  481f              LDR      r0,|L5.128|
000004  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000006  b128              CBZ      r0,|L5.20|
;;;362    		
;;;363    		FLAG_INPUTAUTH = 0;
000008  2000              MOVS     r0,#0
00000a  491d              LDR      r1,|L5.128|
00000c  7008              STRB     r0,[r1,#0]
;;;364    		
;;;365    		Power_value_correct();
00000e  f7fffffe          BL       Power_value_correct
000012  e034              B        |L5.126|
                  |L5.20|
;;;366    		
;;;367    	}else{
;;;368    		
;;;369    		FLAG_INPUTAUTH = 1;
000014  2001              MOVS     r0,#1
000016  491a              LDR      r1,|L5.128|
000018  7008              STRB     r0,[r1,#0]
;;;370    		
;;;371    		dlen = sizeof(SGhListM) / sizeof( SGhListM[0] );
00001a  250f              MOVS     r5,#0xf
;;;372    		
;;;373    		key_loc = get_id_index( SGhListM, dlen);
00001c  4629              MOV      r1,r5
00001e  4819              LDR      r0,|L5.132|
000020  f7fffffe          BL       get_id_index
000024  4604              MOV      r4,r0
;;;374    		
;;;375    		if( *key_loc == 0x194 )
000026  6820              LDR      r0,[r4,#0]
000028  f5b07fca          CMP      r0,#0x194
00002c  d104              BNE      |L5.56|
;;;376    			
;;;377    		   SGhListM[10].focusType = 1;
00002e  2101              MOVS     r1,#1
000030  4814              LDR      r0,|L5.132|
000032  f8c012d4          STR      r1,[r0,#0x2d4]
000036  e022              B        |L5.126|
                  |L5.56|
;;;378    			
;;;379    		else
;;;380    		{
;;;381    			memset( displayStr, '\0', sizeof( displayStr));
000038  2114              MOVS     r1,#0x14
00003a  4813              LDR      r0,|L5.136|
00003c  f7fffffe          BL       __aeabi_memclr
;;;382    			
;;;383    			SGhListM[*(key_loc+1)].d_BKColor = 0x00F0FFFF;
000040  4812              LDR      r0,|L5.140|
000042  6861              LDR      r1,[r4,#4]
000044  eb0101c1          ADD      r1,r1,r1,LSL #3
000048  4a0e              LDR      r2,|L5.132|
00004a  eb0201c1          ADD      r1,r2,r1,LSL #3
00004e  6388              STR      r0,[r1,#0x38]
;;;384    			
;;;385    			strcpy( SGhListM[*(key_loc+1)].f_SName, "");
000050  6860              LDR      r0,[r4,#4]
000052  eb0000c0          ADD      r0,r0,r0,LSL #3
000056  4611              MOV      r1,r2
000058  eb0100c0          ADD      r0,r1,r0,LSL #3
00005c  a10c              ADR      r1,|L5.144|
00005e  7809              LDRB     r1,[r1,#0]
000060  7301              STRB     r1,[r0,#0xc]
;;;386    			
;;;387    			strcpy( SGhListM[*(key_loc+1)].f_EName, "");
000062  6860              LDR      r0,[r4,#4]
000064  eb0000c0          ADD      r0,r0,r0,LSL #3
000068  4611              MOV      r1,r2
00006a  eb0100c0          ADD      r0,r1,r0,LSL #3
00006e  a108              ADR      r1,|L5.144|
000070  7809              LDRB     r1,[r1,#0]
000072  f8801020          STRB     r1,[r0,#0x20]
;;;388    			
;;;389    			WM_InvalidateWindow(hWinWind);
000076  4807              LDR      r0,|L5.148|
000078  6800              LDR      r0,[r0,#0]  ; hWinWind
00007a  f7fffffe          BL       WM_InvalidateWindow
                  |L5.126|
;;;390    		}
;;;391    	}
;;;392    	
;;;393    }
00007e  bd70              POP      {r4-r6,pc}
;;;394    
                          ENDP

                  |L5.128|
                          DCD      FLAG_INPUTAUTH
                  |L5.132|
                          DCD      SGhListM
                  |L5.136|
                          DCD      displayStr
                  |L5.140|
                          DCD      0x00f0ffff
                  |L5.144|
000090  00                DCB      0
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
                  |L5.148|
                          DCD      hWinWind

                          AREA ||i.Power_value_correct||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  Power_value_correct PROC
;;;430    
;;;431    void Power_value_correct(){
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  ed2d8b04          VPUSH    {d8-d9}
000008  b08b              SUB      sp,sp,#0x2c
;;;432    	
;;;433    	int dlen = 0, flen = 0, i = 0, NUM = 0, flag_null = 0; //是否为最小值
00000a  f04f0b00          MOV      r11,#0
00000e  2000              MOVS     r0,#0
000010  900a              STR      r0,[sp,#0x28]
000012  2400              MOVS     r4,#0
000014  4681              MOV      r9,r0
000016  4682              MOV      r10,r0
;;;434    	
;;;435    	int *key_loc;
;;;436    	
;;;437    	int temp; 
;;;438    	
;;;439    	int dot_loc = 1024;  //是否具有小数点  1024---无   其余---小数点位置
000018  f44f6880          MOV      r8,#0x400
;;;440    	
;;;441    	char temp_char[10];
;;;442    	
;;;443    	int temp_int;
;;;444    	
;;;445    	float temp_float;
;;;446    	
;;;447    	char int_char[10], float_char[10];
;;;448    	
;;;449    	vu8 flag_dot = 0;
00001c  9000              STR      r0,[sp,#0]
;;;450    	
;;;451    	if( !FLAG_INPUTAUTH ){
00001e  48fe              LDR      r0,|L6.1048|
000020  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000022  2800              CMP      r0,#0
000024  d10e              BNE      |L6.68|
;;;452    		
;;;453    		dlen = sizeof( SGhListM ) / sizeof( SGhListM[0] );
000026  f04f0b0f          MOV      r11,#0xf
;;;454    		
;;;455    		key_loc = get_id_index( SGhListM, dlen);
00002a  4659              MOV      r1,r11
00002c  48fb              LDR      r0,|L6.1052|
00002e  f7fffffe          BL       get_id_index
000032  4607              MOV      r7,r0
;;;456    		
;;;457    		if( *key_loc == 0x194 )
000034  6838              LDR      r0,[r7,#0]
000036  f5b07fca          CMP      r0,#0x194
00003a  d104              BNE      |L6.70|
;;;458    			
;;;459    		   SGhListM[10].focusType = 1;
00003c  2101              MOVS     r1,#1
00003e  48f7              LDR      r0,|L6.1052|
000040  f8c012d4          STR      r1,[r0,#0x2d4]
                  |L6.68|
000044  e21c              B        |L6.1152|
                  |L6.70|
;;;460    			
;;;461    		else
;;;462    		{
;;;463    			temp = *(key_loc+1);
000046  687e              LDR      r6,[r7,#4]
;;;464    			
;;;465    			strcpy( displayStr , SGhListM[temp].f_EName );
000048  eb0600c6          ADD      r0,r6,r6,LSL #3
00004c  4af3              LDR      r2,|L6.1052|
00004e  eb0200c0          ADD      r0,r2,r0,LSL #3
000052  f1000120          ADD      r1,r0,#0x20
000056  48f2              LDR      r0,|L6.1056|
000058  f7fffffe          BL       strcpy
;;;466    			
;;;467    			if( (displayStr[0] == '\0' || strlen(displayStr) == 0) && SGhListM[temp].t_Type == T_THref ){
00005c  48f0              LDR      r0,|L6.1056|
00005e  7800              LDRB     r0,[r0,#0]  ; displayStr
000060  b118              CBZ      r0,|L6.106|
000062  48ef              LDR      r0,|L6.1056|
000064  f7fffffe          BL       strlen
000068  b940              CBNZ     r0,|L6.124|
                  |L6.106|
00006a  eb0600c6          ADD      r0,r6,r6,LSL #3
00006e  49eb              LDR      r1,|L6.1052|
000070  eb0100c0          ADD      r0,r1,r0,LSL #3
000074  6880              LDR      r0,[r0,#8]
000076  2801              CMP      r0,#1
000078  d100              BNE      |L6.124|
;;;468    				
;;;469    				flag_null = 1;
00007a  4682              MOV      r10,r0
                  |L6.124|
;;;470    			}	
;;;471    			for( i = 0; i < strlen(displayStr); i++  ){ 
00007c  2400              MOVS     r4,#0
00007e  e005              B        |L6.140|
                  |L6.128|
;;;472    			
;;;473    				if( displayStr[i] == 0x2e ){		
000080  48e7              LDR      r0,|L6.1056|
000082  5d00              LDRB     r0,[r0,r4]
000084  282e              CMP      r0,#0x2e
000086  d100              BNE      |L6.138|
;;;474    				
;;;475    					dot_loc = i;			//记录小数点位置
000088  46a0              MOV      r8,r4
                  |L6.138|
00008a  1c64              ADDS     r4,r4,#1              ;471
                  |L6.140|
00008c  48e4              LDR      r0,|L6.1056|
00008e  f7fffffe          BL       strlen
000092  42a0              CMP      r0,r4                 ;471
000094  d8f4              BHI      |L6.128|
;;;476    				}			
;;;477    			}
;;;478    			
;;;479    			temp_int = atoi(displayStr);   //转为整数
000096  48e2              LDR      r0,|L6.1056|
000098  f7fffffe          BL       atoi
00009c  4605              MOV      r5,r0
;;;480    			
;;;481    			temp_float = atof(displayStr);  //转为浮点数
00009e  48e0              LDR      r0,|L6.1056|
0000a0  f7fffffe          BL       __hardfp_atof
0000a4  eeb09a40          VMOV.F32 s18,s0
0000a8  eef09a60          VMOV.F32 s19,s1
0000ac  ec510b19          VMOV     r0,r1,d9
0000b0  f7fffffe          BL       __aeabi_d2f
0000b4  ee080a10          VMOV     s16,r0
;;;482    			
;;;483    			memset( temp_char, '\0', sizeof(temp_char));
0000b8  2000              MOVS     r0,#0
0000ba  9007              STR      r0,[sp,#0x1c]
0000bc  9008              STR      r0,[sp,#0x20]
0000be  9009              STR      r0,[sp,#0x24]
;;;484    			
;;;485    			memset( int_char, '\0', sizeof(int_char));
0000c0  9004              STR      r0,[sp,#0x10]
0000c2  9005              STR      r0,[sp,#0x14]
0000c4  9006              STR      r0,[sp,#0x18]
;;;486    			
;;;487    			memset( float_char, '\0', sizeof(float_char));
0000c6  9001              STR      r0,[sp,#4]
0000c8  9002              STR      r0,[sp,#8]
0000ca  9003              STR      r0,[sp,#0xc]
;;;488    			
;;;489    			sprintf(int_char, "%d", temp_int);
0000cc  462a              MOV      r2,r5
0000ce  a1d5              ADR      r1,|L6.1060|
0000d0  a804              ADD      r0,sp,#0x10
0000d2  f7fffffe          BL       __2sprintf
;;;490    			
;;;491    			sprintf(float_char, "%f", temp_float);
0000d6  ee180a10          VMOV     r0,s16
0000da  f7fffffe          BL       __aeabi_f2d
0000de  ec410b19          VMOV     d9,r0,r1
0000e2  ec532b19          VMOV     r2,r3,d9
0000e6  a1d0              ADR      r1,|L6.1064|
0000e8  a801              ADD      r0,sp,#4
0000ea  f7fffffe          BL       __2sprintf
;;;492    			
;;;493    			for( i = 0; i < strlen(displayStr); i++  ){  
0000ee  2400              MOVS     r4,#0
0000f0  e007              B        |L6.258|
                  |L6.242|
;;;494    			
;;;495    				if( displayStr[i] == 0x2e ){	
0000f2  48cb              LDR      r0,|L6.1056|
0000f4  5d00              LDRB     r0,[r0,r4]
0000f6  282e              CMP      r0,#0x2e
0000f8  d102              BNE      |L6.256|
;;;496    				
;;;497    					flag_dot = 1;	
0000fa  2001              MOVS     r0,#1
0000fc  9000              STR      r0,[sp,#0]
;;;498    					
;;;499    					break;
0000fe  e005              B        |L6.268|
                  |L6.256|
000100  1c64              ADDS     r4,r4,#1              ;493
                  |L6.258|
000102  48c7              LDR      r0,|L6.1056|
000104  f7fffffe          BL       strlen
000108  42a0              CMP      r0,r4                 ;493
00010a  d8f2              BHI      |L6.242|
                  |L6.268|
00010c  bf00              NOP      
;;;500    				}			
;;;501    			}
;;;502    			
;;;503    			for( i = 0; i < strlen(float_char); i++  ){  
00010e  2400              MOVS     r4,#0
000110  e006              B        |L6.288|
                  |L6.274|
;;;504    			
;;;505    				if( float_char[i] == 0x2e ){
000112  a801              ADD      r0,sp,#4
000114  5d00              LDRB     r0,[r0,r4]
000116  282e              CMP      r0,#0x2e
000118  d101              BNE      |L6.286|
;;;506    					
;;;507    					dot_loc = i;
00011a  46a0              MOV      r8,r4
;;;508    					
;;;509    					break;
00011c  e005              B        |L6.298|
                  |L6.286|
00011e  1c64              ADDS     r4,r4,#1              ;503
                  |L6.288|
000120  a801              ADD      r0,sp,#4              ;503
000122  f7fffffe          BL       strlen
000126  42a0              CMP      r0,r4                 ;503
000128  d8f3              BHI      |L6.274|
                  |L6.298|
00012a  bf00              NOP      
;;;510    				}			
;;;511    			}
;;;512    			
;;;513    			switch( SGhListM[temp].d_ID ){
00012c  eb0600c6          ADD      r0,r6,r6,LSL #3
000130  49ba              LDR      r1,|L6.1052|
000132  f8510030          LDR      r0,[r1,r0,LSL #3]
000136  280a              CMP      r0,#0xa
000138  d002              BEQ      |L6.320|
00013a  280d              CMP      r0,#0xd
00013c  d122              BNE      |L6.388|
00013e  e0b0              B        |L6.674|
                  |L6.320|
;;;514    				
;;;515    				case 10:   
;;;516    				//====================================输出电压======================================
;;;517    					if( flag_null ){  
000140  f1ba0f00          CMP      r10,#0
000144  d00c              BEQ      |L6.352|
;;;518    					
;;;519    						strcpy( displayStr, "0.000"  );
000146  a1b9              ADR      r1,|L6.1068|
000148  48b5              LDR      r0,|L6.1056|
00014a  f7fffffe          BL       strcpy
;;;520    						
;;;521    						CLists.POWER_OutPut_V = 0 * 1000;
00014e  2000              MOVS     r0,#0
000150  49b8              LDR      r1,|L6.1076|
000152  f8a100de          STRH     r0,[r1,#0xde]
;;;522    						
;;;523    						CLists.CSET_Voltage = CLists.POWER_OutPut_V;
000156  4608              MOV      r0,r1
000158  f8b000de          LDRH     r0,[r0,#0xde]  ; CLists
00015c  6088              STR      r0,[r1,#8]  ; CLists
00015e  e09f              B        |L6.672|
                  |L6.352|
;;;524    						
;;;525    					}else{	
;;;526    					
;;;527    						if( !flag_dot ){      	
000160  f89d0000          LDRB     r0,[sp,#0]
000164  bbe8              CBNZ     r0,|L6.482|
;;;528    							
;;;529    							if( temp_int > 30  ){  
000166  2d1e              CMP      r5,#0x1e
000168  dd0d              BLE      |L6.390|
;;;530    							
;;;531    								strcpy( displayStr, "30.000"  );
00016a  a1b3              ADR      r1,|L6.1080|
00016c  48ac              LDR      r0,|L6.1056|
00016e  f7fffffe          BL       strcpy
;;;532    								
;;;533    								CLists.POWER_OutPut_V = 30 * 1000;
000172  f2475030          MOV      r0,#0x7530
000176  49af              LDR      r1,|L6.1076|
000178  f8a100de          STRH     r0,[r1,#0xde]
;;;534    								
;;;535    								CLists.CSET_Voltage = CLists.POWER_OutPut_V;
00017c  4608              MOV      r0,r1
00017e  f8b000de          LDRH     r0,[r0,#0xde]  ; CLists
000182  6088              STR      r0,[r1,#8]  ; CLists
                  |L6.388|
;;;536    								
;;;537    								break;
000184  e13e              B        |L6.1028|
                  |L6.390|
;;;538    							}
;;;539    							if( temp_int <= 0 ){    
000186  2d00              CMP      r5,#0
000188  dc0c              BGT      |L6.420|
;;;540    							
;;;541    								strcpy( displayStr, "0.000"  );
00018a  a1a8              ADR      r1,|L6.1068|
00018c  48a4              LDR      r0,|L6.1056|
00018e  f7fffffe          BL       strcpy
;;;542    								
;;;543    								CLists.POWER_OutPut_V = 0 * 1000;
000192  2000              MOVS     r0,#0
000194  49a7              LDR      r1,|L6.1076|
000196  f8a100de          STRH     r0,[r1,#0xde]
;;;544    								
;;;545    								CLists.CSET_Voltage = CLists.POWER_OutPut_V;
00019a  4608              MOV      r0,r1
00019c  f8b000de          LDRH     r0,[r0,#0xde]  ; CLists
0001a0  6088              STR      r0,[r1,#8]  ; CLists
;;;546    								
;;;547    								break;
0001a2  e12f              B        |L6.1028|
                  |L6.420|
;;;548    							}	
;;;549    							
;;;550    							if( strlen(int_char) > 2){
0001a4  a804              ADD      r0,sp,#0x10
0001a6  f7fffffe          BL       strlen
0001aa  2802              CMP      r0,#2
0001ac  d904              BLS      |L6.440|
;;;551    								
;;;552    								strcat( int_char, ".0");
0001ae  a1a4              ADR      r1,|L6.1088|
0001b0  a804              ADD      r0,sp,#0x10
0001b2  f7fffffe          BL       strcat
0001b6  e003              B        |L6.448|
                  |L6.440|
;;;553    								
;;;554    							}else{
;;;555    								
;;;556    								strcat( int_char, ".000");
0001b8  a1a2              ADR      r1,|L6.1092|
0001ba  a804              ADD      r0,sp,#0x10
0001bc  f7fffffe          BL       strcat
                  |L6.448|
;;;557    							}	
;;;558    							
;;;559    							strcpy( displayStr, int_char );
0001c0  a904              ADD      r1,sp,#0x10
0001c2  4897              LDR      r0,|L6.1056|
0001c4  f7fffffe          BL       strcpy
;;;560    							
;;;561    							CLists.POWER_OutPut_V = temp_int * 1000;
0001c8  eb050045          ADD      r0,r5,r5,LSL #1
0001cc  ebc010c5          RSB      r0,r0,r5,LSL #7
0001d0  f64f71ff          MOV      r1,#0xffff
0001d4  ea0100c0          AND      r0,r1,r0,LSL #3
0001d8  4996              LDR      r1,|L6.1076|
0001da  f8a100de          STRH     r0,[r1,#0xde]
;;;562    							
;;;563    							CLists.CSET_Voltage = CLists.POWER_OutPut_V;
0001de  4608              MOV      r0,r1
0001e0  e000              B        |L6.484|
                  |L6.482|
0001e2  e003              B        |L6.492|
                  |L6.484|
0001e4  f8b000de          LDRH     r0,[r0,#0xde]  ; CLists
0001e8  6088              STR      r0,[r1,#8]  ; CLists
0001ea  e059              B        |L6.672|
                  |L6.492|
;;;564    							
;;;565    						}else{
;;;566    
;;;567    							if( temp_float - 30 > 0 ){   //最大值
0001ec  eeb30a0e          VMOV.F32 s0,#30.00000000
0001f0  ee380a40          VSUB.F32 s0,s16,s0
0001f4  eeb50ac0          VCMPE.F32 s0,#0.0
0001f8  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001fc  dd0d              BLE      |L6.538|
;;;568    							
;;;569    								strcpy( displayStr, "30.000"  );
0001fe  a18e              ADR      r1,|L6.1080|
000200  4887              LDR      r0,|L6.1056|
000202  f7fffffe          BL       strcpy
;;;570    								
;;;571    								CLists.POWER_OutPut_V = 30 * 1000;
000206  f2475030          MOV      r0,#0x7530
00020a  498a              LDR      r1,|L6.1076|
00020c  f8a100de          STRH     r0,[r1,#0xde]
;;;572    								
;;;573    								CLists.CSET_Voltage = CLists.POWER_OutPut_V;
000210  4608              MOV      r0,r1
000212  f8b000de          LDRH     r0,[r0,#0xde]  ; CLists
000216  6088              STR      r0,[r1,#8]  ; CLists
;;;574    								
;;;575    								break;
000218  e0f4              B        |L6.1028|
                  |L6.538|
;;;576    							}
;;;577    							
;;;578    							if( temp_float <= 0 ){    //最小值
00021a  eeb58ac0          VCMPE.F32 s16,#0.0
00021e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000222  d80c              BHI      |L6.574|
;;;579    							
;;;580    								strcpy( displayStr, "0.000"  );
000224  a181              ADR      r1,|L6.1068|
000226  487e              LDR      r0,|L6.1056|
000228  f7fffffe          BL       strcpy
;;;581    								
;;;582    								CLists.POWER_OutPut_V = 0 * 1000;
00022c  2000              MOVS     r0,#0
00022e  4981              LDR      r1,|L6.1076|
000230  f8a100de          STRH     r0,[r1,#0xde]
;;;583    								
;;;584    								CLists.CSET_Voltage = CLists.POWER_OutPut_V;
000234  4608              MOV      r0,r1
000236  f8b000de          LDRH     r0,[r0,#0xde]  ; CLists
00023a  6088              STR      r0,[r1,#8]  ; CLists
;;;585    								
;;;586    								break;
00023c  e0e2              B        |L6.1028|
                  |L6.574|
;;;587    							}	
;;;588    							NUM = strlen(float_char) - dot_loc - 1;
00023e  a801              ADD      r0,sp,#4
000240  f7fffffe          BL       strlen
000244  eba00008          SUB      r0,r0,r8
000248  f1a00901          SUB      r9,r0,#1
;;;589    							
;;;590    							for( i = 0; i < 3 - NUM; i++ ){		strcat( float_char, "0");	}
00024c  2400              MOVS     r4,#0
00024e  e004              B        |L6.602|
                  |L6.592|
000250  a177              ADR      r1,|L6.1072|
000252  a801              ADD      r0,sp,#4
000254  f7fffffe          BL       strcat
000258  1c64              ADDS     r4,r4,#1
                  |L6.602|
00025a  f1c90003          RSB      r0,r9,#3
00025e  42a0              CMP      r0,r4
000260  dcf6              BGT      |L6.592|
;;;591    							
;;;592    							NUM = ( dot_loc > 1 ) ? 6 : 5;
000262  f1b80f01          CMP      r8,#1
000266  dd01              BLE      |L6.620|
000268  2006              MOVS     r0,#6
00026a  e000              B        |L6.622|
                  |L6.620|
00026c  2005              MOVS     r0,#5
                  |L6.622|
00026e  4681              MOV      r9,r0
;;;593    							
;;;594    							strncpy( int_char, float_char, NUM );
000270  464a              MOV      r2,r9
000272  a901              ADD      r1,sp,#4
000274  a804              ADD      r0,sp,#0x10
000276  f7fffffe          BL       strncpy
;;;595    							
;;;596    							strcpy( displayStr, int_char );	
00027a  a904              ADD      r1,sp,#0x10
00027c  4868              LDR      r0,|L6.1056|
00027e  f7fffffe          BL       strcpy
;;;597    							
;;;598    							CLists.POWER_OutPut_V = temp_float * 1000;	
000282  ed9f0a72          VLDR     s0,|L6.1100|
000286  ee280a00          VMUL.F32 s0,s16,s0
00028a  eebc0ac0          VCVT.U32.F32 s0,s0
00028e  ee100a10          VMOV     r0,s0
000292  4968              LDR      r1,|L6.1076|
000294  f8a100de          STRH     r0,[r1,#0xde]
;;;599    
;;;600    							CLists.CSET_Voltage = CLists.POWER_OutPut_V;				
000298  4608              MOV      r0,r1
00029a  f8b000de          LDRH     r0,[r0,#0xde]  ; CLists
00029e  6088              STR      r0,[r1,#8]  ; CLists
                  |L6.672|
;;;601    						}
;;;602    					}
;;;603    				
;;;604    				break;
0002a0  e0b0              B        |L6.1028|
                  |L6.674|
;;;605    				
;;;606    				case 13:
;;;607    				//====================================限制电流======================================
;;;608    					if( flag_null ){ 
0002a2  f1ba0f00          CMP      r10,#0
0002a6  d00c              BEQ      |L6.706|
;;;609    					
;;;610    						strcpy( displayStr, "0.000"  );
0002a8  a160              ADR      r1,|L6.1068|
0002aa  485d              LDR      r0,|L6.1056|
0002ac  f7fffffe          BL       strcpy
;;;611    						
;;;612    						CLists.POWER_Limit_C = 0 * 1000;
0002b0  2000              MOVS     r0,#0
0002b2  4960              LDR      r1,|L6.1076|
0002b4  f8a100e0          STRH     r0,[r1,#0xe0]
;;;613    		 
;;;614    						CLists.CSET_Current = CLists.POWER_Limit_C;
0002b8  4608              MOV      r0,r1
0002ba  f8b000e0          LDRH     r0,[r0,#0xe0]  ; CLists
0002be  60c8              STR      r0,[r1,#0xc]  ; CLists
0002c0  e09f              B        |L6.1026|
                  |L6.706|
;;;615    						
;;;616    					}else{	
;;;617    					
;;;618    						if( !flag_dot ){      	
0002c2  f89d0000          LDRB     r0,[sp,#0]
0002c6  bbe8              CBNZ     r0,|L6.836|
;;;619    							
;;;620    							if( temp_int > 10  ){   //最大值
0002c8  2d0a              CMP      r5,#0xa
0002ca  dd0d              BLE      |L6.744|
;;;621    							
;;;622    								strcpy( displayStr, "10.000"  );
0002cc  a160              ADR      r1,|L6.1104|
0002ce  4854              LDR      r0,|L6.1056|
0002d0  f7fffffe          BL       strcpy
;;;623    								
;;;624    								CLists.POWER_Limit_C = 10 * 1000;
0002d4  f2427010          MOV      r0,#0x2710
0002d8  4956              LDR      r1,|L6.1076|
0002da  f8a100e0          STRH     r0,[r1,#0xe0]
;;;625    								
;;;626    								CLists.CSET_Current = CLists.POWER_Limit_C;
0002de  4608              MOV      r0,r1
0002e0  f8b000e0          LDRH     r0,[r0,#0xe0]  ; CLists
0002e4  60c8              STR      r0,[r1,#0xc]  ; CLists
;;;627    								
;;;628    								break;
0002e6  e08d              B        |L6.1028|
                  |L6.744|
;;;629    							}
;;;630    							if( temp_int <= 0 ){    //最小值
0002e8  2d00              CMP      r5,#0
0002ea  dc0c              BGT      |L6.774|
;;;631    							
;;;632    								strcpy( displayStr, "0.000"  );
0002ec  a14f              ADR      r1,|L6.1068|
0002ee  484c              LDR      r0,|L6.1056|
0002f0  f7fffffe          BL       strcpy
;;;633    								
;;;634    								CLists.POWER_Limit_C = 0 * 1000;
0002f4  2000              MOVS     r0,#0
0002f6  494f              LDR      r1,|L6.1076|
0002f8  f8a100e0          STRH     r0,[r1,#0xe0]
;;;635    								
;;;636    								CLists.CSET_Current = CLists.POWER_Limit_C;
0002fc  4608              MOV      r0,r1
0002fe  f8b000e0          LDRH     r0,[r0,#0xe0]  ; CLists
000302  60c8              STR      r0,[r1,#0xc]  ; CLists
;;;637    								
;;;638    								break;
000304  e07e              B        |L6.1028|
                  |L6.774|
;;;639    							}								
;;;640    							if( strlen(int_char) > 2){
000306  a804              ADD      r0,sp,#0x10
000308  f7fffffe          BL       strlen
00030c  2802              CMP      r0,#2
00030e  d904              BLS      |L6.794|
;;;641    								
;;;642    								strcat( int_char, ".0");
000310  a14b              ADR      r1,|L6.1088|
000312  a804              ADD      r0,sp,#0x10
000314  f7fffffe          BL       strcat
000318  e003              B        |L6.802|
                  |L6.794|
;;;643    								
;;;644    							}else{
;;;645    								
;;;646    								strcat( int_char, ".000");
00031a  a14a              ADR      r1,|L6.1092|
00031c  a804              ADD      r0,sp,#0x10
00031e  f7fffffe          BL       strcat
                  |L6.802|
;;;647    							}
;;;648    							
;;;649    							strcpy( displayStr, int_char );	
000322  a904              ADD      r1,sp,#0x10
000324  483e              LDR      r0,|L6.1056|
000326  f7fffffe          BL       strcpy
;;;650    							
;;;651    							CLists.POWER_Limit_C = temp_int * 1000;
00032a  eb050045          ADD      r0,r5,r5,LSL #1
00032e  ebc010c5          RSB      r0,r0,r5,LSL #7
000332  f64f71ff          MOV      r1,#0xffff
000336  ea0100c0          AND      r0,r1,r0,LSL #3
00033a  493e              LDR      r1,|L6.1076|
00033c  f8a100e0          STRH     r0,[r1,#0xe0]
;;;652    							
;;;653    							CLists.CSET_Current = CLists.POWER_Limit_C;
000340  4608              MOV      r0,r1
000342  e000              B        |L6.838|
                  |L6.836|
000344  e003              B        |L6.846|
                  |L6.838|
000346  f8b000e0          LDRH     r0,[r0,#0xe0]  ; CLists
00034a  60c8              STR      r0,[r1,#0xc]  ; CLists
00034c  e059              B        |L6.1026|
                  |L6.846|
;;;654    							
;;;655    						}else{
;;;656    
;;;657    							if( temp_float - 10 > 0 ){   //最大值
00034e  eeb20a04          VMOV.F32 s0,#10.00000000
000352  ee380a40          VSUB.F32 s0,s16,s0
000356  eeb50ac0          VCMPE.F32 s0,#0.0
00035a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00035e  dd0d              BLE      |L6.892|
;;;658    							
;;;659    								strcpy( displayStr, "10.000"  );
000360  a13b              ADR      r1,|L6.1104|
000362  482f              LDR      r0,|L6.1056|
000364  f7fffffe          BL       strcpy
;;;660    								
;;;661    								CLists.POWER_Limit_C = 10 * 1000;
000368  f2427010          MOV      r0,#0x2710
00036c  4931              LDR      r1,|L6.1076|
00036e  f8a100e0          STRH     r0,[r1,#0xe0]
;;;662    								
;;;663    								CLists.CSET_Current = CLists.POWER_Limit_C;
000372  4608              MOV      r0,r1
000374  f8b000e0          LDRH     r0,[r0,#0xe0]  ; CLists
000378  60c8              STR      r0,[r1,#0xc]  ; CLists
;;;664    								
;;;665    								break;
00037a  e043              B        |L6.1028|
                  |L6.892|
;;;666    							}
;;;667    							
;;;668    							if( temp_float <= 0 ){    //最小值
00037c  eeb58ac0          VCMPE.F32 s16,#0.0
000380  eef1fa10          VMRS     APSR_nzcv,FPSCR
000384  d80c              BHI      |L6.928|
;;;669    							
;;;670    								strcpy( displayStr, "0.000"  );
000386  a129              ADR      r1,|L6.1068|
000388  4825              LDR      r0,|L6.1056|
00038a  f7fffffe          BL       strcpy
;;;671    								
;;;672    								CLists.POWER_Limit_C = 0 * 1000;
00038e  2000              MOVS     r0,#0
000390  4928              LDR      r1,|L6.1076|
000392  f8a100e0          STRH     r0,[r1,#0xe0]
;;;673    								
;;;674    								CLists.CSET_Current = CLists.POWER_Limit_C;
000396  4608              MOV      r0,r1
000398  f8b000e0          LDRH     r0,[r0,#0xe0]  ; CLists
00039c  60c8              STR      r0,[r1,#0xc]  ; CLists
;;;675    									
;;;676    								break;
00039e  e031              B        |L6.1028|
                  |L6.928|
;;;677    							}
;;;678    							
;;;679    							NUM = strlen(float_char) - dot_loc - 1;
0003a0  a801              ADD      r0,sp,#4
0003a2  f7fffffe          BL       strlen
0003a6  eba00008          SUB      r0,r0,r8
0003aa  f1a00901          SUB      r9,r0,#1
;;;680    							
;;;681    							for( i = 0; i < 3 - NUM; i++ ){		strcat( float_char, "0");		}
0003ae  2400              MOVS     r4,#0
0003b0  e004              B        |L6.956|
                  |L6.946|
0003b2  a11f              ADR      r1,|L6.1072|
0003b4  a801              ADD      r0,sp,#4
0003b6  f7fffffe          BL       strcat
0003ba  1c64              ADDS     r4,r4,#1
                  |L6.956|
0003bc  f1c90003          RSB      r0,r9,#3
0003c0  42a0              CMP      r0,r4
0003c2  dcf6              BGT      |L6.946|
;;;682    							
;;;683    							NUM = ( dot_loc > 1 ) ? 6 : 5;
0003c4  f1b80f01          CMP      r8,#1
0003c8  dd01              BLE      |L6.974|
0003ca  2006              MOVS     r0,#6
0003cc  e000              B        |L6.976|
                  |L6.974|
0003ce  2005              MOVS     r0,#5
                  |L6.976|
0003d0  4681              MOV      r9,r0
;;;684    							
;;;685    							strncpy( int_char, float_char, NUM );
0003d2  464a              MOV      r2,r9
0003d4  a901              ADD      r1,sp,#4
0003d6  a804              ADD      r0,sp,#0x10
0003d8  f7fffffe          BL       strncpy
;;;686    							
;;;687    							strcpy( displayStr, int_char );	
0003dc  a904              ADD      r1,sp,#0x10
0003de  4810              LDR      r0,|L6.1056|
0003e0  f7fffffe          BL       strcpy
;;;688    							
;;;689    							CLists.POWER_Limit_C = temp_float * 1000;
0003e4  ed9f0a19          VLDR     s0,|L6.1100|
0003e8  ee280a00          VMUL.F32 s0,s16,s0
0003ec  eebc0ac0          VCVT.U32.F32 s0,s0
0003f0  ee100a10          VMOV     r0,s0
0003f4  490f              LDR      r1,|L6.1076|
0003f6  f8a100e0          STRH     r0,[r1,#0xe0]
;;;690    							
;;;691    							CLists.CSET_Current = CLists.POWER_Limit_C;
0003fa  4608              MOV      r0,r1
0003fc  f8b000e0          LDRH     r0,[r0,#0xe0]  ; CLists
000400  60c8              STR      r0,[r1,#0xc]  ; CLists
                  |L6.1026|
;;;692    						}
;;;693    					}
;;;694    					
;;;695    				break;	
000402  bf00              NOP      
                  |L6.1028|
000404  bf00              NOP                            ;537
;;;696    			}
;;;697    			Write_Flash_Bytes();
000406  f7fffffe          BL       Write_Flash_Bytes
;;;698    			
;;;699    			SGhListM[temp].d_BKColor = 0;
00040a  2000              MOVS     r0,#0
00040c  eb0601c6          ADD      r1,r6,r6,LSL #3
000410  4a02              LDR      r2,|L6.1052|
000412  eb0201c1          ADD      r1,r2,r1,LSL #3
000416  e01f              B        |L6.1112|
                  |L6.1048|
                          DCD      FLAG_INPUTAUTH
                  |L6.1052|
                          DCD      SGhListM
                  |L6.1056|
                          DCD      displayStr
                  |L6.1060|
000424  256400            DCB      "%d",0
000427  00                DCB      0
                  |L6.1064|
000428  256600            DCB      "%f",0
00042b  00                DCB      0
                  |L6.1068|
00042c  302e3030          DCB      "0.00"
                  |L6.1072|
000430  3000              DCB      "0",0
000432  00                DCB      0
000433  00                DCB      0
                  |L6.1076|
                          DCD      CLists
                  |L6.1080|
000438  33302e30          DCB      "30.000",0
00043c  303000  
00043f  00                DCB      0
                  |L6.1088|
000440  2e3000            DCB      ".0",0
000443  00                DCB      0
                  |L6.1092|
000444  2e303030          DCB      ".000",0
000448  00      
000449  00                DCB      0
00044a  00                DCB      0
00044b  00                DCB      0
                  |L6.1100|
00044c  447a0000          DCFS     0x447a0000 ; 1000
                  |L6.1104|
000450  31302e30          DCB      "10.000",0
000454  303000  
000457  00                DCB      0
                  |L6.1112|
000458  6388              STR      r0,[r1,#0x38]
;;;700    			
;;;701    			strcpy( SGhListM[temp].f_SName, displayStr );
00045a  eb0601c6          ADD      r1,r6,r6,LSL #3
00045e  eb0201c1          ADD      r1,r2,r1,LSL #3
000462  f101000c          ADD      r0,r1,#0xc
000466  490d              LDR      r1,|L6.1180|
000468  f7fffffe          BL       strcpy
;;;702    			
;;;703    			strcpy( SGhListM[temp].f_EName, displayStr );
00046c  eb0601c6          ADD      r1,r6,r6,LSL #3
000470  4a0b              LDR      r2,|L6.1184|
000472  eb0201c1          ADD      r1,r2,r1,LSL #3
000476  f1010020          ADD      r0,r1,#0x20
00047a  4908              LDR      r1,|L6.1180|
00047c  f7fffffe          BL       strcpy
                  |L6.1152|
;;;704    		}
;;;705    	}
;;;706    	memset( displayStr, '\0', sizeof(displayStr));
000480  2114              MOVS     r1,#0x14
000482  4806              LDR      r0,|L6.1180|
000484  f7fffffe          BL       __aeabi_memclr
;;;707    	
;;;708    	WM_InvalidateWindow(hWinWind);
000488  4806              LDR      r0,|L6.1188|
00048a  6800              LDR      r0,[r0,#0]  ; hWinWind
00048c  f7fffffe          BL       WM_InvalidateWindow
;;;709    }
000490  b00b              ADD      sp,sp,#0x2c
000492  ecbd8b04          VPOP     {d8-d9}
000496  e8bd8ff0          POP      {r4-r11,pc}
;;;710    
                          ENDP

00049a  0000              DCW      0x0000
                  |L6.1180|
                          DCD      displayStr
                  |L6.1184|
                          DCD      SGhListM
                  |L6.1188|
                          DCD      hWinWind

                          AREA ||i._cbDialogMenu||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  _cbDialogMenu PROC
;;;72     
;;;73     static void _cbDialogMenu(WM_MESSAGE * pMsg) {
000000  e92d43f0          PUSH     {r4-r9,lr}
000004  ed2d8b02          VPUSH    {d8}
000008  b0a5              SUB      sp,sp,#0x94
00000a  4605              MOV      r5,r0
;;;74     	
;;;75     	WM_HWIN hItem;
;;;76     	
;;;77     	int     NCode, Id, MAX_LEN = 0;
00000c  2700              MOVS     r7,#0
;;;78     	
;;;79     	vu8 i;
;;;80     	
;;;81     	char *winName, *chargeName;
;;;82     	
;;;83     	float ftemp;
;;;84     	
;;;85     	static struct SListData slistM[] = {
;;;86     		
;;;87     		{T_Button ,"内阻测试", "I.R. TEST", 	0x00B22222 , 0x001e9ffa,	ID_BUTTON_13 },
;;;88     		
;;;89     		{T_Button ,"程控电源", "POWER",  0x00B22222 , 0x001e9ffa, ID_BUTTON_14 },
;;;90     		
;;;91     		{T_Button ,"程控负载",   "LOAD",	0x00B22222 , 0x001e9ffa, ID_BUTTON_15 },
;;;92     		
;;;93     		{T_Button , "充放电", "C&DC",  0x00B22222 , 0x001e9ffa, ID_BUTTON_16 },
;;;94     		
;;;95     		{T_Button ,"系统设置", "SYSTEM", 	0x00B22222 , 0x001e9ffa, ID_BUTTON_17 },
;;;96     	
;;;97     	};
;;;98     	vu8 _dloc;
;;;99     	
;;;100    	char mChar[5];
;;;101    
;;;102    	switch (pMsg->MsgId) {
00000e  6828              LDR      r0,[r5,#0]
000010  281d              CMP      r0,#0x1d
000012  d07d              BEQ      |L7.272|
000014  dc04              BGT      |L7.32|
000016  280e              CMP      r0,#0xe
000018  d07b              BEQ      |L7.274|
00001a  280f              CMP      r0,#0xf
                  |L7.28|
00001c  d17a              BNE      |L7.276|
00001e  e006              B        |L7.46|
                  |L7.32|
000020  2826              CMP      r0,#0x26
000022  d078              BEQ      |L7.278|
000024  f2a01013          SUB      r0,r0,#0x113
000028  2800              CMP      r0,#0
00002a  d1f7              BNE      |L7.28|
00002c  e09b              B        |L7.358|
                  |L7.46|
;;;103    
;;;104    	case WM_PAINT:
;;;105    		
;;;106    		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_14);	
00002e  f6400141          MOV      r1,#0x841
000032  6868              LDR      r0,[r5,#4]
000034  f7fffffe          BL       WM_GetDialogItem
000038  4606              MOV      r6,r0
;;;107    		
;;;108    		BUTTON_SetPressed( hItem , 1 );		
00003a  2101              MOVS     r1,#1
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       BUTTON_SetPressed
;;;109    		
;;;110    		GUI_SetColor(0x0000FF7F);
000042  f64f707f          MOV      r0,#0xff7f
000046  f7fffffe          BL       GUI_SetColor
;;;111    		
;;;112    		GUI_FillRoundedRect(0,0,480,33,5);
00004a  2005              MOVS     r0,#5
00004c  2321              MOVS     r3,#0x21
00004e  f44f72f0          MOV      r2,#0x1e0
000052  2100              MOVS     r1,#0
000054  9000              STR      r0,[sp,#0]
000056  4608              MOV      r0,r1
000058  f7fffffe          BL       GUI_FillRoundedRect
;;;113    	
;;;114    		GUI_SetColor(GUI_BLACK);
00005c  2000              MOVS     r0,#0
00005e  f7fffffe          BL       GUI_SetColor
;;;115    		
;;;116    		GUI_SetFont(&GUI_FontSONG16);
000062  4890              LDR      r0,|L7.676|
000064  f7fffffe          BL       GUI_SetFont
;;;117    		
;;;118    		GUI_UC_SetEncodeUTF8();
000068  f7fffffe          BL       GUI_UC_SetEncodeUTF8
;;;119    		
;;;120    		GUI_SetTextMode(GUI_TM_TRANS);//设置文本模式为底色透明
00006c  2002              MOVS     r0,#2
00006e  f7fffffe          BL       GUI_SetTextMode
;;;121    	
;;;122    		winName = ( FLAG_LANG == 1) ? "POWER" : "程控电源";
000072  488d              LDR      r0,|L7.680|
000074  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
000076  2801              CMP      r0,#1
000078  d101              BNE      |L7.126|
00007a  a08c              ADR      r0,|L7.684|
00007c  e000              B        |L7.128|
                  |L7.126|
00007e  a08d              ADR      r0,|L7.692|
                  |L7.128|
000080  4680              MOV      r8,r0
;;;123    		
;;;124    		GUI_DispStringAt( winName, (480 - GUI_GetStringDistX( winName))/2, 10);
000082  4640              MOV      r0,r8
000084  f7fffffe          BL       GUI_GetStringDistX
000088  f5c074f0          RSB      r4,r0,#0x1e0
00008c  eb0470d4          ADD      r0,r4,r4,LSR #31
000090  1041              ASRS     r1,r0,#1
000092  220a              MOVS     r2,#0xa
000094  4640              MOV      r0,r8
000096  f7fffffe          BL       GUI_DispStringAt
;;;125    		
;;;126    		for( i = 0; i < sizeof( SGhListM )/sizeof( SGhListM[0]) ; i++  ){
00009a  2000              MOVS     r0,#0
00009c  9024              STR      r0,[sp,#0x90]
00009e  e02f              B        |L7.256|
                  |L7.160|
;;;127    			
;;;128    			bush_Graph_String( FLAG_LANG, SGhListM[i] );
0000a0  f89d0090          LDRB     r0,[sp,#0x90]
0000a4  eb0000c0          ADD      r0,r0,r0,LSL #3
0000a8  4986              LDR      r1,|L7.708|
0000aa  eb0104c0          ADD      r4,r1,r0,LSL #3
0000ae  2234              MOVS     r2,#0x34
0000b0  4621              MOV      r1,r4
0000b2  a80f              ADD      r0,sp,#0x3c
0000b4  f7fffffe          BL       __aeabi_memcpy4
0000b8  f8540f34          LDR      r0,[r4,#0x34]!
0000bc  901c              STR      r0,[sp,#0x70]
0000be  6860              LDR      r0,[r4,#4]
0000c0  901d              STR      r0,[sp,#0x74]
0000c2  68a0              LDR      r0,[r4,#8]
0000c4  901e              STR      r0,[sp,#0x78]
0000c6  89a0              LDRH     r0,[r4,#0xc]
0000c8  f8ad007c          STRH     r0,[sp,#0x7c]
0000cc  89e0              LDRH     r0,[r4,#0xe]
0000ce  f8ad007e          STRH     r0,[sp,#0x7e]
0000d2  8a20              LDRH     r0,[r4,#0x10]
0000d4  f8ad0080          STRH     r0,[sp,#0x80]
0000d8  8a60              LDRH     r0,[r4,#0x12]
0000da  3c34              SUBS     r4,r4,#0x34
0000dc  f8ad0082          STRH     r0,[sp,#0x82]
0000e0  223c              MOVS     r2,#0x3c
0000e2  a912              ADD      r1,sp,#0x48
0000e4  4668              MOV      r0,sp
0000e6  f7fffffe          BL       __aeabi_memcpy4
0000ea  486f              LDR      r0,|L7.680|
0000ec  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
0000ee  a90f              ADD      r1,sp,#0x3c
0000f0  c90e              LDM      r1,{r1-r3}
0000f2  f7fffffe          BL       bush_Graph_String
0000f6  f89d0090          LDRB     r0,[sp,#0x90]         ;126
0000fa  1c40              ADDS     r0,r0,#1              ;126
0000fc  b2c0              UXTB     r0,r0                 ;126
0000fe  9024              STR      r0,[sp,#0x90]         ;126
                  |L7.256|
000100  f89d0090          LDRB     r0,[sp,#0x90]         ;126
000104  280f              CMP      r0,#0xf               ;126
000106  d3cb              BCC      |L7.160|
;;;129    		} 
;;;130    		
;;;131    		GUI_SetFont(&GUI_FontSONG12);
000108  486f              LDR      r0,|L7.712|
00010a  f7fffffe          BL       GUI_SetFont
;;;132    		
;;;133    		GUI_UC_SetEncodeUTF8();
00010e  e003              B        |L7.280|
                  |L7.272|
000110  e0a8              B        |L7.612|
                  |L7.274|
000112  e0a6              B        |L7.610|
                  |L7.276|
000114  e0bb              B        |L7.654|
                  |L7.278|
000116  e0b9              B        |L7.652|
                  |L7.280|
000118  f7fffffe          BL       GUI_UC_SetEncodeUTF8
;;;134    		
;;;135    		GUI_SetTextMode(GUI_TM_TRANS);//设置文本模式为底色透明
00011c  2002              MOVS     r0,#2
00011e  f7fffffe          BL       GUI_SetTextMode
;;;136    		
;;;137    		GUI_SetColor(0x00456654);
000122  486a              LDR      r0,|L7.716|
000124  f7fffffe          BL       GUI_SetColor
;;;138    		
;;;139    		chargeName = ( POWER_RECHARGE == 1 ) ? ( ( FLAG_LANG == 1) ? "Charging" : "充电中" ) : (( FLAG_LANG == 1) ? "Not Charging" : "未充电" );
000128  4869              LDR      r0,|L7.720|
00012a  7800              LDRB     r0,[r0,#0]  ; POWER_RECHARGE
00012c  2801              CMP      r0,#1
00012e  d107              BNE      |L7.320|
000130  485d              LDR      r0,|L7.680|
000132  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
000134  2801              CMP      r0,#1
000136  d101              BNE      |L7.316|
000138  a066              ADR      r0,|L7.724|
00013a  e008              B        |L7.334|
                  |L7.316|
00013c  a068              ADR      r0,|L7.736|
00013e  e006              B        |L7.334|
                  |L7.320|
000140  4859              LDR      r0,|L7.680|
000142  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
000144  2801              CMP      r0,#1
000146  d101              BNE      |L7.332|
000148  a068              ADR      r0,|L7.748|
00014a  e000              B        |L7.334|
                  |L7.332|
00014c  a06b              ADR      r0,|L7.764|
                  |L7.334|
00014e  4681              MOV      r9,r0
;;;140    			
;;;141    		GUI_DispStringAt( chargeName, 460 - GUI_GetStringDistX(chargeName), 13);	
000150  4648              MOV      r0,r9
000152  f7fffffe          BL       GUI_GetStringDistX
000156  f5c074e6          RSB      r4,r0,#0x1cc
00015a  220d              MOVS     r2,#0xd
00015c  4621              MOV      r1,r4
00015e  4648              MOV      r0,r9
000160  f7fffffe          BL       GUI_DispStringAt
;;;142    		
;;;143    	break;
000164  e097              B        |L7.662|
                  |L7.358|
;;;144    	
;;;145    	case WM_TIMER:
;;;146    			
;;;147    		if(WM_GetTimerId(pMsg->Data.v) == ID_TimerTimeMenu){
000166  68e8              LDR      r0,[r5,#0xc]
000168  f7fffffe          BL       WM_GetTimerId
00016c  2803              CMP      r0,#3
00016e  d177              BNE      |L7.608|
;;;148    			
;;;149    			sprintf( MStr, "%f", DISS_POW_Voltage );
000170  4865              LDR      r0,|L7.776|
000172  6800              LDR      r0,[r0,#0]  ; DISS_POW_Voltage
000174  f7fffffe          BL       __aeabi_f2d
000178  ec410b18          VMOV     d8,r0,r1
00017c  ec532b18          VMOV     r2,r3,d8
000180  a162              ADR      r1,|L7.780|
000182  4863              LDR      r0,|L7.784|
000184  f7fffffe          BL       __2sprintf
;;;150    			
;;;151    			_dloc = dot_Loc_isNull(MStr,strlen(MStr)) > 1 ? 6 : 5;
000188  4861              LDR      r0,|L7.784|
00018a  f7fffffe          BL       strlen
00018e  4604              MOV      r4,r0
000190  4621              MOV      r1,r4
000192  485f              LDR      r0,|L7.784|
000194  f7fffffe          BL       dot_Loc_isNull
000198  2801              CMP      r0,#1
00019a  dd01              BLE      |L7.416|
00019c  2006              MOVS     r0,#6
00019e  e000              B        |L7.418|
                  |L7.416|
0001a0  2005              MOVS     r0,#5
                  |L7.418|
0001a2  9023              STR      r0,[sp,#0x8c]
;;;152    
;;;153    		    memset(SGhListM[1].f_SName, '\0', sizeof(SGhListM[1].f_SName));
0001a4  2114              MOVS     r1,#0x14
0001a6  4847              LDR      r0,|L7.708|
0001a8  3054              ADDS     r0,r0,#0x54
0001aa  f7fffffe          BL       __aeabi_memclr4
;;;154    
;;;155    			memset(SGhListM[1].f_EName, '\0', sizeof(SGhListM[1].f_EName));
0001ae  2114              MOVS     r1,#0x14
0001b0  4844              LDR      r0,|L7.708|
0001b2  3068              ADDS     r0,r0,#0x68
0001b4  f7fffffe          BL       __aeabi_memclr4
;;;156    				
;;;157    			strncpy( SGhListM[1].f_SName, MStr, _dloc);
0001b8  f89d208c          LDRB     r2,[sp,#0x8c]
0001bc  4954              LDR      r1,|L7.784|
0001be  4841              LDR      r0,|L7.708|
0001c0  3054              ADDS     r0,r0,#0x54
0001c2  f7fffffe          BL       strncpy
;;;158    			
;;;159    			strncpy( SGhListM[1].f_EName, MStr, _dloc);
0001c6  f89d208c          LDRB     r2,[sp,#0x8c]
0001ca  4951              LDR      r1,|L7.784|
0001cc  483d              LDR      r0,|L7.708|
0001ce  3068              ADDS     r0,r0,#0x68
0001d0  f7fffffe          BL       strncpy
;;;160    			
;;;161    			memset( MStr, '\0', sizeof(MStr));		
0001d4  484e              LDR      r0,|L7.784|
0001d6  2100              MOVS     r1,#0
0001d8  6001              STR      r1,[r0,#0]  ; MStr
0001da  6041              STR      r1,[r0,#4]  ; MStr
0001dc  8101              STRH     r1,[r0,#8]
;;;162    			
;;;163    			sprintf( MStr, "%f", DISS_POW_Current );
0001de  484d              LDR      r0,|L7.788|
0001e0  6800              LDR      r0,[r0,#0]  ; DISS_POW_Current
0001e2  f7fffffe          BL       __aeabi_f2d
0001e6  ec410b18          VMOV     d8,r0,r1
0001ea  ec532b18          VMOV     r2,r3,d8
0001ee  a147              ADR      r1,|L7.780|
0001f0  4847              LDR      r0,|L7.784|
0001f2  f7fffffe          BL       __2sprintf
;;;164    			
;;;165    			_dloc = dot_Loc_isNull(MStr,strlen(MStr)) > 1 ? 6 : 5;
0001f6  4846              LDR      r0,|L7.784|
0001f8  f7fffffe          BL       strlen
0001fc  4604              MOV      r4,r0
0001fe  4621              MOV      r1,r4
000200  4843              LDR      r0,|L7.784|
000202  f7fffffe          BL       dot_Loc_isNull
000206  2801              CMP      r0,#1
000208  dd01              BLE      |L7.526|
00020a  2006              MOVS     r0,#6
00020c  e000              B        |L7.528|
                  |L7.526|
00020e  2005              MOVS     r0,#5
                  |L7.528|
000210  9023              STR      r0,[sp,#0x8c]
;;;166    
;;;167    		    memset(SGhListM[4].f_SName, '\0', sizeof(SGhListM[4].f_SName));
000212  2114              MOVS     r1,#0x14
000214  4840              LDR      r0,|L7.792|
000216  f7fffffe          BL       __aeabi_memclr4
;;;168    
;;;169    			memset(SGhListM[4].f_EName, '\0', sizeof(SGhListM[4].f_EName));
00021a  2114              MOVS     r1,#0x14
00021c  483e              LDR      r0,|L7.792|
00021e  3014              ADDS     r0,r0,#0x14
000220  f7fffffe          BL       __aeabi_memclr4
;;;170    							
;;;171    			strncpy( SGhListM[4].f_SName, MStr, _dloc );
000224  f89d208c          LDRB     r2,[sp,#0x8c]
000228  4939              LDR      r1,|L7.784|
00022a  483b              LDR      r0,|L7.792|
00022c  f7fffffe          BL       strncpy
;;;172    			
;;;173    			strncpy( SGhListM[4].f_EName, MStr, _dloc );
000230  f89d208c          LDRB     r2,[sp,#0x8c]
000234  4936              LDR      r1,|L7.784|
000236  4838              LDR      r0,|L7.792|
000238  3014              ADDS     r0,r0,#0x14
00023a  f7fffffe          BL       strncpy
;;;174    			
;;;175    	
;;;176    			memset( MStr, '\0', sizeof(MStr));	
00023e  4834              LDR      r0,|L7.784|
000240  2100              MOVS     r1,#0
000242  6001              STR      r1,[r0,#0]  ; MStr
000244  6041              STR      r1,[r0,#4]  ; MStr
000246  8101              STRH     r1,[r0,#8]
;;;177    
;;;178    		    memset( mChar, '\0', sizeof(mChar));				
000248  2000              MOVS     r0,#0
00024a  9021              STR      r0,[sp,#0x84]
00024c  9022              STR      r0,[sp,#0x88]
;;;179    			
;;;180    			WM_InvalidateWindow(hWinWind);		
00024e  4833              LDR      r0,|L7.796|
000250  6800              LDR      r0,[r0,#0]  ; hWinWind
000252  f7fffffe          BL       WM_InvalidateWindow
;;;181    			
;;;182    			WM_RestartTimer(pMsg->Data.v, 500);
000256  f44f71fa          MOV      r1,#0x1f4
00025a  68e8              LDR      r0,[r5,#0xc]
00025c  f7fffffe          BL       WM_RestartTimer
                  |L7.608|
;;;183    		}
;;;184    	case WM_KEY://接受按键消息来处理按键功能
000260  bf00              NOP      
                  |L7.610|
;;;185    		
;;;186    
;;;187    	break;
000262  e018              B        |L7.662|
                  |L7.612|
;;;188    	
;;;189    	case WM_INIT_DIALOG://重绘外观
;;;190      
;;;191    		hItem = pMsg->hWin;
000264  686e              LDR      r6,[r5,#4]
;;;192    		
;;;193    		WINDOW_SetBkColor(hItem, 0x004A4655);
000266  492e              LDR      r1,|L7.800|
000268  4630              MOV      r0,r6
00026a  f7fffffe          BL       WINDOW_SetBkColor
;;;194    		
;;;195    		WM_CreateTimer(hItem,ID_TimerTimeMenu,20,0);//创建本窗口定时器
00026e  2300              MOVS     r3,#0
000270  2214              MOVS     r2,#0x14
000272  2103              MOVS     r1,#3
000274  4630              MOV      r0,r6
000276  f7fffffe          BL       WM_CreateTimer
;;;196    
;;;197    		MAX_LEN = sizeof(slistM)/sizeof(slistM[0]);
00027a  2705              MOVS     r7,#5
;;;198    		
;;;199    		bush_WinObj( FLAG_LANG, pMsg ,slistM, MAX_LEN);
00027c  463b              MOV      r3,r7
00027e  4a29              LDR      r2,|L7.804|
000280  4629              MOV      r1,r5
000282  4809              LDR      r0,|L7.680|
000284  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
000286  f7fffffe          BL       bush_WinObj
;;;200     
;;;201        break;
00028a  e004              B        |L7.662|
                  |L7.652|
;;;202    	
;;;203    	case WM_NOTIFY_PARENT:
;;;204    		
;;;205        break;
00028c  e003              B        |L7.662|
                  |L7.654|
;;;206    	
;;;207    	default:
;;;208    	
;;;209    		WM_DefaultProc(pMsg);
00028e  4628              MOV      r0,r5
000290  f7fffffe          BL       WM_DefaultProc
;;;210    	
;;;211        break;
000294  bf00              NOP      
                  |L7.662|
000296  bf00              NOP                            ;143
;;;212      }
;;;213    }
000298  b025              ADD      sp,sp,#0x94
00029a  ecbd8b02          VPOP     {d8}
00029e  e8bd83f0          POP      {r4-r9,pc}
;;;214    
                          ENDP

0002a2  0000              DCW      0x0000
                  |L7.676|
                          DCD      GUI_FontSONG16
                  |L7.680|
                          DCD      FLAG_LANG
                  |L7.684|
0002ac  504f5745          DCB      "POWER",0
0002b0  5200    
0002b2  00                DCB      0
0002b3  00                DCB      0
                  |L7.692|
0002b4  e7a88be6          DCB      231,168,139,230,142,167,231,148,181,230,186,144,0
0002b8  8ea7e794
0002bc  b5e6ba90
0002c0  00      
0002c1  00                DCB      0
0002c2  00                DCB      0
0002c3  00                DCB      0
                  |L7.708|
                          DCD      SGhListM
                  |L7.712|
                          DCD      GUI_FontSONG12
                  |L7.716|
                          DCD      0x00456654
                  |L7.720|
                          DCD      POWER_RECHARGE
                  |L7.724|
0002d4  43686172          DCB      "Charging",0
0002d8  67696e67
0002dc  00      
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0
                  |L7.736|
0002e0  e58585e7          DCB      229,133,133,231,148,181,228,184,173,0
0002e4  94b5e4b8
0002e8  ad00    
0002ea  00                DCB      0
0002eb  00                DCB      0
                  |L7.748|
0002ec  4e6f7420          DCB      "Not Charging",0
0002f0  43686172
0002f4  67696e67
0002f8  00      
0002f9  00                DCB      0
0002fa  00                DCB      0
0002fb  00                DCB      0
                  |L7.764|
0002fc  e69caae5          DCB      230,156,170,229,133,133,231,148,181,0
000300  8585e794
000304  b500    
000306  00                DCB      0
000307  00                DCB      0
                  |L7.776|
                          DCD      DISS_POW_Voltage
                  |L7.780|
00030c  256600            DCB      "%f",0
00030f  00                DCB      0
                  |L7.784|
                          DCD      MStr
                  |L7.788|
                          DCD      DISS_POW_Current
                  |L7.792|
                          DCD      SGhListM+0x12c
                  |L7.796|
                          DCD      hWinWind
                  |L7.800|
                          DCD      0x004a4655
                  |L7.804|
                          DCD      slistM

                          AREA ||i.trig_power_charge||, CODE, READONLY, ALIGN=2

                  trig_power_charge PROC
;;;710    
;;;711    void trig_power_charge(){
000000  b508              PUSH     {r3,lr}
;;;712    	
;;;713    	vu8 chargeState;
;;;714    	
;;;715    	chargeState = ( POWER_RECHARGE == 1 ) ?  1 : 0;
000002  4809              LDR      r0,|L8.40|
000004  7800              LDRB     r0,[r0,#0]  ; POWER_RECHARGE
000006  2801              CMP      r0,#1
000008  d100              BNE      |L8.12|
00000a  e000              B        |L8.14|
                  |L8.12|
00000c  2000              MOVS     r0,#0
                  |L8.14|
00000e  9000              STR      r0,[sp,#0]
;;;716    	
;;;717    	OnOff_GPOI_ResetSet( FLAG_WIN , chargeState );
000010  f89d1000          LDRB     r1,[sp,#0]
000014  4805              LDR      r0,|L8.44|
000016  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
000018  f7fffffe          BL       OnOff_GPOI_ResetSet
;;;718    	
;;;719    	WM_InvalidateWindow(hWinWind);
00001c  4804              LDR      r0,|L8.48|
00001e  6800              LDR      r0,[r0,#0]  ; hWinWind
000020  f7fffffe          BL       WM_InvalidateWindow
;;;720    	
;;;721    }
000024  bd08              POP      {r3,pc}
;;;722    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      POWER_RECHARGE
                  |L8.44|
                          DCD      FLAG_WIN
                  |L8.48|
                          DCD      hWinWind

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  MStr
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _aDialogCreateMenu
                          DCD      WINDOW_CreateIndirect
                          DCD      ||.conststring||
000008  083e0000          DCW      0x083e,0x0000
00000c  000001e0          DCW      0x0000,0x01e0
000010  01100000          DCW      0x0110,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
000024  08400055          DCW      0x0840,0x0055
000028  00e80046          DCW      0x00e8,0x0046
00002c  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
000040  084100a4          DCW      0x0841,0x00a4
000044  00e80046          DCW      0x00e8,0x0046
000048  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
00005c  084200f3          DCW      0x0842,0x00f3
000060  00e80046          DCW      0x00e8,0x0046
000064  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
000078  08430142          DCW      0x0843,0x0142
00007c  00e80046          DCW      0x00e8,0x0046
000080  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
000094  08440191          DCW      0x0844,0x0191
000098  00e80046          DCW      0x00e8,0x0046
00009c  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                  WINM_id_DataLists
                          DCD      0x0000000b
                          DCD      0x0000000e

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  57696e64          DCB      "Window",0
000004  6f7700  
000007  00                DCB      0
000008  42757474          DCB      "Button",0
00000c  6f6e00  

                          AREA ||.data||, DATA, ALIGN=2

                  hWinWind
                          DCD      0x00000000
                  SGhListM
                          DCD      0x00000001
                          DCD      0x00000000
                          DCD      0x00000002
000010  563a0000          DCB      0x56,0x3a,0x00,0x00
                          %        16
000024  563a0000          DCB      0x56,0x3a,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
000044  001e0037          DCW      0x001e,0x0037
000048  00000000          DCW      0x0000,0x0000
                          DCD      0x00000002
                          DCD      0x00000000
                          DCD      0x00000002
000058  302e3030          DCB      0x30,0x2e,0x30,0x30
00005c  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
00006c  302e3030          DCB      0x30,0x2e,0x30,0x30
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
00008c  0058003a          DCW      0x0058,0x003a
000090  00000000          DCW      0x0000,0x0000
                          DCD      0x00000003
                          DCD      0x00000000
                          DCD      0x00000002
0000a0  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
0000b4  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
0000d4  00b20037          DCW      0x00b2,0x0037
0000d8  00000000          DCW      0x0000,0x0000
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000002
0000e8  493a0000          DCB      0x49,0x3a,0x00,0x00
                          %        16
0000fc  493a0000          DCB      0x49,0x3a,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
00011c  001e0074          DCW      0x001e,0x0074
000120  00000000          DCW      0x0000,0x0000
                          DCD      0x00000005
                          DCD      0x00000000
                          DCD      0x00000002
000130  302e3030          DCB      0x30,0x2e,0x30,0x30
000134  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
000144  302e3030          DCB      0x30,0x2e,0x30,0x30
000148  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000164  00580077          DCW      0x0058,0x0077
000168  00000000          DCW      0x0000,0x0000
                          DCD      0x00000006
                          DCD      0x00000000
                          DCD      0x00000002
000178  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
00018c  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
0001ac  00b20074          DCW      0x00b2,0x0074
0001b0  00000000          DCW      0x0000,0x0000
                          DCD      0x00000007
                          DCD      0x00000000
                          DCD      0x00000002
0001c0  433a0000          DCB      0x43,0x3a,0x00,0x00
                          %        16
0001d4  433a0000          DCB      0x43,0x3a,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
0001f4  001e00b1          DCW      0x001e,0x00b1
0001f8  00000000          DCW      0x0000,0x0000
                          DCD      0x00000008
                          DCD      0x00000000
                          DCD      0x00000002
000208  30303030          DCB      0x30,0x30,0x30,0x30
00020c  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
00021c  30303030          DCB      0x30,0x30,0x30,0x30
000220  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
00023c  005800b4          DCW      0x0058,0x00b4
000240  00000000          DCW      0x0000,0x0000
                          DCD      0x00000009
                          DCD      0x00000000
                          DCD      0x00000002
000250  6d414800          DCB      0x6d,0x41,0x48,0x00
                          %        16
000264  6d414800          DCB      0x6d,0x41,0x48,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
000284  00b200b1          DCW      0x00b2,0x00b1
000288  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000a
                          DCD      0x00000000
                          DCD      0x00000002
000298  e8be93e5          DCB      0xe8,0xbe,0x93,0xe5
00029c  87bae794          DCB      0x87,0xba,0xe7,0x94
0002a0  b5e58e8b          DCB      0xb5,0xe5,0x8e,0x8b
0002a4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
0002ac  4f757470          DCB      0x4f,0x75,0x74,0x70
0002b0  75742056          DCB      0x75,0x74,0x20,0x56
0002b4  00000000          DCB      0x00,0x00,0x00,0x00
                          %        8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0002cc  0104005a          DCW      0x0104,0x005a
0002d0  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000b
                          DCD      0x00000001
                          DCD      0x00000001
0002e0  342e3230          DCB      0x34,0x2e,0x32,0x30
0002e4  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
0002f4  342e3230          DCB      0x34,0x2e,0x32,0x30
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000314  015e005a          DCW      0x015e,0x005a
000318  0190006b          DCW      0x0190,0x006b
                          DCD      0x0000000c
                          DCD      0x00000000
                          DCD      0x00000002
000328  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
00033c  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00035c  01ae005a          DCW      0x01ae,0x005a
000360  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000d
                          DCD      0x00000000
                          DCD      0x00000002
000370  e99990e5          DCB      0xe9,0x99,0x90,0xe5
000374  88b6e794          DCB      0x88,0xb6,0xe7,0x94
000378  b5e6b581          DCB      0xb5,0xe6,0xb5,0x81
00037c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000384  4c696d69          DCB      0x4c,0x69,0x6d,0x69
000388  74696e67          DCB      0x74,0x69,0x6e,0x67
00038c  20430000          DCB      0x20,0x43,0x00,0x00
                          %        8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0003a4  01040082          DCW      0x0104,0x0082
0003a8  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000e
                          DCD      0x00000000
                          DCD      0x00000001
0003b8  312e3030          DCB      0x31,0x2e,0x30,0x30
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
0003cc  312e3030          DCB      0x31,0x2e,0x30,0x30
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0003ec  015e0082          DCW      0x015e,0x0082
0003f0  01900093          DCW      0x0190,0x0093
                          DCD      0x0000000f
                          DCD      0x00000000
                          DCD      0x00000002
000400  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
000414  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000434  01ae0082          DCW      0x01ae,0x0082
000438  00000000          DCW      0x0000,0x0000
                  slistM
00043c  00e58685          DCB      0x00,0xe5,0x86,0x85
000440  e998bbe6          DCB      0xe9,0x98,0xbb,0xe6
000444  b58be8af          DCB      0xb5,0x8b,0xe8,0xaf
000448  95000000          DCB      0x95,0x00,0x00,0x00
                          DCD      0x00000000
000450  00492e52          DCB      0x00,0x49,0x2e,0x52
000454  2e205445          DCB      0x2e,0x20,0x54,0x45
000458  53540000          DCB      0x53,0x54,0x00,0x00
                          %        8
000464  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x001e9ffa
                          DCD      0x00000840
000474  00e7a88b          DCB      0x00,0xe7,0xa8,0x8b
000478  e68ea7e7          DCB      0xe6,0x8e,0xa7,0xe7
00047c  94b5e6ba          DCB      0x94,0xb5,0xe6,0xba
000480  90000000          DCB      0x90,0x00,0x00,0x00
                          DCD      0x00000000
000488  00504f57          DCB      0x00,0x50,0x4f,0x57
00048c  45520000          DCB      0x45,0x52,0x00,0x00
                          %        12
00049c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x001e9ffa
                          DCD      0x00000841
0004ac  00e7a88b          DCB      0x00,0xe7,0xa8,0x8b
0004b0  e68ea7e8          DCB      0xe6,0x8e,0xa7,0xe8
0004b4  b49fe8bd          DCB      0xb4,0x9f,0xe8,0xbd
0004b8  bd000000          DCB      0xbd,0x00,0x00,0x00
                          DCD      0x00000000
0004c0  004c4f41          DCB      0x00,0x4c,0x4f,0x41
0004c4  44000000          DCB      0x44,0x00,0x00,0x00
                          %        12
0004d4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x001e9ffa
                          DCD      0x00000842
0004e4  00e58585          DCB      0x00,0xe5,0x85,0x85
0004e8  e694bee7          DCB      0xe6,0x94,0xbe,0xe7
0004ec  94b50000          DCB      0x94,0xb5,0x00,0x00
                          %        8
0004f8  00432644          DCB      0x00,0x43,0x26,0x44
0004fc  43000000          DCB      0x43,0x00,0x00,0x00
                          %        12
00050c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x001e9ffa
                          DCD      0x00000843
00051c  00e7b3bb          DCB      0x00,0xe7,0xb3,0xbb
000520  e7bb9fe8          DCB      0xe7,0xbb,0x9f,0xe8
000524  aebee7bd          DCB      0xae,0xbe,0xe7,0xbd
000528  ae000000          DCB      0xae,0x00,0x00,0x00
                          DCD      0x00000000
000530  00535953          DCB      0x00,0x53,0x59,0x53
000534  54454d00          DCB      0x54,0x45,0x4d,0x00
                          %        12
000544  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x001e9ffa
                          DCD      0x00000844

;*** Start embedded assembler ***

#line 1 "..\\APP\\menu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_menu_c_c7b0bb5e____REV16|
#line 129 "D:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_menu_c_c7b0bb5e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_menu_c_c7b0bb5e____REVSH|
#line 144
|__asm___6_menu_c_c7b0bb5e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
