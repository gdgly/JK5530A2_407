; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\r_face.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\r_face.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\r_face.crf --no_multibyte_chars ..\APP\R_Face.c]
                          THUMB

                          AREA ||i.CreateR||, CODE, READONLY, ALIGN=2

                  CreateR PROC
;;;426    WM_HWIN CreateR(void);
;;;427    WM_HWIN CreateR(void) {
000000  b57c              PUSH     {r2-r6,lr}
;;;428    	
;;;429    		int dlen, flen;
;;;430    		
;;;431    		int *key_loc;
;;;432    		
;;;433    		char *temp_char;
;;;434    		
;;;435    		if( FLAG_FIRSTWIN[1] ){
000002  484e              LDR      r0,|L1.316|
000004  7840              LDRB     r0,[r0,#1]  ; FLAG_FIRSTWIN
000006  2800              CMP      r0,#0
000008  d064              BEQ      |L1.212|
;;;436    			
;;;437    				if( CLists.IR_Start_C 	  !=	0xffffff )
00000a  484d              LDR      r0,|L1.320|
00000c  f8b000d4          LDRH     r0,[r0,#0xd4]  ; CLists
000010  f06f417f          MVN      r1,#0xff000000
000014  4288              CMP      r0,r1
000016  d010              BEQ      |L1.58|
;;;438    				{	
;;;439    						strcpy( SGhListR[20].f_SName, Read_Data_Parse(1) ); 		
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       Read_Data_Parse
00001e  4606              MOV      r6,r0
000020  4631              MOV      r1,r6
000022  4848              LDR      r0,|L1.324|
000024  f7fffffe          BL       strcpy
;;;440    						strcpy( SGhListR[20].f_EName, Read_Data_Parse(1) ); 			
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       Read_Data_Parse
00002e  4606              MOV      r6,r0
000030  4631              MOV      r1,r6
000032  4844              LDR      r0,|L1.324|
000034  3014              ADDS     r0,r0,#0x14
000036  f7fffffe          BL       strcpy
                  |L1.58|
;;;441    				}
;;;442    				
;;;443    				if( CLists.IR_Step_C 	  != 	0xffffff )
00003a  4841              LDR      r0,|L1.320|
00003c  f8b000d6          LDRH     r0,[r0,#0xd6]  ; CLists
000040  f06f417f          MVN      r1,#0xff000000
000044  4288              CMP      r0,r1
000046  d011              BEQ      |L1.108|
;;;444    				{	
;;;445    						strcpy( SGhListR[23].f_SName, Read_Data_Parse(2) ); 	
000048  2002              MOVS     r0,#2
00004a  f7fffffe          BL       Read_Data_Parse
00004e  4606              MOV      r6,r0
000050  4631              MOV      r1,r6
000052  483c              LDR      r0,|L1.324|
000054  30d8              ADDS     r0,r0,#0xd8
000056  f7fffffe          BL       strcpy
;;;446    						strcpy( SGhListR[23].f_EName, Read_Data_Parse(2) ); 		
00005a  2002              MOVS     r0,#2
00005c  f7fffffe          BL       Read_Data_Parse
000060  4606              MOV      r6,r0
000062  4631              MOV      r1,r6
000064  4837              LDR      r0,|L1.324|
000066  30ec              ADDS     r0,r0,#0xec
000068  f7fffffe          BL       strcpy
                  |L1.108|
;;;447    				}
;;;448    				
;;;449    				if( CLists.IR_Threshold_V !=	0xffffff )
00006c  4834              LDR      r0,|L1.320|
00006e  f8d000d8          LDR      r0,[r0,#0xd8]  ; CLists
000072  f06f417f          MVN      r1,#0xff000000
000076  4288              CMP      r0,r1
000078  d010              BEQ      |L1.156|
;;;450    				{	
;;;451    						strcpy( SGhListR[26].f_SName, Read_Data_Parse(3) ); 	
00007a  2003              MOVS     r0,#3
00007c  f7fffffe          BL       Read_Data_Parse
000080  4606              MOV      r6,r0
000082  4631              MOV      r1,r6
000084  4830              LDR      r0,|L1.328|
000086  f7fffffe          BL       strcpy
;;;452    						strcpy( SGhListR[26].f_EName, Read_Data_Parse(3) ); 		
00008a  2003              MOVS     r0,#3
00008c  f7fffffe          BL       Read_Data_Parse
000090  4606              MOV      r6,r0
000092  4631              MOV      r1,r6
000094  482c              LDR      r0,|L1.328|
000096  3014              ADDS     r0,r0,#0x14
000098  f7fffffe          BL       strcpy
                  |L1.156|
;;;453    				}
;;;454    				
;;;455    				if( CLists.IR_Step_Time   !=	0xffffff )
00009c  4828              LDR      r0,|L1.320|
00009e  f89000dc          LDRB     r0,[r0,#0xdc]  ; CLists
0000a2  f06f417f          MVN      r1,#0xff000000
0000a6  4288              CMP      r0,r1
0000a8  d011              BEQ      |L1.206|
;;;456    				{	
;;;457    						strcpy( SGhListR[29].f_SName, Read_Data_Parse(4) ); 
0000aa  2004              MOVS     r0,#4
0000ac  f7fffffe          BL       Read_Data_Parse
0000b0  4606              MOV      r6,r0
0000b2  4631              MOV      r1,r6
0000b4  4824              LDR      r0,|L1.328|
0000b6  30d8              ADDS     r0,r0,#0xd8
0000b8  f7fffffe          BL       strcpy
;;;458    						strcpy( SGhListR[29].f_EName, Read_Data_Parse(4) ); 		
0000bc  2004              MOVS     r0,#4
0000be  f7fffffe          BL       Read_Data_Parse
0000c2  4606              MOV      r6,r0
0000c4  4631              MOV      r1,r6
0000c6  4820              LDR      r0,|L1.328|
0000c8  30ec              ADDS     r0,r0,#0xec
0000ca  f7fffffe          BL       strcpy
                  |L1.206|
;;;459    				}
;;;460    				
;;;461    				FLAG_FIRSTWIN[1] = 0;						
0000ce  2000              MOVS     r0,#0
0000d0  491a              LDR      r1,|L1.316|
0000d2  7048              STRB     r0,[r1,#1]
                  |L1.212|
;;;462    		} 	
;;;463    		CLists.CSET_Current_Laod =  CLists.IR_Start_C;
0000d4  481a              LDR      r0,|L1.320|
0000d6  f8b000d4          LDRH     r0,[r0,#0xd4]  ; CLists
0000da  4919              LDR      r1,|L1.320|
0000dc  6148              STR      r0,[r1,#0x14]  ; CLists
;;;464    			
;;;465    		ms_time = 0;
0000de  2000              MOVS     r0,#0
0000e0  491a              LDR      r1,|L1.332|
0000e2  6008              STR      r0,[r1,#0]  ; ms_time
;;;466    		abc_time = 0;
0000e4  491a              LDR      r1,|L1.336|
0000e6  6008              STR      r0,[r1,#0]  ; abc_time
;;;467    		
;;;468    		dlen = sizeof(SGhListR) / sizeof(SGhListR[0]);
0000e8  2525              MOVS     r5,#0x25
;;;469    		key_loc = get_id_index( SGhListR, dlen);
0000ea  4629              MOV      r1,r5
0000ec  4819              LDR      r0,|L1.340|
0000ee  f7fffffe          BL       get_id_index
0000f2  4604              MOV      r4,r0
;;;470    		
;;;471    		memset( displayStr, '\0', sizeof(displayStr));
0000f4  2114              MOVS     r1,#0x14
0000f6  4818              LDR      r0,|L1.344|
0000f8  f7fffffe          BL       __aeabi_memclr
;;;472    		
;;;473    		if( *key_loc != 21 )
0000fc  6820              LDR      r0,[r4,#0]
0000fe  2815              CMP      r0,#0x15
000100  d00b              BEQ      |L1.282|
;;;474    		{
;;;475    				SGhListR[*(key_loc+1)].focusType = 0;	
000102  2000              MOVS     r0,#0
000104  6861              LDR      r1,[r4,#4]
000106  eb0101c1          ADD      r1,r1,r1,LSL #3
00010a  4a12              LDR      r2,|L1.340|
00010c  eb0201c1          ADD      r1,r2,r1,LSL #3
000110  6048              STR      r0,[r1,#4]
;;;476    				SGhListR[20].focusType = 1;
000112  2101              MOVS     r1,#1
000114  4610              MOV      r0,r2
000116  f8c015a4          STR      r1,[r0,#0x5a4]
                  |L1.282|
;;;477    		}
;;;478    		
;;;479    		hWinR = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
00011a  f7fffffe          BL       WM_GetDesktopWindow
00011e  4606              MOV      r6,r0
000120  2000              MOVS     r0,#0
000122  9000              STR      r0,[sp,#0]
000124  4633              MOV      r3,r6
000126  4a0d              LDR      r2,|L1.348|
000128  2106              MOVS     r1,#6
00012a  9001              STR      r0,[sp,#4]
00012c  480c              LDR      r0,|L1.352|
00012e  f7fffffe          BL       GUI_CreateDialogBox
000132  490c              LDR      r1,|L1.356|
000134  6008              STR      r0,[r1,#0]  ; hWinR
;;;480    		
;;;481    		return hWinR;
000136  4608              MOV      r0,r1
000138  6800              LDR      r0,[r0,#0]  ; hWinR
;;;482    }
00013a  bd7c              POP      {r2-r6,pc}
;;;483    
                          ENDP

                  |L1.316|
                          DCD      FLAG_FIRSTWIN
                  |L1.320|
                          DCD      CLists
                  |L1.324|
                          DCD      SGhListR+0x5ac
                  |L1.328|
                          DCD      SGhListR+0x75c
                  |L1.332|
                          DCD      ms_time
                  |L1.336|
                          DCD      abc_time
                  |L1.340|
                          DCD      SGhListR
                  |L1.344|
                          DCD      displayStr
                  |L1.348|
                          DCD      _cbDialog
                  |L1.352|
                          DCD      _aDialogCreate
                  |L1.356|
                          DCD      hWinR

                          AREA ||i.KEY_DOWN_IRT||, CODE, READONLY, ALIGN=2

                  KEY_DOWN_IRT PROC
;;;486    /*   方向键   */
;;;487    void KEY_DOWN_IRT( int handle ){
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4606              MOV      r6,r0
;;;488    	
;;;489    	int i, dlen = 0;
000006  2700              MOVS     r7,#0
;;;490    	int *key_loc;
;;;491    	int flag = 0;
000008  46ba              MOV      r10,r7
;;;492    	int get_nextid = 0, nowid = 0, nowid_index = 0;
00000a  46b8              MOV      r8,r7
00000c  46b9              MOV      r9,r7
00000e  46bb              MOV      r11,r7
;;;493    	
;;;494    	if( FLAG_OVTest  && FLAG_INPUTAUTH == 0  )
000010  482b              LDR      r0,|L2.192|
000012  7800              LDRB     r0,[r0,#0]  ; FLAG_OVTest
000014  2800              CMP      r0,#0
000016  d051              BEQ      |L2.188|
000018  482a              LDR      r0,|L2.196|
00001a  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
00001c  2800              CMP      r0,#0
00001e  d14d              BNE      |L2.188|
;;;495    	{
;;;496    		dlen = sizeof(SGhListR) / sizeof(SGhListR[0]);
000020  2725              MOVS     r7,#0x25
;;;497    		key_loc = get_id_index( SGhListR, dlen);
000022  4639              MOV      r1,r7
000024  4828              LDR      r0,|L2.200|
000026  f7fffffe          BL       get_id_index
00002a  4605              MOV      r5,r0
;;;498    			
;;;499    		nowid = *key_loc;
00002c  f8d59000          LDR      r9,[r5,#0]
;;;500    		nowid_index = *(key_loc + 1);
000030  f8d5b004          LDR      r11,[r5,#4]
;;;501    			
;;;502    		if( nowid == 0x194 ) 
000034  f5b97fca          CMP      r9,#0x194
000038  d104              BNE      |L2.68|
;;;503    					
;;;504    			SGhListR[20].focusType = 1;
00003a  2101              MOVS     r1,#1
00003c  4822              LDR      r0,|L2.200|
00003e  f8c015a4          STR      r1,[r0,#0x5a4]
000042  e001              B        |L2.72|
                  |L2.68|
;;;505    					
;;;506    		else
;;;507    				
;;;508    			flag = 1;
000044  f04f0a01          MOV      r10,#1
                  |L2.72|
;;;509    			
;;;510    		get_nextid = get_nextindex( nowid, WINR_id_DataLists, handle);
000048  4632              MOV      r2,r6
00004a  4920              LDR      r1,|L2.204|
00004c  4648              MOV      r0,r9
00004e  f7fffffe          BL       get_nextindex
000052  4680              MOV      r8,r0
;;;511    			
;;;512    		if( flag && get_nextid != 0xFF )
000054  f1ba0f00          CMP      r10,#0
000058  d02c              BEQ      |L2.180|
00005a  f1b80fff          CMP      r8,#0xff
00005e  d029              BEQ      |L2.180|
;;;513    		{
;;;514    			SGhListR[nowid_index].focusType = 0;	
000060  2000              MOVS     r0,#0
000062  eb0b01cb          ADD      r1,r11,r11,LSL #3
000066  4a18              LDR      r2,|L2.200|
000068  eb0201c1          ADD      r1,r2,r1,LSL #3
00006c  6048              STR      r0,[r1,#4]
;;;515    				
;;;516    			for	( i = 0; i < dlen; i++)
00006e  2400              MOVS     r4,#0
000070  e01d              B        |L2.174|
                  |L2.114|
;;;517    			{
;;;518    				if( SGhListR[i].d_ID == get_nextid && (SGhListR[i].t_Type == T_THref || SGhListR[i].t_Type == T_TLISTBOX) )
000072  eb0400c4          ADD      r0,r4,r4,LSL #3
000076  4914              LDR      r1,|L2.200|
000078  f8510030          LDR      r0,[r1,r0,LSL #3]
00007c  4540              CMP      r0,r8
00007e  d115              BNE      |L2.172|
000080  eb0400c4          ADD      r0,r4,r4,LSL #3
000084  eb0100c0          ADD      r0,r1,r0,LSL #3
000088  6880              LDR      r0,[r0,#8]
00008a  2801              CMP      r0,#1
00008c  d006              BEQ      |L2.156|
00008e  eb0400c4          ADD      r0,r4,r4,LSL #3
000092  eb0100c0          ADD      r0,r1,r0,LSL #3
000096  6880              LDR      r0,[r0,#8]
000098  2803              CMP      r0,#3
00009a  d107              BNE      |L2.172|
                  |L2.156|
;;;519    				{				
;;;520    					SGhListR[i].focusType = 1;	
00009c  2001              MOVS     r0,#1
00009e  eb0401c4          ADD      r1,r4,r4,LSL #3
0000a2  4a09              LDR      r2,|L2.200|
0000a4  eb0201c1          ADD      r1,r2,r1,LSL #3
0000a8  6048              STR      r0,[r1,#4]
;;;521    					break;
0000aa  e002              B        |L2.178|
                  |L2.172|
0000ac  1c64              ADDS     r4,r4,#1              ;516
                  |L2.174|
0000ae  42bc              CMP      r4,r7                 ;516
0000b0  dbdf              BLT      |L2.114|
                  |L2.178|
0000b2  bf00              NOP      
                  |L2.180|
;;;522    				}
;;;523    			}	
;;;524    				
;;;525    		}
;;;526    		WM_InvalidateWindow(hWinR);	
0000b4  4806              LDR      r0,|L2.208|
0000b6  6800              LDR      r0,[r0,#0]  ; hWinR
0000b8  f7fffffe          BL       WM_InvalidateWindow
                  |L2.188|
;;;527    	}
;;;528    	else
;;;529    	{
;;;530    	
;;;531    	}
;;;532    }
0000bc  e8bd9ff0          POP      {r4-r12,pc}
;;;533    
                          ENDP

                  |L2.192|
                          DCD      FLAG_OVTest
                  |L2.196|
                          DCD      FLAG_INPUTAUTH
                  |L2.200|
                          DCD      SGhListR
                  |L2.204|
                          DCD      WINR_id_DataLists
                  |L2.208|
                          DCD      hWinR

                          AREA ||i.KEY_IRT_INPUT||, CODE, READONLY, ALIGN=2

                  KEY_IRT_INPUT PROC
;;;536    /*   数字键输入   */
;;;537    void KEY_IRT_INPUT(char *strx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;538    {
000004  4606              MOV      r6,r0
;;;539    
;;;540    	int *key_loc;
;;;541    		
;;;542    	int i, dlen = 0;
000006  2700              MOVS     r7,#0
;;;543    		
;;;544    	int dot_loc = 1024;
000008  f44f6880          MOV      r8,#0x400
;;;545    	
;;;546    	dlen = sizeof(SGhListR) / sizeof(SGhListR[0]);
00000c  2725              MOVS     r7,#0x25
;;;547    		
;;;548    	key_loc = get_id_index( SGhListR, dlen);
00000e  4639              MOV      r1,r7
000010  483c              LDR      r0,|L3.260|
000012  f7fffffe          BL       get_id_index
000016  4604              MOV      r4,r0
;;;549    		
;;;550    	if( *key_loc == 0x194 )
000018  6820              LDR      r0,[r4,#0]
00001a  f5b07fca          CMP      r0,#0x194
00001e  d104              BNE      |L3.42|
;;;551    			
;;;552    		SGhListR[20].focusType = 1;
000020  2101              MOVS     r1,#1
000022  4838              LDR      r0,|L3.260|
000024  f8c015a4          STR      r1,[r0,#0x5a4]
000028  e064              B        |L3.244|
                  |L3.42|
;;;553    	else
;;;554    	{
;;;555    		if( displayStr[0] == '\0' && *strx == 0x2e ) 
00002a  4837              LDR      r0,|L3.264|
00002c  7800              LDRB     r0,[r0,#0]  ; displayStr
00002e  b938              CBNZ     r0,|L3.64|
000030  7830              LDRB     r0,[r6,#0]
000032  282e              CMP      r0,#0x2e
000034  d104              BNE      |L3.64|
;;;556    					
;;;557    			strcat( displayStr, "0.");	
000036  a135              ADR      r1,|L3.268|
000038  4833              LDR      r0,|L3.264|
00003a  f7fffffe          BL       strcat
00003e  e059              B        |L3.244|
                  |L3.64|
;;;558    		else
;;;559    		{
;;;560    			for ( i = 0; i < strlen(displayStr); i++)
000040  2500              MOVS     r5,#0
000042  e00d              B        |L3.96|
                  |L3.68|
;;;561    			{
;;;562    				if( displayStr[i] == 0x2e )
000044  4830              LDR      r0,|L3.264|
000046  5d40              LDRB     r0,[r0,r5]
000048  282e              CMP      r0,#0x2e
00004a  d100              BNE      |L3.78|
;;;563    									
;;;564    					dot_loc = i;	
00004c  46a8              MOV      r8,r5
                  |L3.78|
;;;565    				
;;;566    				if( displayStr[i] == 0x2e && *strx == 0x2e )
00004e  482e              LDR      r0,|L3.264|
000050  5d40              LDRB     r0,[r0,r5]
000052  282e              CMP      r0,#0x2e
000054  d103              BNE      |L3.94|
000056  7830              LDRB     r0,[r6,#0]
000058  282e              CMP      r0,#0x2e
00005a  d100              BNE      |L3.94|
;;;567    									
;;;568    					goto rmore_point;
00005c  e04b              B        |L3.246|
                  |L3.94|
00005e  1c6d              ADDS     r5,r5,#1              ;560
                  |L3.96|
000060  4829              LDR      r0,|L3.264|
000062  f7fffffe          BL       strlen
000066  42a8              CMP      r0,r5                 ;560
000068  d8ec              BHI      |L3.68|
;;;569    			}
;;;570    			if( dot_loc == 1024 )
00006a  f5b86f80          CMP      r8,#0x400
00006e  d109              BNE      |L3.132|
;;;571    			{
;;;572    				if( strlen(displayStr) < 4 )
000070  4825              LDR      r0,|L3.264|
000072  f7fffffe          BL       strlen
000076  2804              CMP      r0,#4
000078  d20d              BCS      |L3.150|
;;;573    									
;;;574    					strcat( displayStr, strx);
00007a  4631              MOV      r1,r6
00007c  4822              LDR      r0,|L3.264|
00007e  f7fffffe          BL       strcat
000082  e008              B        |L3.150|
                  |L3.132|
;;;575    			}
;;;576    			else
;;;577    			{
;;;578    				if( strlen(displayStr) < 6 )
000084  4820              LDR      r0,|L3.264|
000086  f7fffffe          BL       strlen
00008a  2806              CMP      r0,#6
00008c  d203              BCS      |L3.150|
;;;579    											
;;;580    					strcat( displayStr, strx);
00008e  4631              MOV      r1,r6
000090  481d              LDR      r0,|L3.264|
000092  f7fffffe          BL       strcat
                  |L3.150|
;;;581    			}
;;;582    			if( SGhListR[*(key_loc+1)].focusType == 1 && ( SGhListR[*(key_loc+1)].t_Type == T_THref || SGhListR[*(key_loc+1)].t_Type == T_TLISTBOX ) )
000096  6860              LDR      r0,[r4,#4]
000098  eb0000c0          ADD      r0,r0,r0,LSL #3
00009c  4919              LDR      r1,|L3.260|
00009e  eb0100c0          ADD      r0,r1,r0,LSL #3
0000a2  6840              LDR      r0,[r0,#4]
0000a4  2801              CMP      r0,#1
0000a6  d125              BNE      |L3.244|
0000a8  6860              LDR      r0,[r4,#4]
0000aa  eb0000c0          ADD      r0,r0,r0,LSL #3
0000ae  eb0100c0          ADD      r0,r1,r0,LSL #3
0000b2  6880              LDR      r0,[r0,#8]
0000b4  2801              CMP      r0,#1
0000b6  d007              BEQ      |L3.200|
0000b8  6860              LDR      r0,[r4,#4]
0000ba  eb0000c0          ADD      r0,r0,r0,LSL #3
0000be  eb0100c0          ADD      r0,r1,r0,LSL #3
0000c2  6880              LDR      r0,[r0,#8]
0000c4  2803              CMP      r0,#3
0000c6  d115              BNE      |L3.244|
                  |L3.200|
;;;583    			{			
;;;584    				strcpy( SGhListR[*(key_loc+1)].f_SName, displayStr );	
0000c8  6861              LDR      r1,[r4,#4]
0000ca  eb0101c1          ADD      r1,r1,r1,LSL #3
0000ce  4a0d              LDR      r2,|L3.260|
0000d0  eb0201c1          ADD      r1,r2,r1,LSL #3
0000d4  f101000c          ADD      r0,r1,#0xc
0000d8  490b              LDR      r1,|L3.264|
0000da  f7fffffe          BL       strcpy
;;;585    				
;;;586    				strcpy( SGhListR[*(key_loc+1)].f_EName, displayStr );
0000de  6861              LDR      r1,[r4,#4]
0000e0  eb0101c1          ADD      r1,r1,r1,LSL #3
0000e4  4a07              LDR      r2,|L3.260|
0000e6  eb0201c1          ADD      r1,r2,r1,LSL #3
0000ea  f1010020          ADD      r0,r1,#0x20
0000ee  4906              LDR      r1,|L3.264|
0000f0  f7fffffe          BL       strcpy
                  |L3.244|
;;;587    			}					
;;;588    		}
;;;589    	}
;;;590    		rmore_point:	
0000f4  bf00              NOP      
                  |L3.246|
;;;591    		
;;;592    				WM_InvalidateWindow(hWinR);
0000f6  4806              LDR      r0,|L3.272|
0000f8  6800              LDR      r0,[r0,#0]  ; hWinR
0000fa  f7fffffe          BL       WM_InvalidateWindow
;;;593    }
0000fe  e8bd81f0          POP      {r4-r8,pc}
;;;594    
                          ENDP

000102  0000              DCW      0x0000
                  |L3.260|
                          DCD      SGhListR
                  |L3.264|
                          DCD      displayStr
                  |L3.268|
00010c  302e00            DCB      "0.",0
00010f  00                DCB      0
                  |L3.272|
                          DCD      hWinR

                          AREA ||i.R_delete_input||, CODE, READONLY, ALIGN=2

                  R_delete_input PROC
;;;634    /*  删除输入的值  */
;;;635    void R_delete_input(){
000000  b570              PUSH     {r4-r6,lr}
;;;636    	
;;;637    		int dlen = 0, flen = 0;
000002  2500              MOVS     r5,#0
000004  2600              MOVS     r6,#0
;;;638    		
;;;639    		int *key_loc;
;;;640    		
;;;641    		if( FLAG_INPUTAUTH )
000006  4828              LDR      r0,|L4.168|
000008  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
00000a  2800              CMP      r0,#0
00000c  d04a              BEQ      |L4.164|
;;;642    		{	
;;;643    				dlen = sizeof(SGhListR) / sizeof(SGhListR[0]);
00000e  2525              MOVS     r5,#0x25
;;;644    				
;;;645    				key_loc = get_id_index( SGhListR, dlen);
000010  4629              MOV      r1,r5
000012  4826              LDR      r0,|L4.172|
000014  f7fffffe          BL       get_id_index
000018  4604              MOV      r4,r0
;;;646    				
;;;647    				if( *key_loc == 0x194 )
00001a  6820              LDR      r0,[r4,#0]
00001c  f5b07fca          CMP      r0,#0x194
000020  d104              BNE      |L4.44|
;;;648    				
;;;649    						SGhListR[20].focusType = 1;
000022  2101              MOVS     r1,#1
000024  4821              LDR      r0,|L4.172|
000026  f8c015a4          STR      r1,[r0,#0x5a4]
00002a  e03b              B        |L4.164|
                  |L4.44|
;;;650    				
;;;651    				else
;;;652    				{
;;;653    						strcpy( displayStr , SGhListR[*(key_loc+1)].f_EName );
00002c  6860              LDR      r0,[r4,#4]
00002e  eb0000c0          ADD      r0,r0,r0,LSL #3
000032  4a1e              LDR      r2,|L4.172|
000034  eb0200c0          ADD      r0,r2,r0,LSL #3
000038  f1000120          ADD      r1,r0,#0x20
00003c  481c              LDR      r0,|L4.176|
00003e  f7fffffe          BL       strcpy
;;;654    					
;;;655    						if( SGhListR[*(key_loc+1)].t_Type == T_THref && ( strlen( displayStr) != 0 || displayStr[0] != '\0' ) )
000042  6860              LDR      r0,[r4,#4]
000044  eb0000c0          ADD      r0,r0,r0,LSL #3
000048  4918              LDR      r1,|L4.172|
00004a  eb0100c0          ADD      r0,r1,r0,LSL #3
00004e  6880              LDR      r0,[r0,#8]
000050  2801              CMP      r0,#1
000052  d127              BNE      |L4.164|
000054  4816              LDR      r0,|L4.176|
000056  f7fffffe          BL       strlen
00005a  b910              CBNZ     r0,|L4.98|
00005c  4814              LDR      r0,|L4.176|
00005e  7800              LDRB     r0,[r0,#0]  ; displayStr
000060  b300              CBZ      r0,|L4.164|
                  |L4.98|
;;;656    						{
;;;657    								displayStr[strlen( displayStr) - 1] = '\0'; 
000062  4813              LDR      r0,|L4.176|
000064  f7fffffe          BL       strlen
000068  1e40              SUBS     r0,r0,#1
00006a  4911              LDR      r1,|L4.176|
00006c  2200              MOVS     r2,#0
00006e  540a              STRB     r2,[r1,r0]
;;;658    								
;;;659    								strcpy( SGhListR[*(key_loc+1)].f_SName, displayStr );	
000070  6861              LDR      r1,[r4,#4]
000072  eb0101c1          ADD      r1,r1,r1,LSL #3
000076  4a0d              LDR      r2,|L4.172|
000078  eb0201c1          ADD      r1,r2,r1,LSL #3
00007c  f101000c          ADD      r0,r1,#0xc
000080  490b              LDR      r1,|L4.176|
000082  f7fffffe          BL       strcpy
;;;660    								
;;;661    								strcpy( SGhListR[*(key_loc+1)].f_EName, displayStr );	
000086  6861              LDR      r1,[r4,#4]
000088  eb0101c1          ADD      r1,r1,r1,LSL #3
00008c  4a07              LDR      r2,|L4.172|
00008e  eb0201c1          ADD      r1,r2,r1,LSL #3
000092  f1010020          ADD      r0,r1,#0x20
000096  4906              LDR      r1,|L4.176|
000098  f7fffffe          BL       strcpy
;;;662    								
;;;663    								WM_InvalidateWindow(hWinR);
00009c  4805              LDR      r0,|L4.180|
00009e  6800              LDR      r0,[r0,#0]  ; hWinR
0000a0  f7fffffe          BL       WM_InvalidateWindow
                  |L4.164|
;;;664    						}
;;;665    				}
;;;666    		}	
;;;667    
;;;668    }
0000a4  bd70              POP      {r4-r6,pc}
;;;669    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L4.168|
                          DCD      FLAG_INPUTAUTH
                  |L4.172|
                          DCD      SGhListR
                  |L4.176|
                          DCD      displayStr
                  |L4.180|
                          DCD      hWinR

                          AREA ||i.R_ent||, CODE, READONLY, ALIGN=2

                  R_ent PROC
;;;597    /*  确认键   */
;;;598    void R_ent(){
000000  b570              PUSH     {r4-r6,lr}
;;;599    	
;;;600    		int dlen = 0;
000002  2500              MOVS     r5,#0
;;;601    		
;;;602    		int *key_loc;
;;;603    		
;;;604    		if( FLAG_INPUTAUTH )
000004  481f              LDR      r0,|L5.132|
000006  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000008  b128              CBZ      r0,|L5.22|
;;;605    		{	
;;;606    				FLAG_INPUTAUTH = 0;	
00000a  2000              MOVS     r0,#0
00000c  491d              LDR      r1,|L5.132|
00000e  7008              STRB     r0,[r1,#0]
;;;607    				R_value_correct();		
000010  f7fffffe          BL       R_value_correct
000014  e034              B        |L5.128|
                  |L5.22|
;;;608    		}
;;;609    		else
;;;610    		{
;;;611    				FLAG_INPUTAUTH = 1;
000016  2001              MOVS     r0,#1
000018  491a              LDR      r1,|L5.132|
00001a  7008              STRB     r0,[r1,#0]
;;;612    				
;;;613    				dlen = sizeof( SGhListR) / sizeof( SGhListR[0]);
00001c  2525              MOVS     r5,#0x25
;;;614    				key_loc = get_id_index( SGhListR, dlen);
00001e  4629              MOV      r1,r5
000020  4819              LDR      r0,|L5.136|
000022  f7fffffe          BL       get_id_index
000026  4604              MOV      r4,r0
;;;615    				
;;;616    				if( *key_loc == 0x194 )
000028  6820              LDR      r0,[r4,#0]
00002a  f5b07fca          CMP      r0,#0x194
00002e  d104              BNE      |L5.58|
;;;617    						
;;;618    						SGhListR[20].focusType = 1;
000030  2101              MOVS     r1,#1
000032  4815              LDR      r0,|L5.136|
000034  f8c015a4          STR      r1,[r0,#0x5a4]
000038  e022              B        |L5.128|
                  |L5.58|
;;;619    				
;;;620    				else
;;;621    				{
;;;622    						memset( displayStr, '\0', sizeof( displayStr));
00003a  2114              MOVS     r1,#0x14
00003c  4813              LDR      r0,|L5.140|
00003e  f7fffffe          BL       __aeabi_memclr
;;;623    						SGhListR[*(key_loc+1)].d_BKColor = 0x00F0FFFF;
000042  4813              LDR      r0,|L5.144|
000044  6861              LDR      r1,[r4,#4]
000046  eb0101c1          ADD      r1,r1,r1,LSL #3
00004a  4a0f              LDR      r2,|L5.136|
00004c  eb0201c1          ADD      r1,r2,r1,LSL #3
000050  6388              STR      r0,[r1,#0x38]
;;;624    						strcpy( SGhListR[*(key_loc+1)].f_SName, "");
000052  6860              LDR      r0,[r4,#4]
000054  eb0000c0          ADD      r0,r0,r0,LSL #3
000058  4611              MOV      r1,r2
00005a  eb0100c0          ADD      r0,r1,r0,LSL #3
00005e  a10d              ADR      r1,|L5.148|
000060  7809              LDRB     r1,[r1,#0]
000062  7301              STRB     r1,[r0,#0xc]
;;;625    						strcpy( SGhListR[*(key_loc+1)].f_EName, "");
000064  6860              LDR      r0,[r4,#4]
000066  eb0000c0          ADD      r0,r0,r0,LSL #3
00006a  4611              MOV      r1,r2
00006c  eb0100c0          ADD      r0,r1,r0,LSL #3
000070  a108              ADR      r1,|L5.148|
000072  7809              LDRB     r1,[r1,#0]
000074  f8801020          STRB     r1,[r0,#0x20]
;;;626    						WM_InvalidateWindow(hWinR);
000078  4807              LDR      r0,|L5.152|
00007a  6800              LDR      r0,[r0,#0]  ; hWinR
00007c  f7fffffe          BL       WM_InvalidateWindow
                  |L5.128|
;;;627    				}
;;;628    		}	
;;;629    	
;;;630    }
000080  bd70              POP      {r4-r6,pc}
;;;631    
                          ENDP

000082  0000              DCW      0x0000
                  |L5.132|
                          DCD      FLAG_INPUTAUTH
                  |L5.136|
                          DCD      SGhListR
                  |L5.140|
                          DCD      displayStr
                  |L5.144|
                          DCD      0x00f0ffff
                  |L5.148|
000094  00                DCB      0
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L5.152|
                          DCD      hWinR

                          AREA ||i.R_value_correct||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  R_value_correct PROC
;;;672    /*   显示数据校准   */
;;;673    void R_value_correct(){
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  ed2d8b04          VPUSH    {d8-d9}
000008  b08b              SUB      sp,sp,#0x2c
;;;674    	
;;;675    	int dlen = 0, flen = 0, i = 0, NUM = 0, flag_null = 0; //是否为最小值
00000a  f04f0b00          MOV      r11,#0
00000e  2000              MOVS     r0,#0
000010  900a              STR      r0,[sp,#0x28]
000012  2400              MOVS     r4,#0
000014  4681              MOV      r9,r0
000016  4680              MOV      r8,r0
;;;676    	
;;;677    	int *key_loc;
;;;678    	
;;;679    	int temp, temp_int, dot_loc = 1024;  //是否具有小数点  1024---无   其余---小数点位置
000018  f44f6680          MOV      r6,#0x400
;;;680    	
;;;681    	char temp_char[10];
;;;682    	
;;;683    	float temp_float;
;;;684    	
;;;685    	char int_char[10], float_char[10];
;;;686    	
;;;687    	vu8 flag_dot = 0;
00001c  9000              STR      r0,[sp,#0]
;;;688    	
;;;689    	if( !FLAG_INPUTAUTH ){
00001e  48f6              LDR      r0,|L6.1016|
000020  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000022  2800              CMP      r0,#0
000024  d10f              BNE      |L6.70|
;;;690    		
;;;691    		dlen = sizeof(SGhListR) / sizeof(SGhListR[0]);
000026  f04f0b25          MOV      r11,#0x25
;;;692    		
;;;693    		key_loc = get_id_index( SGhListR, dlen);
00002a  4659              MOV      r1,r11
00002c  48f3              LDR      r0,|L6.1020|
00002e  f7fffffe          BL       get_id_index
000032  4682              MOV      r10,r0
;;;694    		
;;;695    		if( *key_loc == 0x194 )
000034  f8da0000          LDR      r0,[r10,#0]
000038  f5b07fca          CMP      r0,#0x194
00003c  d104              BNE      |L6.72|
;;;696    		
;;;697    				SGhListR[20].focusType = 1;
00003e  2101              MOVS     r1,#1
000040  48ee              LDR      r0,|L6.1020|
000042  f8c015a4          STR      r1,[r0,#0x5a4]
                  |L6.70|
000046  e3da              B        |L6.2046|
                  |L6.72|
;;;698    		else
;;;699    		{
;;;700    				temp = *(key_loc+1);
000048  f8da7004          LDR      r7,[r10,#4]
;;;701    				
;;;702    				strcpy( displayStr , SGhListR[temp].f_EName );
00004c  eb0700c7          ADD      r0,r7,r7,LSL #3
000050  4aea              LDR      r2,|L6.1020|
000052  eb0200c0          ADD      r0,r2,r0,LSL #3
000056  f1000120          ADD      r1,r0,#0x20
00005a  48e9              LDR      r0,|L6.1024|
00005c  f7fffffe          BL       strcpy
;;;703    				
;;;704    				if( (displayStr[0] == '\0' || strlen(displayStr) == 0) && SGhListR[temp].t_Type == T_THref ){
000060  48e7              LDR      r0,|L6.1024|
000062  7800              LDRB     r0,[r0,#0]  ; displayStr
000064  b118              CBZ      r0,|L6.110|
000066  48e6              LDR      r0,|L6.1024|
000068  f7fffffe          BL       strlen
00006c  b940              CBNZ     r0,|L6.128|
                  |L6.110|
00006e  eb0700c7          ADD      r0,r7,r7,LSL #3
000072  49e2              LDR      r1,|L6.1020|
000074  eb0100c0          ADD      r0,r1,r0,LSL #3
000078  6880              LDR      r0,[r0,#8]
00007a  2801              CMP      r0,#1
00007c  d100              BNE      |L6.128|
;;;705    					
;;;706    					flag_null = 1;
00007e  4680              MOV      r8,r0
                  |L6.128|
;;;707    					
;;;708    				}
;;;709    
;;;710    				temp_int = atoi(displayStr);   //转为整数
000080  48df              LDR      r0,|L6.1024|
000082  f7fffffe          BL       atoi
000086  4605              MOV      r5,r0
;;;711    				
;;;712    				temp_float = atof(displayStr);  //转为浮点数
000088  48dd              LDR      r0,|L6.1024|
00008a  f7fffffe          BL       __hardfp_atof
00008e  eeb09a40          VMOV.F32 s18,s0
000092  eef09a60          VMOV.F32 s19,s1
000096  ec510b19          VMOV     r0,r1,d9
00009a  f7fffffe          BL       __aeabi_d2f
00009e  ee080a10          VMOV     s16,r0
;;;713    				
;;;714    				memset( temp_char, '\0', sizeof(temp_char));
0000a2  2000              MOVS     r0,#0
0000a4  9007              STR      r0,[sp,#0x1c]
0000a6  9008              STR      r0,[sp,#0x20]
0000a8  9009              STR      r0,[sp,#0x24]
;;;715    				
;;;716    				memset( int_char, '\0', sizeof(int_char));
0000aa  9004              STR      r0,[sp,#0x10]
0000ac  9005              STR      r0,[sp,#0x14]
0000ae  9006              STR      r0,[sp,#0x18]
;;;717    				
;;;718    				memset( float_char, '\0', sizeof(float_char));
0000b0  9001              STR      r0,[sp,#4]
0000b2  9002              STR      r0,[sp,#8]
0000b4  9003              STR      r0,[sp,#0xc]
;;;719    				
;;;720    				sprintf(int_char, "%d", temp_int);
0000b6  462a              MOV      r2,r5
0000b8  a1d2              ADR      r1,|L6.1028|
0000ba  a804              ADD      r0,sp,#0x10
0000bc  f7fffffe          BL       __2sprintf
;;;721    				
;;;722    				sprintf(float_char, "%f", temp_float);
0000c0  ee180a10          VMOV     r0,s16
0000c4  f7fffffe          BL       __aeabi_f2d
0000c8  ec410b19          VMOV     d9,r0,r1
0000cc  ec532b19          VMOV     r2,r3,d9
0000d0  a1cd              ADR      r1,|L6.1032|
0000d2  a801              ADD      r0,sp,#4
0000d4  f7fffffe          BL       __2sprintf
;;;723    				
;;;724    				for( i = 0; i < strlen(displayStr); i++  ){  
0000d8  2400              MOVS     r4,#0
0000da  e007              B        |L6.236|
                  |L6.220|
;;;725    				
;;;726    					if( displayStr[i] == 0x2e ){	
0000dc  48c8              LDR      r0,|L6.1024|
0000de  5d00              LDRB     r0,[r0,r4]
0000e0  282e              CMP      r0,#0x2e
0000e2  d102              BNE      |L6.234|
;;;727    					
;;;728    						flag_dot = 1;	
0000e4  2001              MOVS     r0,#1
0000e6  9000              STR      r0,[sp,#0]
;;;729    						
;;;730    						break;
0000e8  e005              B        |L6.246|
                  |L6.234|
0000ea  1c64              ADDS     r4,r4,#1              ;724
                  |L6.236|
0000ec  48c4              LDR      r0,|L6.1024|
0000ee  f7fffffe          BL       strlen
0000f2  42a0              CMP      r0,r4                 ;724
0000f4  d8f2              BHI      |L6.220|
                  |L6.246|
0000f6  bf00              NOP      
;;;731    					}			
;;;732    				}
;;;733    				
;;;734    				for( i = 0; i < strlen(float_char); i++  ){  
0000f8  2400              MOVS     r4,#0
0000fa  e006              B        |L6.266|
                  |L6.252|
;;;735    					if( float_char[i] == 0x2e ){
0000fc  a801              ADD      r0,sp,#4
0000fe  5d00              LDRB     r0,[r0,r4]
000100  282e              CMP      r0,#0x2e
000102  d101              BNE      |L6.264|
;;;736    						
;;;737    						dot_loc = i;
000104  4626              MOV      r6,r4
;;;738    						
;;;739    						break;
000106  e005              B        |L6.276|
                  |L6.264|
000108  1c64              ADDS     r4,r4,#1              ;734
                  |L6.266|
00010a  a801              ADD      r0,sp,#4              ;734
00010c  f7fffffe          BL       strlen
000110  42a0              CMP      r0,r4                 ;734
000112  d8f3              BHI      |L6.252|
                  |L6.276|
000114  bf00              NOP      
;;;740    						
;;;741    					}			
;;;742    				}
;;;743    				
;;;744    				switch( SGhListR[temp].d_ID ){
000116  eb0700c7          ADD      r0,r7,r7,LSL #3
00011a  49b8              LDR      r1,|L6.1020|
00011c  f8510030          LDR      r0,[r1,r0,LSL #3]
000120  1ec0              SUBS     r0,r0,#3
000122  2806              CMP      r0,#6
000124  d227              BCS      |L6.374|
000126  e8dff000          TBB      [pc,r0]
00012a  03b1              DCB      0x03,0xb1
00012c  f2f1f0ef          DCB      0xf2,0xf1,0xf0,0xef
;;;745    					
;;;746    					case 3:   
;;;747    					
;;;748    					//====================================起始电流======================================
;;;749    						if( flag_null ){
000130  f1b80f00          CMP      r8,#0
000134  d00c              BEQ      |L6.336|
;;;750    							
;;;751    							strcpy( displayStr, "0.000"  );	
000136  a1b5              ADR      r1,|L6.1036|
000138  48b1              LDR      r0,|L6.1024|
00013a  f7fffffe          BL       strcpy
;;;752    							
;;;753    							CLists.IR_Start_C = 0 * 1000;	
00013e  2000              MOVS     r0,#0
000140  49b4              LDR      r1,|L6.1044|
000142  f8a100d4          STRH     r0,[r1,#0xd4]
;;;754    							
;;;755    							CLists.CSET_Current_Laod =  CLists.IR_Start_C;
000146  4608              MOV      r0,r1
000148  f8b000d4          LDRH     r0,[r0,#0xd4]  ; CLists
00014c  6148              STR      r0,[r1,#0x14]  ; CLists
00014e  e09c              B        |L6.650|
                  |L6.336|
;;;756    							
;;;757    						}else{	
;;;758    						
;;;759    							if( !flag_dot ){    
000150  f89d0000          LDRB     r0,[sp,#0]
000154  2800              CMP      r0,#0
000156  d140              BNE      |L6.474|
;;;760    							
;;;761    								if( temp_int > 30  ){
000158  2d1e              CMP      r5,#0x1e
00015a  dd0d              BLE      |L6.376|
;;;762    									
;;;763    									strcpy( displayStr, "30.000"  );	
00015c  a1ae              ADR      r1,|L6.1048|
00015e  48a8              LDR      r0,|L6.1024|
000160  f7fffffe          BL       strcpy
;;;764    									
;;;765    									CLists.IR_Start_C = 30 * 1000;
000164  f2475030          MOV      r0,#0x7530
000168  49aa              LDR      r1,|L6.1044|
00016a  f8a100d4          STRH     r0,[r1,#0xd4]
;;;766    									
;;;767    									CLists.CSET_Current_Laod =  CLists.IR_Start_C;
00016e  4608              MOV      r0,r1
000170  f8b000d4          LDRH     r0,[r0,#0xd4]  ; CLists
000174  6148              STR      r0,[r1,#0x14]  ; CLists
                  |L6.374|
;;;768    									
;;;769    									break;		
000176  e325              B        |L6.1988|
                  |L6.376|
;;;770    								}
;;;771    								
;;;772    								if( temp_int <= 0  ){  
000178  2d00              CMP      r5,#0
00017a  dc0c              BGT      |L6.406|
;;;773    								
;;;774    									strcpy( displayStr, "0.000"  );
00017c  a1a3              ADR      r1,|L6.1036|
00017e  48a0              LDR      r0,|L6.1024|
000180  f7fffffe          BL       strcpy
;;;775    									
;;;776    									CLists.IR_Start_C = 0 * 1000;
000184  2000              MOVS     r0,#0
000186  49a3              LDR      r1,|L6.1044|
000188  f8a100d4          STRH     r0,[r1,#0xd4]
;;;777    									
;;;778    									CLists.CSET_Current_Laod =  CLists.IR_Start_C;
00018c  4608              MOV      r0,r1
00018e  f8b000d4          LDRH     r0,[r0,#0xd4]  ; CLists
000192  6148              STR      r0,[r1,#0x14]  ; CLists
;;;779    									
;;;780    									break;		
000194  e316              B        |L6.1988|
                  |L6.406|
;;;781    								}		
;;;782    								
;;;783    								if( strlen(int_char) > 2){		strcat( int_char, ".0"	);		}
000196  a804              ADD      r0,sp,#0x10
000198  f7fffffe          BL       strlen
00019c  2802              CMP      r0,#2
00019e  d904              BLS      |L6.426|
0001a0  a19f              ADR      r1,|L6.1056|
0001a2  a804              ADD      r0,sp,#0x10
0001a4  f7fffffe          BL       strcat
0001a8  e003              B        |L6.434|
                  |L6.426|
;;;784    								
;;;785    								else{		strcat( int_char, ".000");		}
0001aa  a19e              ADR      r1,|L6.1060|
0001ac  a804              ADD      r0,sp,#0x10
0001ae  f7fffffe          BL       strcat
                  |L6.434|
;;;786    								
;;;787    								strcpy( displayStr, int_char );	
0001b2  a904              ADD      r1,sp,#0x10
0001b4  4892              LDR      r0,|L6.1024|
0001b6  f7fffffe          BL       strcpy
;;;788    
;;;789    								CLists.IR_Start_C = temp_int * 1000;
0001ba  eb050045          ADD      r0,r5,r5,LSL #1
0001be  ebc010c5          RSB      r0,r0,r5,LSL #7
0001c2  f64f71ff          MOV      r1,#0xffff
0001c6  ea0100c0          AND      r0,r1,r0,LSL #3
0001ca  4992              LDR      r1,|L6.1044|
0001cc  f8a100d4          STRH     r0,[r1,#0xd4]
;;;790    								
;;;791    								CLists.CSET_Current_Laod =  CLists.IR_Start_C;
0001d0  4608              MOV      r0,r1
0001d2  f8b000d4          LDRH     r0,[r0,#0xd4]  ; CLists
0001d6  6148              STR      r0,[r1,#0x14]  ; CLists
0001d8  e057              B        |L6.650|
                  |L6.474|
;;;792    								
;;;793    							}
;;;794    							else
;;;795    							{
;;;796    
;;;797    								if( temp_float - 30 > 0 ){		
0001da  eeb30a0e          VMOV.F32 s0,#30.00000000
0001de  ee380a40          VSUB.F32 s0,s16,s0
0001e2  eeb50ac0          VCMPE.F32 s0,#0.0
0001e6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001ea  dd0d              BLE      |L6.520|
;;;798    								
;;;799    									strcpy( displayStr, "30.000"  );		
0001ec  a18a              ADR      r1,|L6.1048|
0001ee  4884              LDR      r0,|L6.1024|
0001f0  f7fffffe          BL       strcpy
;;;800    									
;;;801    									CLists.IR_Start_C = 30 * 1000;		
0001f4  f2475030          MOV      r0,#0x7530
0001f8  4986              LDR      r1,|L6.1044|
0001fa  f8a100d4          STRH     r0,[r1,#0xd4]
;;;802    									
;;;803    									CLists.CSET_Current_Laod =  CLists.IR_Start_C;
0001fe  4608              MOV      r0,r1
000200  f8b000d4          LDRH     r0,[r0,#0xd4]  ; CLists
000204  6148              STR      r0,[r1,#0x14]  ; CLists
;;;804    									
;;;805    									break;		
000206  e2dd              B        |L6.1988|
                  |L6.520|
;;;806    								}
;;;807    								
;;;808    								if( temp_float <= 0     ){  
000208  eeb58ac0          VCMPE.F32 s16,#0.0
00020c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000210  d80c              BHI      |L6.556|
;;;809    								
;;;810    									strcpy( displayStr, "0.000"  );	
000212  a17e              ADR      r1,|L6.1036|
000214  487a              LDR      r0,|L6.1024|
000216  f7fffffe          BL       strcpy
;;;811    									
;;;812    									CLists.IR_Start_C = 0 * 1000;	
00021a  2000              MOVS     r0,#0
00021c  497d              LDR      r1,|L6.1044|
00021e  f8a100d4          STRH     r0,[r1,#0xd4]
;;;813    									
;;;814    									CLists.CSET_Current_Laod =  CLists.IR_Start_C;
000222  4608              MOV      r0,r1
000224  f8b000d4          LDRH     r0,[r0,#0xd4]  ; CLists
000228  6148              STR      r0,[r1,#0x14]  ; CLists
;;;815    									
;;;816    									break;		
00022a  e2cb              B        |L6.1988|
                  |L6.556|
;;;817    								}
;;;818    								
;;;819    								//字符串    字符串指针首位    几位数
;;;820    								//strncpy( temp_decimals, displayStr + dot_loc + 1, strlen(displayStr) - dot_loc - 1  );
;;;821    								
;;;822    								NUM = strlen(float_char) - dot_loc - 1;
00022c  a801              ADD      r0,sp,#4
00022e  f7fffffe          BL       strlen
000232  1b80              SUBS     r0,r0,r6
000234  f1a00901          SUB      r9,r0,#1
;;;823    								
;;;824    								for( i = 0; i < 3 - NUM; i++ ){	strcat( float_char, "0");	}
000238  2400              MOVS     r4,#0
00023a  e004              B        |L6.582|
                  |L6.572|
00023c  a174              ADR      r1,|L6.1040|
00023e  a801              ADD      r0,sp,#4
000240  f7fffffe          BL       strcat
000244  1c64              ADDS     r4,r4,#1
                  |L6.582|
000246  f1c90003          RSB      r0,r9,#3
00024a  42a0              CMP      r0,r4
00024c  dcf6              BGT      |L6.572|
;;;825    								
;;;826    								NUM = ( dot_loc > 1 ) ? 6 : 5;	
00024e  2e01              CMP      r6,#1
000250  dd01              BLE      |L6.598|
000252  2006              MOVS     r0,#6
000254  e000              B        |L6.600|
                  |L6.598|
000256  2005              MOVS     r0,#5
                  |L6.600|
000258  4681              MOV      r9,r0
;;;827    								
;;;828    								strncpy( int_char, float_char, NUM );
00025a  464a              MOV      r2,r9
00025c  a901              ADD      r1,sp,#4
00025e  a804              ADD      r0,sp,#0x10
000260  f7fffffe          BL       strncpy
;;;829    								
;;;830    								strcpy( displayStr, int_char );			
000264  a904              ADD      r1,sp,#0x10
000266  4866              LDR      r0,|L6.1024|
000268  f7fffffe          BL       strcpy
;;;831    								
;;;832    								CLists.IR_Start_C = temp_float * 1000;	
00026c  ed9f0a6f          VLDR     s0,|L6.1068|
000270  ee280a00          VMUL.F32 s0,s16,s0
000274  eebc0ac0          VCVT.U32.F32 s0,s0
000278  ee100a10          VMOV     r0,s0
00027c  4965              LDR      r1,|L6.1044|
00027e  f8a100d4          STRH     r0,[r1,#0xd4]
;;;833    
;;;834    								CLists.CSET_Current_Laod =  CLists.IR_Start_C;						
000282  4608              MOV      r0,r1
000284  f8b000d4          LDRH     r0,[r0,#0xd4]  ; CLists
000288  6148              STR      r0,[r1,#0x14]  ; CLists
                  |L6.650|
;;;835    							}			
;;;836    						}			
;;;837    						
;;;838    					break;	
00028a  e29b              B        |L6.1988|
;;;839    					
;;;840    					case 4:
;;;841    					//====================================步进电流======================================
;;;842    						if( flag_null ){   
00028c  f1b80f00          CMP      r8,#0
000290  d008              BEQ      |L6.676|
;;;843    						
;;;844    							strcpy( displayStr, "0.000"  );
000292  a15e              ADR      r1,|L6.1036|
000294  485a              LDR      r0,|L6.1024|
000296  f7fffffe          BL       strcpy
;;;845    							
;;;846    							CLists.IR_Step_C = 0 * 1000;	
00029a  2000              MOVS     r0,#0
00029c  495d              LDR      r1,|L6.1044|
00029e  f8a100d6          STRH     r0,[r1,#0xd6]
0002a2  e082              B        |L6.938|
                  |L6.676|
;;;847    							
;;;848    						}else{
;;;849    							
;;;850    							if( !flag_dot ){      
0002a4  f89d0000          LDRB     r0,[sp,#0]
0002a8  bb90              CBNZ     r0,|L6.784|
;;;851    								
;;;852    								if( temp_int > 30  ){   //最大值
0002aa  2d1e              CMP      r5,#0x1e
0002ac  dd09              BLE      |L6.706|
;;;853    								
;;;854    									strcpy( displayStr, "30.000"  );
0002ae  a15a              ADR      r1,|L6.1048|
0002b0  4853              LDR      r0,|L6.1024|
0002b2  f7fffffe          BL       strcpy
;;;855    									
;;;856    									CLists.IR_Step_C = 30 * 1000;	
0002b6  f2475030          MOV      r0,#0x7530
0002ba  4956              LDR      r1,|L6.1044|
0002bc  f8a100d6          STRH     r0,[r1,#0xd6]
;;;857    									
;;;858    									break;
0002c0  e280              B        |L6.1988|
                  |L6.706|
;;;859    								}
;;;860    								if( temp_int == 0 ){    //最小值
0002c2  b945              CBNZ     r5,|L6.726|
;;;861    								
;;;862    									strcpy( displayStr, "0.000"  );
0002c4  a151              ADR      r1,|L6.1036|
0002c6  484e              LDR      r0,|L6.1024|
0002c8  f7fffffe          BL       strcpy
;;;863    									
;;;864    									CLists.IR_Step_C = 0 * 1000;	
0002cc  2000              MOVS     r0,#0
0002ce  4951              LDR      r1,|L6.1044|
0002d0  f8a100d6          STRH     r0,[r1,#0xd6]
;;;865    									
;;;866    									break;
0002d4  e276              B        |L6.1988|
                  |L6.726|
;;;867    								}	
;;;868    								if( strlen(int_char) > 2){
0002d6  a804              ADD      r0,sp,#0x10
0002d8  f7fffffe          BL       strlen
0002dc  2802              CMP      r0,#2
0002de  d904              BLS      |L6.746|
;;;869    									
;;;870    									strcat( int_char, ".0");
0002e0  a14f              ADR      r1,|L6.1056|
0002e2  a804              ADD      r0,sp,#0x10
0002e4  f7fffffe          BL       strcat
0002e8  e003              B        |L6.754|
                  |L6.746|
;;;871    									
;;;872    								}else{
;;;873    									
;;;874    									strcat( int_char, ".000");
0002ea  a14e              ADR      r1,|L6.1060|
0002ec  a804              ADD      r0,sp,#0x10
0002ee  f7fffffe          BL       strcat
                  |L6.754|
;;;875    									
;;;876    								}
;;;877    								
;;;878    								strcpy( displayStr, int_char );
0002f2  a904              ADD      r1,sp,#0x10
0002f4  4842              LDR      r0,|L6.1024|
0002f6  f7fffffe          BL       strcpy
;;;879    								
;;;880    								temp_int = temp_int * 1000;	
0002fa  f44f707a          MOV      r0,#0x3e8
0002fe  4345              MULS     r5,r0,r5
;;;881    								
;;;882    								CLists.IR_Step_C = temp_int;
000300  4944              LDR      r1,|L6.1044|
000302  f8a150d6          STRH     r5,[r1,#0xd6]
000306  e050              B        |L6.938|
000308  e1ee              B        |L6.1768|
00030a  e186              B        |L6.1562|
00030c  e100              B        |L6.1296|
00030e  e04d              B        |L6.940|
                  |L6.784|
000310  e7ff              B        |L6.786|
                  |L6.786|
;;;883    								
;;;884    							}else{
;;;885    					
;;;886    								if( temp_float - 30 > 0 ){   //最大值
000312  eeb30a0e          VMOV.F32 s0,#30.00000000
000316  ee380a40          VSUB.F32 s0,s16,s0
00031a  eeb50ac0          VCMPE.F32 s0,#0.0
00031e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000322  dd09              BLE      |L6.824|
;;;887    								
;;;888    									strcpy( displayStr, "30.000"  );
000324  a13c              ADR      r1,|L6.1048|
000326  4836              LDR      r0,|L6.1024|
000328  f7fffffe          BL       strcpy
;;;889    									
;;;890    									CLists.IR_Step_C = 30 * 1000;	
00032c  f2475030          MOV      r0,#0x7530
000330  4938              LDR      r1,|L6.1044|
000332  f8a100d6          STRH     r0,[r1,#0xd6]
;;;891    									
;;;892    									break;
000336  e245              B        |L6.1988|
                  |L6.824|
;;;893    								}
;;;894    								
;;;895    								if( temp_float <= 0 ){    //最小值
000338  eeb58ac0          VCMPE.F32 s16,#0.0
00033c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000340  d808              BHI      |L6.852|
;;;896    								
;;;897    									strcpy( displayStr, "0.000"  );
000342  a132              ADR      r1,|L6.1036|
000344  482e              LDR      r0,|L6.1024|
000346  f7fffffe          BL       strcpy
;;;898    									
;;;899    									CLists.IR_Step_C = 0 * 1000;	
00034a  2000              MOVS     r0,#0
00034c  4931              LDR      r1,|L6.1044|
00034e  f8a100d6          STRH     r0,[r1,#0xd6]
;;;900    									
;;;901    									break;
000352  e237              B        |L6.1988|
                  |L6.852|
;;;902    								}
;;;903    								
;;;904    								NUM = strlen(float_char) - dot_loc - 1;
000354  a801              ADD      r0,sp,#4
000356  f7fffffe          BL       strlen
00035a  1b80              SUBS     r0,r0,r6
00035c  f1a00901          SUB      r9,r0,#1
;;;905    								
;;;906    								for( i = 0; i < 3 - NUM; i++ ){
000360  2400              MOVS     r4,#0
000362  e004              B        |L6.878|
                  |L6.868|
;;;907    									
;;;908    									strcat( float_char, "0");
000364  a12a              ADR      r1,|L6.1040|
000366  a801              ADD      r0,sp,#4
000368  f7fffffe          BL       strcat
00036c  1c64              ADDS     r4,r4,#1              ;906
                  |L6.878|
00036e  f1c90003          RSB      r0,r9,#3              ;906
000372  42a0              CMP      r0,r4                 ;906
000374  dcf6              BGT      |L6.868|
;;;909    									
;;;910    								}
;;;911    								
;;;912    								NUM = ( dot_loc > 1 ) ? 6 : 5;
000376  2e01              CMP      r6,#1
000378  dd01              BLE      |L6.894|
00037a  2006              MOVS     r0,#6
00037c  e000              B        |L6.896|
                  |L6.894|
00037e  2005              MOVS     r0,#5
                  |L6.896|
000380  4681              MOV      r9,r0
;;;913    								
;;;914    								strncpy( int_char, float_char, NUM );
000382  464a              MOV      r2,r9
000384  a901              ADD      r1,sp,#4
000386  a804              ADD      r0,sp,#0x10
000388  f7fffffe          BL       strncpy
;;;915    								
;;;916    								strcpy( displayStr, int_char );		
00038c  a904              ADD      r1,sp,#0x10
00038e  481c              LDR      r0,|L6.1024|
000390  f7fffffe          BL       strcpy
;;;917    								
;;;918    								CLists.IR_Step_C = temp_float * 1000;
000394  ed9f0a25          VLDR     s0,|L6.1068|
000398  ee280a00          VMUL.F32 s0,s16,s0
00039c  eebc0ac0          VCVT.U32.F32 s0,s0
0003a0  ee100a10          VMOV     r0,s0
0003a4  491b              LDR      r1,|L6.1044|
0003a6  f8a100d6          STRH     r0,[r1,#0xd6]
                  |L6.938|
;;;919    								
;;;920    							}
;;;921    						}				
;;;922    						
;;;923    					break;
0003aa  e20b              B        |L6.1988|
                  |L6.940|
;;;924    					
;;;925    					case 5:
;;;926    					//====================================门槛电压======================================
;;;927    						if( flag_null ){  
0003ac  f1b80f00          CMP      r8,#0
0003b0  d008              BEQ      |L6.964|
;;;928    						
;;;929    							strcpy( displayStr, "0.000"  );
0003b2  a116              ADR      r1,|L6.1036|
0003b4  4812              LDR      r0,|L6.1024|
0003b6  f7fffffe          BL       strcpy
;;;930    							
;;;931    							CLists.IR_Threshold_V = 0 * 1000;
0003ba  2000              MOVS     r0,#0
0003bc  4915              LDR      r1,|L6.1044|
0003be  f8c100d8          STR      r0,[r1,#0xd8]  ; CLists
0003c2  e0a4              B        |L6.1294|
                  |L6.964|
;;;932    							
;;;933    						}else{
;;;934    							
;;;935    							if( !flag_dot ){      		
0003c4  f89d0000          LDRB     r0,[sp,#0]
0003c8  bbb0              CBNZ     r0,|L6.1080|
;;;936    								
;;;937    								if( temp_int > 60  ){   //最大值
0003ca  2d3c              CMP      r5,#0x3c
0003cc  dd09              BLE      |L6.994|
;;;938    								
;;;939    									strcpy( displayStr, "60.000"  );
0003ce  a118              ADR      r1,|L6.1072|
0003d0  480b              LDR      r0,|L6.1024|
0003d2  f7fffffe          BL       strcpy
;;;940    									
;;;941    									CLists.IR_Threshold_V = 60 * 1000;
0003d6  f64e2060          MOV      r0,#0xea60
0003da  490e              LDR      r1,|L6.1044|
0003dc  f8c100d8          STR      r0,[r1,#0xd8]  ; CLists
;;;942    									
;;;943    									break;
0003e0  e1f0              B        |L6.1988|
                  |L6.994|
;;;944    								}
;;;945    								if( temp_int <= 0 ){    //最小值
0003e2  2d00              CMP      r5,#0
0003e4  dc29              BGT      |L6.1082|
;;;946    								
;;;947    									strcpy( displayStr, "0.000"  );
0003e6  a109              ADR      r1,|L6.1036|
0003e8  4805              LDR      r0,|L6.1024|
0003ea  f7fffffe          BL       strcpy
;;;948    									
;;;949    									CLists.IR_Threshold_V = 0 * 1000;
0003ee  2000              MOVS     r0,#0
0003f0  4908              LDR      r1,|L6.1044|
0003f2  f8c100d8          STR      r0,[r1,#0xd8]  ; CLists
;;;950    									
;;;951    									break;
0003f6  e1e5              B        |L6.1988|
                  |L6.1016|
                          DCD      FLAG_INPUTAUTH
                  |L6.1020|
                          DCD      SGhListR
                  |L6.1024|
                          DCD      displayStr
                  |L6.1028|
000404  256400            DCB      "%d",0
000407  00                DCB      0
                  |L6.1032|
000408  256600            DCB      "%f",0
00040b  00                DCB      0
                  |L6.1036|
00040c  302e3030          DCB      "0.00"
                  |L6.1040|
000410  3000              DCB      "0",0
000412  00                DCB      0
000413  00                DCB      0
                  |L6.1044|
                          DCD      CLists
                  |L6.1048|
000418  33302e30          DCB      "30.000",0
00041c  303000  
00041f  00                DCB      0
                  |L6.1056|
000420  2e3000            DCB      ".0",0
000423  00                DCB      0
                  |L6.1060|
000424  2e303030          DCB      ".000",0
000428  00      
000429  00                DCB      0
00042a  00                DCB      0
00042b  00                DCB      0
                  |L6.1068|
00042c  447a0000          DCFS     0x447a0000 ; 1000
                  |L6.1072|
000430  36302e30          DCB      "60.000",0
000434  303000  
000437  00                DCB      0
                  |L6.1080|
000438  e01a              B        |L6.1136|
                  |L6.1082|
;;;952    								}						
;;;953    								if( strlen(int_char) > 2){
00043a  a804              ADD      r0,sp,#0x10
00043c  f7fffffe          BL       strlen
000440  2802              CMP      r0,#2
000442  d905              BLS      |L6.1104|
;;;954    									
;;;955    									strcat( int_char, ".0");
000444  f2af0128          ADR      r1,|L6.1056|
000448  a804              ADD      r0,sp,#0x10
00044a  f7fffffe          BL       strcat
00044e  e004              B        |L6.1114|
                  |L6.1104|
;;;956    									
;;;957    								}else{
;;;958    									
;;;959    									strcat( int_char, ".000");
000450  f2af0130          ADR      r1,|L6.1060|
000454  a804              ADD      r0,sp,#0x10
000456  f7fffffe          BL       strcat
                  |L6.1114|
;;;960    								}
;;;961    								
;;;962    								strcpy( displayStr, int_char );
00045a  a904              ADD      r1,sp,#0x10
00045c  48ee              LDR      r0,|L6.2072|
00045e  f7fffffe          BL       strcpy
;;;963    								
;;;964    								temp_int = temp_int * 1000;	
000462  f44f707a          MOV      r0,#0x3e8
000466  4345              MULS     r5,r0,r5
;;;965    								
;;;966    								CLists.IR_Threshold_V = temp_int;
000468  48ec              LDR      r0,|L6.2076|
00046a  f8c050d8          STR      r5,[r0,#0xd8]  ; CLists
00046e  e04e              B        |L6.1294|
                  |L6.1136|
;;;967    								
;;;968    							}else{
;;;969    								
;;;970    								if( temp_float - 60 > 0 ){   //最大值
000470  ed9f0aeb          VLDR     s0,|L6.2080|
000474  ee380a40          VSUB.F32 s0,s16,s0
000478  eeb50ac0          VCMPE.F32 s0,#0.0
00047c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000480  dd0a              BLE      |L6.1176|
;;;971    								
;;;972    									strcpy( displayStr, "60.000"  );
000482  f2af0154          ADR      r1,|L6.1072|
000486  48e4              LDR      r0,|L6.2072|
000488  f7fffffe          BL       strcpy
;;;973    									
;;;974    									CLists.IR_Threshold_V = 60 * 1000;
00048c  f64e2060          MOV      r0,#0xea60
000490  49e2              LDR      r1,|L6.2076|
000492  f8c100d8          STR      r0,[r1,#0xd8]  ; CLists
;;;975    									
;;;976    									break;
000496  e195              B        |L6.1988|
                  |L6.1176|
;;;977    								}
;;;978    								if( temp_float <= 0 ){    //最小值
000498  eeb58ac0          VCMPE.F32 s16,#0.0
00049c  eef1fa10          VMRS     APSR_nzcv,FPSCR
0004a0  d809              BHI      |L6.1206|
;;;979    								
;;;980    									strcpy( displayStr, "0.000"  );
0004a2  f2af0198          ADR      r1,|L6.1036|
0004a6  48dc              LDR      r0,|L6.2072|
0004a8  f7fffffe          BL       strcpy
;;;981    									
;;;982    									CLists.IR_Threshold_V = 0 * 1000;
0004ac  2000              MOVS     r0,#0
0004ae  49db              LDR      r1,|L6.2076|
0004b0  f8c100d8          STR      r0,[r1,#0xd8]  ; CLists
;;;983    									
;;;984    									break;
0004b4  e186              B        |L6.1988|
                  |L6.1206|
;;;985    								}
;;;986    								
;;;987    								NUM = strlen(float_char) - dot_loc - 1;
0004b6  a801              ADD      r0,sp,#4
0004b8  f7fffffe          BL       strlen
0004bc  1b80              SUBS     r0,r0,r6
0004be  f1a00901          SUB      r9,r0,#1
;;;988    								
;;;989    								for( i = 0; i < 3 - NUM; i++ ){
0004c2  2400              MOVS     r4,#0
0004c4  e005              B        |L6.1234|
                  |L6.1222|
;;;990    									
;;;991    									strcat( float_char, "0");
0004c6  f2af01b8          ADR      r1,|L6.1040|
0004ca  a801              ADD      r0,sp,#4
0004cc  f7fffffe          BL       strcat
0004d0  1c64              ADDS     r4,r4,#1              ;989
                  |L6.1234|
0004d2  f1c90003          RSB      r0,r9,#3              ;989
0004d6  42a0              CMP      r0,r4                 ;989
0004d8  dcf5              BGT      |L6.1222|
;;;992    									
;;;993    								}	
;;;994    								
;;;995    								NUM = ( dot_loc > 1 ) ? 6 : 5;
0004da  2e01              CMP      r6,#1
0004dc  dd01              BLE      |L6.1250|
0004de  2006              MOVS     r0,#6
0004e0  e000              B        |L6.1252|
                  |L6.1250|
0004e2  2005              MOVS     r0,#5
                  |L6.1252|
0004e4  4681              MOV      r9,r0
;;;996    								
;;;997    								strncpy( int_char, float_char, NUM );
0004e6  464a              MOV      r2,r9
0004e8  a901              ADD      r1,sp,#4
0004ea  a804              ADD      r0,sp,#0x10
0004ec  f7fffffe          BL       strncpy
;;;998    								
;;;999    								strcpy( displayStr, int_char );	
0004f0  a904              ADD      r1,sp,#0x10
0004f2  48c9              LDR      r0,|L6.2072|
0004f4  f7fffffe          BL       strcpy
;;;1000   								
;;;1001   								CLists.IR_Threshold_V = temp_float * 1000;
0004f8  ed1f0a34          VLDR     s0,|L6.1068|
0004fc  ee280a00          VMUL.F32 s0,s16,s0
000500  eebc0ac0          VCVT.U32.F32 s0,s0
000504  ee100a10          VMOV     r0,s0
000508  49c4              LDR      r1,|L6.2076|
00050a  f8c100d8          STR      r0,[r1,#0xd8]  ; CLists
                  |L6.1294|
;;;1002   							}
;;;1003   						}
;;;1004   					
;;;1005   					break;
00050e  e159              B        |L6.1988|
                  |L6.1296|
;;;1006   					
;;;1007   					case 6:
;;;1008   					//====================================步进时间======================================
;;;1009   						if( flag_null ){ 
000510  f1b80f00          CMP      r8,#0
000514  d008              BEQ      |L6.1320|
;;;1010   						
;;;1011   							strcpy( displayStr,"0000"  );
000516  a1c3              ADR      r1,|L6.2084|
000518  48bf              LDR      r0,|L6.2072|
00051a  f7fffffe          BL       strcpy
;;;1012   							
;;;1013   							CLists.IR_Step_Time = 0;
00051e  2000              MOVS     r0,#0
000520  49be              LDR      r1,|L6.2076|
000522  f88100dc          STRB     r0,[r1,#0xdc]
000526  e077              B        |L6.1560|
                  |L6.1320|
;;;1014   							
;;;1015   						}else{
;;;1016   							
;;;1017   							if( !flag_dot ){  
000528  f89d0000          LDRB     r0,[sp,#0]
00052c  bb68              CBNZ     r0,|L6.1418|
;;;1018   							
;;;1019   								if(  temp_int > 255  ){   //最大值
00052e  2dff              CMP      r5,#0xff
000530  dd08              BLE      |L6.1348|
;;;1020   								
;;;1021   									strcpy( displayStr, "0255"  );
000532  a1be              ADR      r1,|L6.2092|
000534  48b8              LDR      r0,|L6.2072|
000536  f7fffffe          BL       strcpy
;;;1022   									
;;;1023   									CLists.IR_Step_Time = 255;
00053a  20ff              MOVS     r0,#0xff
00053c  49b7              LDR      r1,|L6.2076|
00053e  f88100dc          STRB     r0,[r1,#0xdc]
;;;1024   									
;;;1025   									break;
000542  e13f              B        |L6.1988|
                  |L6.1348|
;;;1026   									
;;;1027   								}
;;;1028   								if( temp_int <= 0 ){    //最小值
000544  2d00              CMP      r5,#0
000546  dc08              BGT      |L6.1370|
;;;1029   								
;;;1030   									strcpy( displayStr, "0000"  );
000548  a1b6              ADR      r1,|L6.2084|
00054a  48b3              LDR      r0,|L6.2072|
00054c  f7fffffe          BL       strcpy
;;;1031   									
;;;1032   									CLists.IR_Step_Time = 0 ;
000550  2000              MOVS     r0,#0
000552  49b2              LDR      r1,|L6.2076|
000554  f88100dc          STRB     r0,[r1,#0xdc]
;;;1033   									
;;;1034   									break;
000558  e134              B        |L6.1988|
                  |L6.1370|
;;;1035   								}
;;;1036   								for( i = 0; i < 4 - strlen(int_char); i++){
00055a  2400              MOVS     r4,#0
00055c  e005              B        |L6.1386|
                  |L6.1374|
;;;1037   									
;;;1038   									strcat( temp_char, "0");		
00055e  f2af1150          ADR      r1,|L6.1040|
000562  a807              ADD      r0,sp,#0x1c
000564  f7fffffe          BL       strcat
000568  1c64              ADDS     r4,r4,#1              ;1036
                  |L6.1386|
00056a  a804              ADD      r0,sp,#0x10           ;1036
00056c  f7fffffe          BL       strlen
000570  f1c00004          RSB      r0,r0,#4              ;1036
000574  42a0              CMP      r0,r4                 ;1036
000576  d8f2              BHI      |L6.1374|
;;;1039   									
;;;1040   								}
;;;1041   								
;;;1042   								strcat( temp_char, int_char);
000578  a904              ADD      r1,sp,#0x10
00057a  a807              ADD      r0,sp,#0x1c
00057c  f7fffffe          BL       strcat
;;;1043   								
;;;1044   								strcpy( displayStr, temp_char);		
000580  a907              ADD      r1,sp,#0x1c
000582  48a5              LDR      r0,|L6.2072|
000584  f7fffffe          BL       strcpy
000588  e043              B        |L6.1554|
                  |L6.1418|
;;;1045   							
;;;1046   							}else{
;;;1047   
;;;1048   								if( temp_float - 255 > 0 ){   //最大值
00058a  ed9f0aaa          VLDR     s0,|L6.2100|
00058e  ee380a40          VSUB.F32 s0,s16,s0
000592  eeb50ac0          VCMPE.F32 s0,#0.0
000596  eef1fa10          VMRS     APSR_nzcv,FPSCR
00059a  dd08              BLE      |L6.1454|
;;;1049   								
;;;1050   									strcpy( displayStr, "0255"  );
00059c  a1a3              ADR      r1,|L6.2092|
00059e  489e              LDR      r0,|L6.2072|
0005a0  f7fffffe          BL       strcpy
;;;1051   									
;;;1052   									CLists.IR_Step_Time = 255;
0005a4  20ff              MOVS     r0,#0xff
0005a6  499d              LDR      r1,|L6.2076|
0005a8  f88100dc          STRB     r0,[r1,#0xdc]
;;;1053   									
;;;1054   									break;
0005ac  e10a              B        |L6.1988|
                  |L6.1454|
;;;1055   								}
;;;1056   								
;;;1057   								if( temp_float <= 0 ){    //最小值
0005ae  eeb58ac0          VCMPE.F32 s16,#0.0
0005b2  eef1fa10          VMRS     APSR_nzcv,FPSCR
0005b6  d808              BHI      |L6.1482|
;;;1058   								
;;;1059   									strcpy( displayStr, "0000"  );
0005b8  a19a              ADR      r1,|L6.2084|
0005ba  4897              LDR      r0,|L6.2072|
0005bc  f7fffffe          BL       strcpy
;;;1060   									
;;;1061   									CLists.IR_Step_Time = 0 ;
0005c0  2000              MOVS     r0,#0
0005c2  4996              LDR      r1,|L6.2076|
0005c4  f88100dc          STRB     r0,[r1,#0xdc]
;;;1062   									
;;;1063   									break;
0005c8  e0fc              B        |L6.1988|
                  |L6.1482|
;;;1064   								}
;;;1065   								
;;;1066   								if( dot_loc + 1 == strlen(displayStr) ){
0005ca  4893              LDR      r0,|L6.2072|
0005cc  f7fffffe          BL       strlen
0005d0  1c71              ADDS     r1,r6,#1
0005d2  4288              CMP      r0,r1
0005d4  d006              BEQ      |L6.1508|
;;;1067   													
;;;1068   								}else{
;;;1069   									
;;;1070   									temp_int++;
0005d6  1c6d              ADDS     r5,r5,#1
;;;1071   									
;;;1072   									sprintf( int_char , "%d" , temp_int);	
0005d8  462a              MOV      r2,r5
0005da  f2af11d8          ADR      r1,|L6.1028|
0005de  a804              ADD      r0,sp,#0x10
0005e0  f7fffffe          BL       __2sprintf
                  |L6.1508|
;;;1073   									
;;;1074   								}
;;;1075   								for( i = 0; i < 4 - strlen(int_char); i++){
0005e4  2400              MOVS     r4,#0
0005e6  e005              B        |L6.1524|
                  |L6.1512|
;;;1076   									
;;;1077   									strcat( temp_char, "0");
0005e8  f2af11dc          ADR      r1,|L6.1040|
0005ec  a807              ADD      r0,sp,#0x1c
0005ee  f7fffffe          BL       strcat
0005f2  1c64              ADDS     r4,r4,#1              ;1075
                  |L6.1524|
0005f4  a804              ADD      r0,sp,#0x10           ;1075
0005f6  f7fffffe          BL       strlen
0005fa  f1c00004          RSB      r0,r0,#4              ;1075
0005fe  42a0              CMP      r0,r4                 ;1075
000600  d8f2              BHI      |L6.1512|
;;;1078   									
;;;1079   								}
;;;1080   								
;;;1081   								strcat( temp_char, int_char);
000602  a904              ADD      r1,sp,#0x10
000604  a807              ADD      r0,sp,#0x1c
000606  f7fffffe          BL       strcat
;;;1082   								
;;;1083   								strcpy( displayStr, temp_char);					
00060a  a907              ADD      r1,sp,#0x1c
00060c  4882              LDR      r0,|L6.2072|
00060e  f7fffffe          BL       strcpy
                  |L6.1554|
;;;1084   							}	
;;;1085   							CLists.IR_Step_Time = temp_int;
000612  4982              LDR      r1,|L6.2076|
000614  f88150dc          STRB     r5,[r1,#0xdc]
                  |L6.1560|
;;;1086   						}
;;;1087   					
;;;1088   					break;
000618  e0d4              B        |L6.1988|
                  |L6.1562|
;;;1089   					
;;;1090   					case 7:
;;;1091   					//======================================电流========================================
;;;1092   						if( flag_null ){  
00061a  f1b80f00          CMP      r8,#0
00061e  d005              BEQ      |L6.1580|
;;;1093   						
;;;1094   							strcpy( displayStr, "0.000"  );
000620  f2af2118          ADR      r1,|L6.1036|
000624  487c              LDR      r0,|L6.2072|
000626  f7fffffe          BL       strcpy
00062a  e05c              B        |L6.1766|
                  |L6.1580|
;;;1095   							
;;;1096   						}else{	
;;;1097   						
;;;1098   							if( !flag_dot ){      	
00062c  f89d0000          LDRB     r0,[sp,#0]
000630  bb18              CBNZ     r0,|L6.1658|
;;;1099   								
;;;1100   								if( temp_int > 15  ){   //最大值
000632  2d0f              CMP      r5,#0xf
000634  dd04              BLE      |L6.1600|
;;;1101   								
;;;1102   									strcpy( displayStr, "15.000"  );
000636  a180              ADR      r1,|L6.2104|
000638  4877              LDR      r0,|L6.2072|
00063a  f7fffffe          BL       strcpy
;;;1103   									
;;;1104   									break;
00063e  e0c1              B        |L6.1988|
                  |L6.1600|
;;;1105   								}
;;;1106   								if( temp_int <= 0 ){    //最小值
000640  2d00              CMP      r5,#0
000642  dc05              BGT      |L6.1616|
;;;1107   								
;;;1108   									strcpy( displayStr, "0.000"  );
000644  f2af213c          ADR      r1,|L6.1036|
000648  4873              LDR      r0,|L6.2072|
00064a  f7fffffe          BL       strcpy
;;;1109   									
;;;1110   									break;
00064e  e0b9              B        |L6.1988|
                  |L6.1616|
;;;1111   								}						
;;;1112   								if( strlen(int_char) > 2){
000650  a804              ADD      r0,sp,#0x10
000652  f7fffffe          BL       strlen
000656  2802              CMP      r0,#2
000658  d905              BLS      |L6.1638|
;;;1113   									
;;;1114   									strcat( int_char, ".0");
00065a  f2af213c          ADR      r1,|L6.1056|
00065e  a804              ADD      r0,sp,#0x10
000660  f7fffffe          BL       strcat
000664  e004              B        |L6.1648|
                  |L6.1638|
;;;1115   									
;;;1116   								}else{
;;;1117   									
;;;1118   									strcat( int_char, ".000");
000666  f2af2144          ADR      r1,|L6.1060|
00066a  a804              ADD      r0,sp,#0x10
00066c  f7fffffe          BL       strcat
                  |L6.1648|
;;;1119   									
;;;1120   								}
;;;1121   								
;;;1122   								strcpy( displayStr, int_char );
000670  a904              ADD      r1,sp,#0x10
000672  4869              LDR      r0,|L6.2072|
000674  f7fffffe          BL       strcpy
000678  e035              B        |L6.1766|
                  |L6.1658|
;;;1123   								
;;;1124   							}else{
;;;1125   
;;;1126   								if( temp_float - 15 > 0 ){   //最大值
00067a  eeb20a0e          VMOV.F32 s0,#15.00000000
00067e  ee380a40          VSUB.F32 s0,s16,s0
000682  eeb50ac0          VCMPE.F32 s0,#0.0
000686  eef1fa10          VMRS     APSR_nzcv,FPSCR
00068a  dd04              BLE      |L6.1686|
;;;1127   								
;;;1128   									strcpy( displayStr, "15.000"  );
00068c  a16a              ADR      r1,|L6.2104|
00068e  4862              LDR      r0,|L6.2072|
000690  f7fffffe          BL       strcpy
;;;1129   									
;;;1130   									break;
000694  e096              B        |L6.1988|
                  |L6.1686|
;;;1131   								}
;;;1132   								
;;;1133   								if( temp_float <= 0 ){    //最小值
000696  eeb58ac0          VCMPE.F32 s16,#0.0
00069a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00069e  d805              BHI      |L6.1708|
;;;1134   								
;;;1135   									strcpy( displayStr, "0.000"  );
0006a0  f2af2198          ADR      r1,|L6.1036|
0006a4  485c              LDR      r0,|L6.2072|
0006a6  f7fffffe          BL       strcpy
;;;1136   									
;;;1137   									break;
0006aa  e08b              B        |L6.1988|
                  |L6.1708|
;;;1138   								}
;;;1139   								
;;;1140   								NUM = strlen(float_char) - dot_loc - 1;
0006ac  a801              ADD      r0,sp,#4
0006ae  f7fffffe          BL       strlen
0006b2  1b80              SUBS     r0,r0,r6
0006b4  f1a00901          SUB      r9,r0,#1
;;;1141   								
;;;1142   								for( i = 0; i < 3 - NUM; i++ ){
0006b8  2400              MOVS     r4,#0
0006ba  e005              B        |L6.1736|
                  |L6.1724|
;;;1143   									
;;;1144   									strcat( float_char, "0");
0006bc  f2af21b0          ADR      r1,|L6.1040|
0006c0  a801              ADD      r0,sp,#4
0006c2  f7fffffe          BL       strcat
0006c6  1c64              ADDS     r4,r4,#1              ;1142
                  |L6.1736|
0006c8  f1c90003          RSB      r0,r9,#3              ;1142
0006cc  42a0              CMP      r0,r4                 ;1142
0006ce  dcf5              BGT      |L6.1724|
;;;1145   									
;;;1146   								}
;;;1147   								
;;;1148   								NUM = ( dot_loc > 1 ) ? 6 : 5;
0006d0  2e01              CMP      r6,#1
0006d2  dd01              BLE      |L6.1752|
0006d4  2006              MOVS     r0,#6
0006d6  e000              B        |L6.1754|
                  |L6.1752|
0006d8  2005              MOVS     r0,#5
                  |L6.1754|
0006da  4681              MOV      r9,r0
;;;1149   								
;;;1150   								strncpy( displayStr, float_char, NUM );
0006dc  464a              MOV      r2,r9
0006de  a901              ADD      r1,sp,#4
0006e0  484d              LDR      r0,|L6.2072|
0006e2  f7fffffe          BL       strncpy
                  |L6.1766|
;;;1151   								
;;;1152   							}
;;;1153   						}
;;;1154   					
;;;1155   					break;
0006e6  e06d              B        |L6.1988|
                  |L6.1768|
;;;1156   					
;;;1157   					case 8:
;;;1158   					//====================================短路时间======================================
;;;1159   						if( flag_null ){  
0006e8  f1b80f00          CMP      r8,#0
0006ec  d004              BEQ      |L6.1784|
;;;1160   						
;;;1161   							strcpy( displayStr, "0000"  );
0006ee  a14d              ADR      r1,|L6.2084|
0006f0  4849              LDR      r0,|L6.2072|
0006f2  f7fffffe          BL       strcpy
0006f6  e064              B        |L6.1986|
                  |L6.1784|
;;;1162   							
;;;1163   						}else{	
;;;1164   						
;;;1165   							if( !flag_dot ){      							//正整数
0006f8  f89d0000          LDRB     r0,[sp,#0]
0006fc  bb28              CBNZ     r0,|L6.1866|
;;;1166   			
;;;1167   								if(  temp_int > 255 ){   //最大值
0006fe  2dff              CMP      r5,#0xff
000700  dd04              BLE      |L6.1804|
;;;1168   								
;;;1169   									strcpy( displayStr, "255"  );
000702  a14f              ADR      r1,|L6.2112|
000704  4844              LDR      r0,|L6.2072|
000706  f7fffffe          BL       strcpy
;;;1170   									
;;;1171   									break;		
00070a  e05b              B        |L6.1988|
                  |L6.1804|
;;;1172   								}
;;;1173   								if( temp_int <= 0 ){    //最小值
00070c  2d00              CMP      r5,#0
00070e  dc04              BGT      |L6.1818|
;;;1174   								
;;;1175   									strcpy( displayStr, "0000"  );
000710  a144              ADR      r1,|L6.2084|
000712  4841              LDR      r0,|L6.2072|
000714  f7fffffe          BL       strcpy
;;;1176   									
;;;1177   									break;
000718  e054              B        |L6.1988|
                  |L6.1818|
;;;1178   								}
;;;1179   								for( i = 0; i < 4 - strlen(int_char); i++){
00071a  2400              MOVS     r4,#0
00071c  e005              B        |L6.1834|
                  |L6.1822|
;;;1180   									
;;;1181   									strcat( temp_char, "0");
00071e  f2af3110          ADR      r1,|L6.1040|
000722  a807              ADD      r0,sp,#0x1c
000724  f7fffffe          BL       strcat
000728  1c64              ADDS     r4,r4,#1              ;1179
                  |L6.1834|
00072a  a804              ADD      r0,sp,#0x10           ;1179
00072c  f7fffffe          BL       strlen
000730  f1c00004          RSB      r0,r0,#4              ;1179
000734  42a0              CMP      r0,r4                 ;1179
000736  d8f2              BHI      |L6.1822|
;;;1182   									
;;;1183   								}
;;;1184   								
;;;1185   								strcat( temp_char, int_char);
000738  a904              ADD      r1,sp,#0x10
00073a  a807              ADD      r0,sp,#0x1c
00073c  f7fffffe          BL       strcat
;;;1186   								
;;;1187   								strcpy( displayStr, temp_char);
000740  a907              ADD      r1,sp,#0x1c
000742  4835              LDR      r0,|L6.2072|
000744  f7fffffe          BL       strcpy
000748  e03b              B        |L6.1986|
                  |L6.1866|
;;;1188   								
;;;1189   							}else{
;;;1190   								
;;;1191   								if( temp_float - 255 > 0 ){   //最大值
00074a  ed9f0a3a          VLDR     s0,|L6.2100|
00074e  ee380a40          VSUB.F32 s0,s16,s0
000752  eeb50ac0          VCMPE.F32 s0,#0.0
000756  eef1fa10          VMRS     APSR_nzcv,FPSCR
00075a  dd04              BLE      |L6.1894|
;;;1192   								
;;;1193   									strcpy( displayStr, "255"  );
00075c  a138              ADR      r1,|L6.2112|
00075e  482e              LDR      r0,|L6.2072|
000760  f7fffffe          BL       strcpy
;;;1194   									
;;;1195   									break;
000764  e02e              B        |L6.1988|
                  |L6.1894|
;;;1196   								}
;;;1197   								if( temp_float <= 0 ){    //最小值
000766  eeb58ac0          VCMPE.F32 s16,#0.0
00076a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00076e  d804              BHI      |L6.1914|
;;;1198   								
;;;1199   									strcpy( displayStr, "0000"  );
000770  a12c              ADR      r1,|L6.2084|
000772  4829              LDR      r0,|L6.2072|
000774  f7fffffe          BL       strcpy
;;;1200   									
;;;1201   									break;
000778  e024              B        |L6.1988|
                  |L6.1914|
;;;1202   								}
;;;1203   								if( dot_loc + 1 == strlen(displayStr) ){
00077a  4827              LDR      r0,|L6.2072|
00077c  f7fffffe          BL       strlen
000780  1c71              ADDS     r1,r6,#1
000782  4288              CMP      r0,r1
000784  d006              BEQ      |L6.1940|
;;;1204   													
;;;1205   								}else{
;;;1206   									
;;;1207   									temp_int++;
000786  1c6d              ADDS     r5,r5,#1
;;;1208   									
;;;1209   									sprintf( int_char , "%d" , temp_int);	
000788  462a              MOV      r2,r5
00078a  f2af3188          ADR      r1,|L6.1028|
00078e  a804              ADD      r0,sp,#0x10
000790  f7fffffe          BL       __2sprintf
                  |L6.1940|
;;;1210   									
;;;1211   								}
;;;1212   								for( i = 0; i < 4 - strlen(int_char); i++){
000794  2400              MOVS     r4,#0
000796  e005              B        |L6.1956|
                  |L6.1944|
;;;1213   									
;;;1214   									strcat( temp_char, "0");		
000798  f2af318c          ADR      r1,|L6.1040|
00079c  a807              ADD      r0,sp,#0x1c
00079e  f7fffffe          BL       strcat
0007a2  1c64              ADDS     r4,r4,#1              ;1212
                  |L6.1956|
0007a4  a804              ADD      r0,sp,#0x10           ;1212
0007a6  f7fffffe          BL       strlen
0007aa  f1c00004          RSB      r0,r0,#4              ;1212
0007ae  42a0              CMP      r0,r4                 ;1212
0007b0  d8f2              BHI      |L6.1944|
;;;1215   									
;;;1216   								}
;;;1217   								
;;;1218   								strcat( temp_char, int_char);
0007b2  a904              ADD      r1,sp,#0x10
0007b4  a807              ADD      r0,sp,#0x1c
0007b6  f7fffffe          BL       strcat
;;;1219   								
;;;1220   								strcpy( displayStr, temp_char);
0007ba  a907              ADD      r1,sp,#0x1c
0007bc  4816              LDR      r0,|L6.2072|
0007be  f7fffffe          BL       strcpy
                  |L6.1986|
;;;1221   							}
;;;1222   						}
;;;1223   					
;;;1224   					break;
0007c2  bf00              NOP      
                  |L6.1988|
0007c4  bf00              NOP                            ;769
;;;1225   				}	
;;;1226   				
;;;1227   				Write_Flash_Bytes();	
0007c6  f7fffffe          BL       Write_Flash_Bytes
;;;1228   				
;;;1229   				SGhListR[temp].d_BKColor = 0;
0007ca  2000              MOVS     r0,#0
0007cc  eb0701c7          ADD      r1,r7,r7,LSL #3
0007d0  4a1c              LDR      r2,|L6.2116|
0007d2  eb0201c1          ADD      r1,r2,r1,LSL #3
0007d6  6388              STR      r0,[r1,#0x38]
;;;1230   				
;;;1231   				strcpy( SGhListR[temp].f_SName, displayStr );
0007d8  eb0701c7          ADD      r1,r7,r7,LSL #3
0007dc  eb0201c1          ADD      r1,r2,r1,LSL #3
0007e0  f101000c          ADD      r0,r1,#0xc
0007e4  490c              LDR      r1,|L6.2072|
0007e6  f7fffffe          BL       strcpy
;;;1232   				
;;;1233   				strcpy( SGhListR[temp].f_EName, displayStr );
0007ea  eb0701c7          ADD      r1,r7,r7,LSL #3
0007ee  4a15              LDR      r2,|L6.2116|
0007f0  eb0201c1          ADD      r1,r2,r1,LSL #3
0007f4  f1010020          ADD      r0,r1,#0x20
0007f8  4907              LDR      r1,|L6.2072|
0007fa  f7fffffe          BL       strcpy
                  |L6.2046|
;;;1234   		}
;;;1235   	
;;;1236   	}
;;;1237   	memset( displayStr, '\0', sizeof(displayStr));
0007fe  2114              MOVS     r1,#0x14
000800  4805              LDR      r0,|L6.2072|
000802  f7fffffe          BL       __aeabi_memclr
;;;1238   	
;;;1239   	WM_InvalidateWindow(hWinR);
000806  4810              LDR      r0,|L6.2120|
000808  6800              LDR      r0,[r0,#0]  ; hWinR
00080a  f7fffffe          BL       WM_InvalidateWindow
;;;1240   }
00080e  b00b              ADD      sp,sp,#0x2c
000810  ecbd8b04          VPOP     {d8-d9}
000814  e8bd8ff0          POP      {r4-r11,pc}
;;;1241   
                          ENDP

                  |L6.2072|
                          DCD      displayStr
                  |L6.2076|
                          DCD      CLists
                  |L6.2080|
000820  42700000          DCFS     0x42700000 ; 60
                  |L6.2084|
000824  30303030          DCB      "0000",0
000828  00      
000829  00                DCB      0
00082a  00                DCB      0
00082b  00                DCB      0
                  |L6.2092|
00082c  30323535          DCB      "0255",0
000830  00      
000831  00                DCB      0
000832  00                DCB      0
000833  00                DCB      0
                  |L6.2100|
000834  437f0000          DCFS     0x437f0000 ; 255
                  |L6.2104|
000838  31352e30          DCB      "15.000",0
00083c  303000  
00083f  00                DCB      0
                  |L6.2112|
000840  32353500          DCB      "255",0
                  |L6.2116|
                          DCD      SGhListR
                  |L6.2120|
                          DCD      hWinR

                          AREA ||i._cbDialog||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  _cbDialog PROC
;;;140    
;;;141    static void _cbDialog(WM_MESSAGE * pMsg) {
000000  e92d43f0          PUSH     {r4-r9,lr}
000004  ed2d8b02          VPUSH    {d8}
000008  b0a7              SUB      sp,sp,#0x9c
00000a  4604              MOV      r4,r0
;;;142    	
;;;143    	WM_HWIN hItem;
;;;144    	int     NCode, Id, MAX_LEN;
;;;145    	vu8 i = 0;
00000c  2000              MOVS     r0,#0
00000e  9026              STR      r0,[sp,#0x98]
;;;146    	char *winName,  *chargeName;
;;;147    	char tChar[10];
;;;148    
;;;149    	static struct SListData slistR[] = {	
;;;150    
;;;151    		{T_Button , "内阻测试", "I.R. TEST",  0x00B22222 , 0, ID_BUTTON_1 },
;;;152    		
;;;153    		{T_Button , "程控电源", "POWER",  0x00B22222 , 0, ID_BUTTON_2 },
;;;154    		
;;;155    		{T_Button , "程控负载", "LOAD",  0x00B22222 , 0, ID_BUTTON_3 },
;;;156    		
;;;157    		{T_Button , "充放电", "C&DC",  0x00B22222 , 0, ID_BUTTON_4 },
;;;158    		
;;;159    		{T_Button , "系统设置", "SYSTEM",  0x00B22222 , 0, ID_BUTTON_5 },
;;;160    		
;;;161    	};	
;;;162    	
;;;163    	vu8 _dloc;
;;;164    	
;;;165      switch (pMsg->MsgId) {
000010  6820              LDR      r0,[r4,#0]
000012  280f              CMP      r0,#0xf
000014  d008              BEQ      |L7.40|
000016  281d              CMP      r0,#0x1d
000018  d078              BEQ      |L7.268|
00001a  2826              CMP      r0,#0x26
00001c  d077              BEQ      |L7.270|
00001e  f2a01013          SUB      r0,r0,#0x113
000022  2800              CMP      r0,#0
000024  d174              BNE      |L7.272|
000026  e0e3              B        |L7.496|
                  |L7.40|
;;;166    	
;;;167    			//重绘
;;;168    			case WM_PAINT:  {
;;;169    				
;;;170    				hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_1);	
000028  f6400102          MOV      r1,#0x802
00002c  6860              LDR      r0,[r4,#4]
00002e  f7fffffe          BL       WM_GetDialogItem
000032  4681              MOV      r9,r0
;;;171    				
;;;172    				BUTTON_SetPressed( hItem , 1 );	
000034  2101              MOVS     r1,#1
000036  4648              MOV      r0,r9
000038  f7fffffe          BL       BUTTON_SetPressed
;;;173    				
;;;174    				GUI_SetColor(GUI_ORANGE);  //设置画笔颜色
00003c  f24a50ff          MOV      r0,#0xa5ff
000040  f7fffffe          BL       GUI_SetColor
;;;175    				
;;;176    				GUI_FillRoundedRect(0,0,480,33,5);
000044  2005              MOVS     r0,#5
000046  2321              MOVS     r3,#0x21
000048  f44f72f0          MOV      r2,#0x1e0
00004c  2100              MOVS     r1,#0
00004e  9000              STR      r0,[sp,#0]
000050  4608              MOV      r0,r1
000052  f7fffffe          BL       GUI_FillRoundedRect
;;;177    				
;;;178    				GUI_SetColor(GUI_BLACK);
000056  2000              MOVS     r0,#0
000058  f7fffffe          BL       GUI_SetColor
;;;179    				
;;;180    				GUI_SetFont(&GUI_FontSONG16);
00005c  48fe              LDR      r0,|L7.1112|
00005e  f7fffffe          BL       GUI_SetFont
;;;181    				
;;;182    				GUI_UC_SetEncodeUTF8();
000062  f7fffffe          BL       GUI_UC_SetEncodeUTF8
;;;183    				
;;;184    				GUI_SetTextMode(GUI_TM_TRANS);//设置文本模式为底色透明
000066  2002              MOVS     r0,#2
000068  f7fffffe          BL       GUI_SetTextMode
;;;185    				
;;;186    				winName = ( FLAG_LANG == 1) ? "L.R. TEST" : "内阻测试";
00006c  48fb              LDR      r0,|L7.1116|
00006e  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
000070  2801              CMP      r0,#1
000072  d101              BNE      |L7.120|
000074  a0fa              ADR      r0,|L7.1120|
000076  e000              B        |L7.122|
                  |L7.120|
000078  a0fc              ADR      r0,|L7.1132|
                  |L7.122|
00007a  4607              MOV      r7,r0
;;;187    				
;;;188    				GUI_DispStringAt( winName, (480 - GUI_GetStringDistX( winName))/2, 10);
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       GUI_GetStringDistX
000082  f5c075f0          RSB      r5,r0,#0x1e0
000086  eb0570d5          ADD      r0,r5,r5,LSR #31
00008a  1041              ASRS     r1,r0,#1
00008c  220a              MOVS     r2,#0xa
00008e  4638              MOV      r0,r7
000090  f7fffffe          BL       GUI_DispStringAt
;;;189    				
;;;190    				if( FLAG_OVTest )
000094  48f9              LDR      r0,|L7.1148|
000096  7800              LDRB     r0,[r0,#0]  ; FLAG_OVTest
000098  b3b8              CBZ      r0,|L7.266|
;;;191    				{
;;;192    					for( i = 0; i < sizeof( SGhListR )/sizeof( SGhListR[0]) ; i++  ){
00009a  2000              MOVS     r0,#0
00009c  9026              STR      r0,[sp,#0x98]
00009e  e02f              B        |L7.256|
                  |L7.160|
;;;193    						
;;;194    						bush_Graph_String( FLAG_LANG, SGhListR[i] );
0000a0  f89d0098          LDRB     r0,[sp,#0x98]
0000a4  eb0000c0          ADD      r0,r0,r0,LSL #3
0000a8  49f5              LDR      r1,|L7.1152|
0000aa  eb0105c0          ADD      r5,r1,r0,LSL #3
0000ae  2234              MOVS     r2,#0x34
0000b0  4629              MOV      r1,r5
0000b2  a810              ADD      r0,sp,#0x40
0000b4  f7fffffe          BL       __aeabi_memcpy4
0000b8  f8550f34          LDR      r0,[r5,#0x34]!
0000bc  901d              STR      r0,[sp,#0x74]
0000be  6868              LDR      r0,[r5,#4]
0000c0  901e              STR      r0,[sp,#0x78]
0000c2  68a8              LDR      r0,[r5,#8]
0000c4  901f              STR      r0,[sp,#0x7c]
0000c6  89a8              LDRH     r0,[r5,#0xc]
0000c8  f8ad0080          STRH     r0,[sp,#0x80]
0000cc  89e8              LDRH     r0,[r5,#0xe]
0000ce  f8ad0082          STRH     r0,[sp,#0x82]
0000d2  8a28              LDRH     r0,[r5,#0x10]
0000d4  f8ad0084          STRH     r0,[sp,#0x84]
0000d8  8a68              LDRH     r0,[r5,#0x12]
0000da  3d34              SUBS     r5,r5,#0x34
0000dc  f8ad0086          STRH     r0,[sp,#0x86]
0000e0  223c              MOVS     r2,#0x3c
0000e2  a913              ADD      r1,sp,#0x4c
0000e4  4668              MOV      r0,sp
0000e6  f7fffffe          BL       __aeabi_memcpy4
0000ea  48dc              LDR      r0,|L7.1116|
0000ec  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
0000ee  a910              ADD      r1,sp,#0x40
0000f0  c90e              LDM      r1,{r1-r3}
0000f2  f7fffffe          BL       bush_Graph_String
0000f6  f89d0098          LDRB     r0,[sp,#0x98]         ;192
0000fa  1c40              ADDS     r0,r0,#1              ;192
0000fc  b2c0              UXTB     r0,r0                 ;192
0000fe  9026              STR      r0,[sp,#0x98]         ;192
                  |L7.256|
000100  f89d0098          LDRB     r0,[sp,#0x98]         ;192
000104  2825              CMP      r0,#0x25              ;192
000106  d3cb              BCC      |L7.160|
000108  e03a              B        |L7.384|
                  |L7.266|
00010a  e002              B        |L7.274|
                  |L7.268|
00010c  e3a7              B        |L7.2142|
                  |L7.270|
00010e  e3b9              B        |L7.2180|
                  |L7.272|
000110  e3b9              B        |L7.2182|
                  |L7.274|
;;;195    					}
;;;196    					
;;;197    				}else{	
;;;198    				
;;;199    					for( i = 0; i < sizeof( Un_SGhListR )/sizeof( Un_SGhListR[0]) ; i++  ){
000112  2000              MOVS     r0,#0
000114  9026              STR      r0,[sp,#0x98]
000116  e02f              B        |L7.376|
                  |L7.280|
;;;200    						
;;;201    						bush_Graph_String( FLAG_LANG, Un_SGhListR[i] );		
000118  f89d0098          LDRB     r0,[sp,#0x98]
00011c  eb0000c0          ADD      r0,r0,r0,LSL #3
000120  49d8              LDR      r1,|L7.1156|
000122  eb0105c0          ADD      r5,r1,r0,LSL #3
000126  2234              MOVS     r2,#0x34
000128  4629              MOV      r1,r5
00012a  a810              ADD      r0,sp,#0x40
00012c  f7fffffe          BL       __aeabi_memcpy4
000130  f8550f34          LDR      r0,[r5,#0x34]!
000134  901d              STR      r0,[sp,#0x74]
000136  6868              LDR      r0,[r5,#4]
000138  901e              STR      r0,[sp,#0x78]
00013a  68a8              LDR      r0,[r5,#8]
00013c  901f              STR      r0,[sp,#0x7c]
00013e  89a8              LDRH     r0,[r5,#0xc]
000140  f8ad0080          STRH     r0,[sp,#0x80]
000144  89e8              LDRH     r0,[r5,#0xe]
000146  f8ad0082          STRH     r0,[sp,#0x82]
00014a  8a28              LDRH     r0,[r5,#0x10]
00014c  f8ad0084          STRH     r0,[sp,#0x84]
000150  8a68              LDRH     r0,[r5,#0x12]
000152  3d34              SUBS     r5,r5,#0x34
000154  f8ad0086          STRH     r0,[sp,#0x86]
000158  223c              MOVS     r2,#0x3c
00015a  a913              ADD      r1,sp,#0x4c
00015c  4668              MOV      r0,sp
00015e  f7fffffe          BL       __aeabi_memcpy4
000162  48be              LDR      r0,|L7.1116|
000164  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
000166  a910              ADD      r1,sp,#0x40
000168  c90e              LDM      r1,{r1-r3}
00016a  f7fffffe          BL       bush_Graph_String
00016e  f89d0098          LDRB     r0,[sp,#0x98]         ;199
000172  1c40              ADDS     r0,r0,#1              ;199
000174  b2c0              UXTB     r0,r0                 ;199
000176  9026              STR      r0,[sp,#0x98]         ;199
                  |L7.376|
000178  f89d0098          LDRB     r0,[sp,#0x98]         ;199
00017c  280f              CMP      r0,#0xf               ;199
00017e  d3cb              BCC      |L7.280|
                  |L7.384|
;;;202    					}
;;;203    				}
;;;204    				
;;;205    				GUI_SetFont(&GUI_FontSONG12);	
000180  48c1              LDR      r0,|L7.1160|
000182  f7fffffe          BL       GUI_SetFont
;;;206    				GUI_UC_SetEncodeUTF8();	
000186  f7fffffe          BL       GUI_UC_SetEncodeUTF8
;;;207    				GUI_SetTextMode(GUI_TM_TRANS);//设置文本模式为底色透明
00018a  2002              MOVS     r0,#2
00018c  f7fffffe          BL       GUI_SetTextMode
;;;208    				GUI_SetColor(0x00456654);
000190  48be              LDR      r0,|L7.1164|
000192  f7fffffe          BL       GUI_SetColor
;;;209    				
;;;210    				if( C_DISCHARGE == 1 )
000196  48be              LDR      r0,|L7.1168|
000198  7800              LDRB     r0,[r0,#0]  ; C_DISCHARGE
00019a  2801              CMP      r0,#1
00019c  d108              BNE      |L7.432|
;;;211    				{
;;;212    					chargeName =  ( FLAG_LANG == 1) ? "Testing" : "测试中";
00019e  48af              LDR      r0,|L7.1116|
0001a0  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
0001a2  2801              CMP      r0,#1
0001a4  d101              BNE      |L7.426|
0001a6  a0bb              ADR      r0,|L7.1172|
0001a8  e000              B        |L7.428|
                  |L7.426|
0001aa  a0bc              ADR      r0,|L7.1180|
                  |L7.428|
0001ac  4680              MOV      r8,r0
0001ae  e014              B        |L7.474|
                  |L7.432|
;;;213    				}
;;;214    				else if( POWER_RECHARGE == 1 ){
0001b0  48bd              LDR      r0,|L7.1192|
0001b2  7800              LDRB     r0,[r0,#0]  ; POWER_RECHARGE
0001b4  2801              CMP      r0,#1
0001b6  d108              BNE      |L7.458|
;;;215    					chargeName =  ( FLAG_LANG == 1) ? "Charging" : "充电中";
0001b8  48a8              LDR      r0,|L7.1116|
0001ba  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
0001bc  2801              CMP      r0,#1
0001be  d101              BNE      |L7.452|
0001c0  a0ba              ADR      r0,|L7.1196|
0001c2  e000              B        |L7.454|
                  |L7.452|
0001c4  a0bc              ADR      r0,|L7.1208|
                  |L7.454|
0001c6  4680              MOV      r8,r0
0001c8  e007              B        |L7.474|
                  |L7.458|
;;;216    				}
;;;217    				else{
;;;218    					chargeName =  ( FLAG_LANG == 1) ? "Not Open" : "未开启";
0001ca  48a4              LDR      r0,|L7.1116|
0001cc  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
0001ce  2801              CMP      r0,#1
0001d0  d101              BNE      |L7.470|
0001d2  a0bc              ADR      r0,|L7.1220|
0001d4  e000              B        |L7.472|
                  |L7.470|
0001d6  a0be              ADR      r0,|L7.1232|
                  |L7.472|
0001d8  4680              MOV      r8,r0
                  |L7.474|
;;;219    				}
;;;220    				
;;;221    				GUI_DispStringAt( chargeName, 460 - GUI_GetStringDistX(chargeName), 13);	
0001da  4640              MOV      r0,r8
0001dc  f7fffffe          BL       GUI_GetStringDistX
0001e0  f5c075e6          RSB      r5,r0,#0x1cc
0001e4  220d              MOVS     r2,#0xd
0001e6  4629              MOV      r1,r5
0001e8  4640              MOV      r0,r8
0001ea  f7fffffe          BL       GUI_DispStringAt
;;;222    
;;;223    			}
;;;224    			
;;;225    			break;
0001ee  e34e              B        |L7.2190|
                  |L7.496|
;;;226    			
;;;227    			//定时模块消息
;;;228    			case WM_TIMER:
;;;229    				
;;;230    				if(WM_GetTimerId(pMsg->Data.v) == ID_TimerTimeR){	
0001f0  68e0              LDR      r0,[r4,#0xc]
0001f2  f7fffffe          BL       WM_GetTimerId
0001f6  2801              CMP      r0,#1
0001f8  d17d              BNE      |L7.758|
;;;231    				
;;;232    					memset( RStr, '\0', sizeof(RStr));
0001fa  48b8              LDR      r0,|L7.1244|
0001fc  2100              MOVS     r1,#0
0001fe  6001              STR      r1,[r0,#0]  ; RStr
000200  6041              STR      r1,[r0,#4]  ; RStr
000202  8101              STRH     r1,[r0,#8]
;;;233    					
;;;234    					/*  判断是否开启过流测试  */
;;;235    					if( FLAG_OVTest ){
000204  489d              LDR      r0,|L7.1148|
000206  7800              LDRB     r0,[r0,#0]  ; FLAG_OVTest
000208  2800              CMP      r0,#0
00020a  d075              BEQ      |L7.760|
;;;236    						
;;;237    						/* 未开启 */
;;;238    						if( trig_flag_state == 0  ){
00020c  48b4              LDR      r0,|L7.1248|
00020e  7800              LDRB     r0,[r0,#0]  ; trig_flag_state
000210  bbe8              CBNZ     r0,|L7.654|
;;;239    							
;;;240    							/* 电源电压 > 设置的门槛电压  */
;;;241    							if( DISS_Voltage > (float)CLists.IR_Threshold_V / 1000 &&  v_memory == 0 && r_memory == 0 ){
000212  48b4              LDR      r0,|L7.1252|
000214  f8d000d8          LDR      r0,[r0,#0xd8]  ; CLists
000218  ee000a10          VMOV     s0,r0
00021c  eef80a40          VCVT.F32.U32 s1,s0
000220  ed9f1ab1          VLDR     s2,|L7.1256|
000224  ee800a81          VDIV.F32 s0,s1,s2
000228  48b0              LDR      r0,|L7.1260|
00022a  edd00a00          VLDR     s1,[r0,#0]
00022e  eeb40ae0          VCMPE.F32 s0,s1
000232  eef1fa10          VMRS     APSR_nzcv,FPSCR
000236  d22d              BCS      |L7.660|
000238  48ad              LDR      r0,|L7.1264|
00023a  ed900a00          VLDR     s0,[r0,#0]
00023e  eeb50ac0          VCMPE.F32 s0,#0.0
000242  eef1fa10          VMRS     APSR_nzcv,FPSCR
000246  d125              BNE      |L7.660|
000248  48aa              LDR      r0,|L7.1268|
00024a  ed900a00          VLDR     s0,[r0,#0]
00024e  eeb50ac0          VCMPE.F32 s0,#0.0
000252  eef1fa10          VMRS     APSR_nzcv,FPSCR
000256  d11d              BNE      |L7.660|
;;;242    								
;;;243    								/*  开启放电  */
;;;244    								trig_flag_state = 1;
000258  2001              MOVS     r0,#1
00025a  49a1              LDR      r1,|L7.1248|
00025c  7008              STRB     r0,[r1,#0]
;;;245    								C_DISCHARGE = 1;        	
00025e  498c              LDR      r1,|L7.1168|
000260  7008              STRB     r0,[r1,#0]
;;;246    								OnOff_GPOI_ResetSet( 2, 1 );   
000262  2101              MOVS     r1,#1
000264  2002              MOVS     r0,#2
000266  f7fffffe          BL       OnOff_GPOI_ResetSet
;;;247    								ms_time = 0;
00026a  2000              MOVS     r0,#0
00026c  49a2              LDR      r1,|L7.1272|
00026e  6008              STR      r0,[r1,#0]  ; ms_time
;;;248    								abc_time = 0;
000270  49a2              LDR      r1,|L7.1276|
000272  6008              STR      r0,[r1,#0]  ; abc_time
;;;249    								max_discahrgeNum = (float)CLists.IR_Start_C / 1000;
000274  489b              LDR      r0,|L7.1252|
000276  f8b000d4          LDRH     r0,[r0,#0xd4]  ; CLists
00027a  ee000a10          VMOV     s0,r0
00027e  eeb80a40          VCVT.F32.U32 s0,s0
000282  eddf0a99          VLDR     s1,|L7.1256|
000286  ee801a20          VDIV.F32 s2,s0,s1
00028a  489d              LDR      r0,|L7.1280|
00028c  e000              B        |L7.656|
                  |L7.654|
00028e  e001              B        |L7.660|
                  |L7.656|
000290  ed801a00          VSTR     s2,[r0,#0]
                  |L7.660|
;;;250    								
;;;251    							}				
;;;252    						}						
;;;253    						
;;;254    						if( trig_flag_state == 1  && abc_time > 1 &&  v_memory == 0 && r_memory == 0 ){
000294  4892              LDR      r0,|L7.1248|
000296  7800              LDRB     r0,[r0,#0]  ; trig_flag_state
000298  2801              CMP      r0,#1
00029a  d122              BNE      |L7.738|
00029c  4897              LDR      r0,|L7.1276|
00029e  6800              LDR      r0,[r0,#0]  ; abc_time
0002a0  2801              CMP      r0,#1
0002a2  d91e              BLS      |L7.738|
0002a4  4892              LDR      r0,|L7.1264|
0002a6  ed900a00          VLDR     s0,[r0,#0]
0002aa  eeb50ac0          VCMPE.F32 s0,#0.0
0002ae  eef1fa10          VMRS     APSR_nzcv,FPSCR
0002b2  d116              BNE      |L7.738|
0002b4  488f              LDR      r0,|L7.1268|
0002b6  ed900a00          VLDR     s0,[r0,#0]
0002ba  eeb50ac0          VCMPE.F32 s0,#0.0
0002be  eef1fa10          VMRS     APSR_nzcv,FPSCR
0002c2  d10e              BNE      |L7.738|
;;;255    							
;;;256    							v_memory = DISS_Voltage;
0002c4  4889              LDR      r0,|L7.1260|
0002c6  ed900a00          VLDR     s0,[r0,#0]
0002ca  4889              LDR      r0,|L7.1264|
0002cc  ed800a00          VSTR     s0,[r0,#0]
;;;257    							r_memory = CLists.CR_VLUE;	
0002d0  4884              LDR      r0,|L7.1252|
0002d2  6b80              LDR      r0,[r0,#0x38]  ; CLists
0002d4  ee000a10          VMOV     s0,r0
0002d8  eeb80a40          VCVT.F32.U32 s0,s0
0002dc  4885              LDR      r0,|L7.1268|
0002de  ed800a00          VSTR     s0,[r0,#0]
                  |L7.738|
;;;258    						}
;;;259    						
;;;260    						/* 打开充电一秒  */
;;;261    						if( POWER_RECHARGE == 1 && abc_time > 1 && DISS_Voltage > (float)CLists.IR_Threshold_V/1000 ){
0002e2  4871              LDR      r0,|L7.1192|
0002e4  7800              LDRB     r0,[r0,#0]  ; POWER_RECHARGE
0002e6  2801              CMP      r0,#1
0002e8  d13f              BNE      |L7.874|
0002ea  4884              LDR      r0,|L7.1276|
0002ec  6800              LDR      r0,[r0,#0]  ; abc_time
0002ee  2801              CMP      r0,#1
0002f0  d93b              BLS      |L7.874|
0002f2  487c              LDR      r0,|L7.1252|
0002f4  e001              B        |L7.762|
                  |L7.758|
0002f6  e2b1              B        |L7.2140|
                  |L7.760|
0002f8  e21f              B        |L7.1850|
                  |L7.762|
0002fa  f8d000d8          LDR      r0,[r0,#0xd8]  ; CLists
0002fe  ee000a10          VMOV     s0,r0
000302  eef80a40          VCVT.F32.U32 s1,s0
000306  ed9f1a78          VLDR     s2,|L7.1256|
00030a  ee800a81          VDIV.F32 s0,s1,s2
00030e  4877              LDR      r0,|L7.1260|
000310  edd00a00          VLDR     s1,[r0,#0]
000314  eeb40ae0          VCMPE.F32 s0,s1
000318  eef1fa10          VMRS     APSR_nzcv,FPSCR
00031c  d225              BCS      |L7.874|
;;;262    				
;;;263    							Off_GPOI_ResetSet();
00031e  f7fffffe          BL       Off_GPOI_ResetSet
;;;264    							C_DISCHARGE = 1;		
000322  2001              MOVS     r0,#1
000324  495a              LDR      r1,|L7.1168|
000326  7008              STRB     r0,[r1,#0]
;;;265    							old_I = 0;
000328  ed9f0a76          VLDR     s0,|L7.1284|
00032c  4876              LDR      r0,|L7.1288|
00032e  ed800a00          VSTR     s0,[r0,#0]
;;;266    							max_discahrgeNum = (float)CLists.IR_Start_C / 1000;
000332  486c              LDR      r0,|L7.1252|
000334  f8b000d4          LDRH     r0,[r0,#0xd4]  ; CLists
000338  ee000a10          VMOV     s0,r0
00033c  eeb80a40          VCVT.F32.U32 s0,s0
000340  eddf0a69          VLDR     s1,|L7.1256|
000344  ee801a20          VDIV.F32 s2,s0,s1
000348  486d              LDR      r0,|L7.1280|
00034a  ed801a00          VSTR     s2,[r0,#0]
;;;267    							OnOff_GPOI_ResetSet( 2, 1 ); 
00034e  2101              MOVS     r1,#1
000350  2002              MOVS     r0,#2
000352  f7fffffe          BL       OnOff_GPOI_ResetSet
;;;268    							ms_time = 0;
000356  2000              MOVS     r0,#0
000358  4967              LDR      r1,|L7.1272|
00035a  6008              STR      r0,[r1,#0]  ; ms_time
;;;269    							abc_time = 0;
00035c  4967              LDR      r1,|L7.1276|
00035e  6008              STR      r0,[r1,#0]  ; abc_time
;;;270    							CLists.CSET_Current_Laod =  CLists.IR_Start_C;
000360  4860              LDR      r0,|L7.1252|
000362  f8b000d4          LDRH     r0,[r0,#0xd4]  ; CLists
000366  495f              LDR      r1,|L7.1252|
000368  6148              STR      r0,[r1,#0x14]  ; CLists
                  |L7.874|
;;;271    						}
;;;272    						
;;;273    						sprintf( RStr, "%f", old_I );
00036a  4867              LDR      r0,|L7.1288|
00036c  6800              LDR      r0,[r0,#0]  ; old_I
00036e  f7fffffe          BL       __aeabi_f2d
000372  ec410b18          VMOV     d8,r0,r1
000376  ec532b18          VMOV     r2,r3,d8
00037a  a164              ADR      r1,|L7.1292|
00037c  4857              LDR      r0,|L7.1244|
00037e  f7fffffe          BL       __2sprintf
;;;274    						_dloc = dot_Loc_isNull(RStr,strlen(RStr)) > 1 ? 6 : 5;
000382  4856              LDR      r0,|L7.1244|
000384  f7fffffe          BL       strlen
000388  4605              MOV      r5,r0
00038a  4629              MOV      r1,r5
00038c  4853              LDR      r0,|L7.1244|
00038e  f7fffffe          BL       dot_Loc_isNull
000392  2801              CMP      r0,#1
000394  dd01              BLE      |L7.922|
000396  2006              MOVS     r0,#6
000398  e000              B        |L7.924|
                  |L7.922|
00039a  2005              MOVS     r0,#5
                  |L7.924|
00039c  9022              STR      r0,[sp,#0x88]
;;;275    						
;;;276    						memset(SGhListR[8].f_SName, '\0', sizeof(SGhListR[8].f_SName));
00039e  2114              MOVS     r1,#0x14
0003a0  485b              LDR      r0,|L7.1296|
0003a2  f7fffffe          BL       __aeabi_memclr4
;;;277    						memset(SGhListR[8].f_EName, '\0', sizeof(SGhListR[8].f_EName));
0003a6  2114              MOVS     r1,#0x14
0003a8  4859              LDR      r0,|L7.1296|
0003aa  3014              ADDS     r0,r0,#0x14
0003ac  f7fffffe          BL       __aeabi_memclr4
;;;278    						
;;;279    						strncpy( SGhListR[8].f_SName, RStr, _dloc );	
0003b0  f89d2088          LDRB     r2,[sp,#0x88]
0003b4  4949              LDR      r1,|L7.1244|
0003b6  4856              LDR      r0,|L7.1296|
0003b8  f7fffffe          BL       strncpy
;;;280    						strncpy( SGhListR[8].f_EName, RStr, _dloc);	
0003bc  f89d2088          LDRB     r2,[sp,#0x88]
0003c0  4946              LDR      r1,|L7.1244|
0003c2  4853              LDR      r0,|L7.1296|
0003c4  3014              ADDS     r0,r0,#0x14
0003c6  f7fffffe          BL       strncpy
;;;281    						
;;;282    						memset( RStr, '\0', sizeof(RStr));		
0003ca  4844              LDR      r0,|L7.1244|
0003cc  2100              MOVS     r1,#0
0003ce  6001              STR      r1,[r0,#0]  ; RStr
0003d0  6041              STR      r1,[r0,#4]  ; RStr
0003d2  8101              STRH     r1,[r0,#8]
;;;283    						memset( tChar, '\0', sizeof(tChar));
0003d4  2000              MOVS     r0,#0
0003d6  9023              STR      r0,[sp,#0x8c]
0003d8  9024              STR      r0,[sp,#0x90]
0003da  9025              STR      r0,[sp,#0x94]
;;;284    						
;;;285    						sprintf( RStr, "%f", DISS_Current );
0003dc  484d              LDR      r0,|L7.1300|
0003de  6800              LDR      r0,[r0,#0]  ; DISS_Current
0003e0  f7fffffe          BL       __aeabi_f2d
0003e4  ec410b18          VMOV     d8,r0,r1
0003e8  ec532b18          VMOV     r2,r3,d8
0003ec  a147              ADR      r1,|L7.1292|
0003ee  483b              LDR      r0,|L7.1244|
0003f0  f7fffffe          BL       __2sprintf
;;;286    						_dloc = dot_Loc_isNull(RStr,strlen(RStr)) > 1 ? 6 : 5;
0003f4  4839              LDR      r0,|L7.1244|
0003f6  f7fffffe          BL       strlen
0003fa  4605              MOV      r5,r0
0003fc  4629              MOV      r1,r5
0003fe  4837              LDR      r0,|L7.1244|
000400  f7fffffe          BL       dot_Loc_isNull
000404  2801              CMP      r0,#1
000406  dd01              BLE      |L7.1036|
000408  2006              MOVS     r0,#6
00040a  e000              B        |L7.1038|
                  |L7.1036|
00040c  2005              MOVS     r0,#5
                  |L7.1038|
00040e  9022              STR      r0,[sp,#0x88]
;;;287    						
;;;288    						memset(SGhListR[32].f_SName, '\0', sizeof(SGhListR[32].f_SName));
000410  2114              MOVS     r1,#0x14
000412  4841              LDR      r0,|L7.1304|
000414  f7fffffe          BL       __aeabi_memclr4
;;;289    						memset(SGhListR[32].f_EName, '\0', sizeof(SGhListR[32].f_EName));
000418  2114              MOVS     r1,#0x14
00041a  483f              LDR      r0,|L7.1304|
00041c  3014              ADDS     r0,r0,#0x14
00041e  f7fffffe          BL       __aeabi_memclr4
;;;290    						
;;;291    						strncpy(SGhListR[32].f_SName, RStr, _dloc );	
000422  f89d2088          LDRB     r2,[sp,#0x88]
000426  492d              LDR      r1,|L7.1244|
000428  483b              LDR      r0,|L7.1304|
00042a  f7fffffe          BL       strncpy
;;;292    						strncpy(SGhListR[32].f_EName, RStr, _dloc);	
00042e  f89d2088          LDRB     r2,[sp,#0x88]
000432  492a              LDR      r1,|L7.1244|
000434  4838              LDR      r0,|L7.1304|
000436  3014              ADDS     r0,r0,#0x14
000438  f7fffffe          BL       strncpy
;;;293    						
;;;294    						memset( RStr, '\0', sizeof(RStr));		
00043c  4827              LDR      r0,|L7.1244|
00043e  2100              MOVS     r1,#0
000440  6001              STR      r1,[r0,#0]  ; RStr
000442  6041              STR      r1,[r0,#4]  ; RStr
000444  8101              STRH     r1,[r0,#8]
;;;295    						memset( tChar, '\0', sizeof(tChar));
000446  2000              MOVS     r0,#0
000448  9023              STR      r0,[sp,#0x8c]
00044a  9024              STR      r0,[sp,#0x90]
00044c  9025              STR      r0,[sp,#0x94]
;;;296    
;;;297    						if( v_memory != 0 ){
00044e  4828              LDR      r0,|L7.1264|
000450  ed900a00          VLDR     s0,[r0,#0]
000454  e062              B        |L7.1308|
000456  0000              DCW      0x0000
                  |L7.1112|
                          DCD      GUI_FontSONG16
                  |L7.1116|
                          DCD      FLAG_LANG
                  |L7.1120|
000460  4c2e522e          DCB      "L.R. TEST",0
000464  20544553
000468  5400    
00046a  00                DCB      0
00046b  00                DCB      0
                  |L7.1132|
00046c  e58685e9          DCB      229,134,133,233,152,187,230,181,139,232,175,149,0
000470  98bbe6b5
000474  8be8af95
000478  00      
000479  00                DCB      0
00047a  00                DCB      0
00047b  00                DCB      0
                  |L7.1148|
                          DCD      FLAG_OVTest
                  |L7.1152|
                          DCD      SGhListR
                  |L7.1156|
                          DCD      Un_SGhListR
                  |L7.1160|
                          DCD      GUI_FontSONG12
                  |L7.1164|
                          DCD      0x00456654
                  |L7.1168|
                          DCD      C_DISCHARGE
                  |L7.1172|
000494  54657374          DCB      "Testing",0
000498  696e6700
                  |L7.1180|
00049c  e6b58be8          DCB      230,181,139,232,175,149,228,184,173,0
0004a0  af95e4b8
0004a4  ad00    
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L7.1192|
                          DCD      POWER_RECHARGE
                  |L7.1196|
0004ac  43686172          DCB      "Charging",0
0004b0  67696e67
0004b4  00      
0004b5  00                DCB      0
0004b6  00                DCB      0
0004b7  00                DCB      0
                  |L7.1208|
0004b8  e58585e7          DCB      229,133,133,231,148,181,228,184,173,0
0004bc  94b5e4b8
0004c0  ad00    
0004c2  00                DCB      0
0004c3  00                DCB      0
                  |L7.1220|
0004c4  4e6f7420          DCB      "Not Open",0
0004c8  4f70656e
0004cc  00      
0004cd  00                DCB      0
0004ce  00                DCB      0
0004cf  00                DCB      0
                  |L7.1232|
0004d0  e69caae5          DCB      230,156,170,229,188,128,229,144,175,0
0004d4  bc80e590
0004d8  af00    
0004da  00                DCB      0
0004db  00                DCB      0
                  |L7.1244|
                          DCD      RStr
                  |L7.1248|
                          DCD      trig_flag_state
                  |L7.1252|
                          DCD      CLists
                  |L7.1256|
0004e8  447a0000          DCFS     0x447a0000 ; 1000
                  |L7.1260|
                          DCD      DISS_Voltage
                  |L7.1264|
                          DCD      v_memory
                  |L7.1268|
                          DCD      r_memory
                  |L7.1272|
                          DCD      ms_time
                  |L7.1276|
                          DCD      abc_time
                  |L7.1280|
                          DCD      max_discahrgeNum
                  |L7.1284|
000504  00000000          DCFS     0x00000000 ; 0
                  |L7.1288|
                          DCD      old_I
                  |L7.1292|
00050c  256600            DCB      "%f",0
00050f  00                DCB      0
                  |L7.1296|
                          DCD      SGhListR+0x24c
                  |L7.1300|
                          DCD      DISS_Current
                  |L7.1304|
                          DCD      SGhListR+0x90c
                  |L7.1308|
00051c  eeb50ac0          VCMPE.F32 s0,#0.0
000520  eef1fa10          VMRS     APSR_nzcv,FPSCR
000524  d030              BEQ      |L7.1416|
;;;298    							
;;;299    							sprintf( RStr, "%f", v_memory );
000526  6800              LDR      r0,[r0,#0]  ; v_memory
000528  f7fffffe          BL       __aeabi_f2d
00052c  ec410b18          VMOV     d8,r0,r1
000530  ec532b18          VMOV     r2,r3,d8
000534  f2af012c          ADR      r1,|L7.1292|
000538  48d8              LDR      r0,|L7.2204|
00053a  f7fffffe          BL       __2sprintf
;;;300    							_dloc = dot_Loc_isNull(RStr,strlen(RStr)) > 1 ? 6 : 5;
00053e  48d7              LDR      r0,|L7.2204|
000540  f7fffffe          BL       strlen
000544  4605              MOV      r5,r0
000546  4629              MOV      r1,r5
000548  48d4              LDR      r0,|L7.2204|
00054a  f7fffffe          BL       dot_Loc_isNull
00054e  2801              CMP      r0,#1
000550  dd01              BLE      |L7.1366|
000552  2006              MOVS     r0,#6
000554  e000              B        |L7.1368|
                  |L7.1366|
000556  2005              MOVS     r0,#5
                  |L7.1368|
000558  9022              STR      r0,[sp,#0x88]
;;;301    							
;;;302    							memset(SGhListR[1].f_SName, '\0', sizeof(SGhListR[1].f_SName));
00055a  2114              MOVS     r1,#0x14
00055c  48d0              LDR      r0,|L7.2208|
00055e  f7fffffe          BL       __aeabi_memclr4
;;;303    							memset(SGhListR[1].f_EName, '\0', sizeof(SGhListR[1].f_EName));
000562  2114              MOVS     r1,#0x14
000564  48ce              LDR      r0,|L7.2208|
000566  3014              ADDS     r0,r0,#0x14
000568  f7fffffe          BL       __aeabi_memclr4
;;;304    							
;;;305    							strncpy(SGhListR[1].f_SName, RStr, _dloc );	
00056c  f89d2088          LDRB     r2,[sp,#0x88]
000570  49ca              LDR      r1,|L7.2204|
000572  48cb              LDR      r0,|L7.2208|
000574  f7fffffe          BL       strncpy
;;;306    							strncpy(SGhListR[1].f_EName, RStr, _dloc);	
000578  f89d2088          LDRB     r2,[sp,#0x88]
00057c  49c7              LDR      r1,|L7.2204|
00057e  48c8              LDR      r0,|L7.2208|
000580  3014              ADDS     r0,r0,#0x14
000582  f7fffffe          BL       strncpy
000586  e030              B        |L7.1514|
                  |L7.1416|
;;;307    						
;;;308    						}else{
;;;309    							
;;;310    							sprintf( RStr, "%f", DISS_Voltage );
000588  48c6              LDR      r0,|L7.2212|
00058a  6800              LDR      r0,[r0,#0]  ; DISS_Voltage
00058c  f7fffffe          BL       __aeabi_f2d
000590  ec410b18          VMOV     d8,r0,r1
000594  ec532b18          VMOV     r2,r3,d8
000598  f2af0190          ADR      r1,|L7.1292|
00059c  48bf              LDR      r0,|L7.2204|
00059e  f7fffffe          BL       __2sprintf
;;;311    							_dloc = dot_Loc_isNull(RStr,strlen(RStr)) > 1 ? 6 : 5;
0005a2  48be              LDR      r0,|L7.2204|
0005a4  f7fffffe          BL       strlen
0005a8  4605              MOV      r5,r0
0005aa  4629              MOV      r1,r5
0005ac  48bb              LDR      r0,|L7.2204|
0005ae  f7fffffe          BL       dot_Loc_isNull
0005b2  2801              CMP      r0,#1
0005b4  dd01              BLE      |L7.1466|
0005b6  2006              MOVS     r0,#6
0005b8  e000              B        |L7.1468|
                  |L7.1466|
0005ba  2005              MOVS     r0,#5
                  |L7.1468|
0005bc  9022              STR      r0,[sp,#0x88]
;;;312    							
;;;313    							memset(SGhListR[1].f_SName, '\0', sizeof(SGhListR[1].f_SName));
0005be  2114              MOVS     r1,#0x14
0005c0  48b7              LDR      r0,|L7.2208|
0005c2  f7fffffe          BL       __aeabi_memclr4
;;;314    							memset(SGhListR[1].f_EName, '\0', sizeof(SGhListR[1].f_EName));
0005c6  2114              MOVS     r1,#0x14
0005c8  48b5              LDR      r0,|L7.2208|
0005ca  3014              ADDS     r0,r0,#0x14
0005cc  f7fffffe          BL       __aeabi_memclr4
;;;315    							
;;;316    							strncpy( SGhListR[1].f_SName, RStr, _dloc );	
0005d0  f89d2088          LDRB     r2,[sp,#0x88]
0005d4  49b1              LDR      r1,|L7.2204|
0005d6  48b2              LDR      r0,|L7.2208|
0005d8  f7fffffe          BL       strncpy
;;;317    							strncpy( SGhListR[1].f_EName, RStr, _dloc);	
0005dc  f89d2088          LDRB     r2,[sp,#0x88]
0005e0  49ae              LDR      r1,|L7.2204|
0005e2  48af              LDR      r0,|L7.2208|
0005e4  3014              ADDS     r0,r0,#0x14
0005e6  f7fffffe          BL       strncpy
                  |L7.1514|
;;;318    							
;;;319    						}
;;;320    						
;;;321    						if( r_memory != 0 ){
0005ea  48af              LDR      r0,|L7.2216|
0005ec  ed900a00          VLDR     s0,[r0,#0]
0005f0  eeb50ac0          VCMPE.F32 s0,#0.0
0005f4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0005f8  d050              BEQ      |L7.1692|
;;;322    							
;;;323    							memset( RStr, '\0', sizeof(RStr));		
0005fa  48a8              LDR      r0,|L7.2204|
0005fc  2100              MOVS     r1,#0
0005fe  6001              STR      r1,[r0,#0]  ; RStr
000600  6041              STR      r1,[r0,#4]  ; RStr
000602  8101              STRH     r1,[r0,#8]
;;;324    							memset( tChar, '\0', sizeof(tChar));					
000604  2000              MOVS     r0,#0
000606  9023              STR      r0,[sp,#0x8c]
000608  9024              STR      r0,[sp,#0x90]
00060a  9025              STR      r0,[sp,#0x94]
;;;325    							sprintf( tChar, "%d", (int)r_memory );
00060c  48a6              LDR      r0,|L7.2216|
00060e  ed900a00          VLDR     s0,[r0,#0]
000612  eebd0ac0          VCVT.S32.F32 s0,s0
000616  ee102a10          VMOV     r2,s0
00061a  a1a4              ADR      r1,|L7.2220|
00061c  a823              ADD      r0,sp,#0x8c
00061e  f7fffffe          BL       __2sprintf
;;;326    							if( r_memory < 1 ){
000622  48a1              LDR      r0,|L7.2216|
000624  ed900a00          VLDR     s0,[r0,#0]
000628  eef70a00          VMOV.F32 s1,#1.00000000
00062c  eeb40ae0          VCMPE.F32 s0,s1
000630  eef1fa10          VMRS     APSR_nzcv,FPSCR
000634  d204              BCS      |L7.1600|
;;;327    								strcpy( RStr, "0000" );
000636  a19e              ADR      r1,|L7.2224|
000638  4898              LDR      r0,|L7.2204|
00063a  f7fffffe          BL       strcpy
00063e  e018              B        |L7.1650|
                  |L7.1600|
;;;328    							}else{
;;;329    								for( i = 0; i < 4 - strlen(tChar); i++ ){			
000640  2000              MOVS     r0,#0
000642  9026              STR      r0,[sp,#0x98]
000644  e008              B        |L7.1624|
                  |L7.1606|
;;;330    									strcat(RStr,"0");
000646  a19c              ADR      r1,|L7.2232|
000648  4894              LDR      r0,|L7.2204|
00064a  f7fffffe          BL       strcat
00064e  f89d0098          LDRB     r0,[sp,#0x98]         ;329
000652  1c40              ADDS     r0,r0,#1              ;329
000654  b2c0              UXTB     r0,r0                 ;329
000656  9026              STR      r0,[sp,#0x98]         ;329
                  |L7.1624|
000658  a823              ADD      r0,sp,#0x8c           ;329
00065a  f7fffffe          BL       strlen
00065e  f1c00004          RSB      r0,r0,#4              ;329
000662  f89d1098          LDRB     r1,[sp,#0x98]         ;329
000666  4288              CMP      r0,r1                 ;329
000668  d8ed              BHI      |L7.1606|
;;;331    								}
;;;332    								strcat( RStr, tChar);
00066a  a923              ADD      r1,sp,#0x8c
00066c  488b              LDR      r0,|L7.2204|
00066e  f7fffffe          BL       strcat
                  |L7.1650|
;;;333    							}
;;;334    							
;;;335    							memset(SGhListR[4].f_SName, '\0', sizeof(SGhListR[4].f_SName));
000672  2114              MOVS     r1,#0x14
000674  488a              LDR      r0,|L7.2208|
000676  30d8              ADDS     r0,r0,#0xd8
000678  f7fffffe          BL       __aeabi_memclr4
;;;336    							memset(SGhListR[4].f_EName, '\0', sizeof(SGhListR[4].f_EName));
00067c  2114              MOVS     r1,#0x14
00067e  4888              LDR      r0,|L7.2208|
000680  30ec              ADDS     r0,r0,#0xec
000682  f7fffffe          BL       __aeabi_memclr4
;;;337    							strcpy(SGhListR[4].f_SName, RStr );	
000686  4985              LDR      r1,|L7.2204|
000688  4885              LDR      r0,|L7.2208|
00068a  30d8              ADDS     r0,r0,#0xd8
00068c  f7fffffe          BL       strcpy
;;;338    							strcpy(SGhListR[4].f_EName, RStr);
000690  4982              LDR      r1,|L7.2204|
000692  4883              LDR      r0,|L7.2208|
000694  30ec              ADDS     r0,r0,#0xec
000696  f7fffffe          BL       strcpy
00069a  e0cd              B        |L7.2104|
                  |L7.1692|
;;;339    						
;;;340    						}else{
;;;341    							
;;;342    							memset( RStr, '\0', sizeof(RStr));		
00069c  487f              LDR      r0,|L7.2204|
00069e  2100              MOVS     r1,#0
0006a0  6001              STR      r1,[r0,#0]  ; RStr
0006a2  6041              STR      r1,[r0,#4]  ; RStr
0006a4  8101              STRH     r1,[r0,#8]
;;;343    							memset( tChar, '\0', sizeof(tChar));					
0006a6  2000              MOVS     r0,#0
0006a8  9023              STR      r0,[sp,#0x8c]
0006aa  9024              STR      r0,[sp,#0x90]
0006ac  9025              STR      r0,[sp,#0x94]
;;;344    							sprintf( tChar, "%d", CLists.CR_VLUE );
0006ae  4883              LDR      r0,|L7.2236|
0006b0  6b82              LDR      r2,[r0,#0x38]  ; CLists
0006b2  a17e              ADR      r1,|L7.2220|
0006b4  a823              ADD      r0,sp,#0x8c
0006b6  f7fffffe          BL       __2sprintf
;;;345    							if( DISS_Voltage < 0.01 ){
0006ba  487a              LDR      r0,|L7.2212|
0006bc  6800              LDR      r0,[r0,#0]  ; DISS_Voltage
0006be  f7fffffe          BL       __aeabi_f2d
0006c2  ec410b18          VMOV     d8,r0,r1
0006c6  ed9f0b7e          VLDR     d0,|L7.2240|
0006ca  ec532b10          VMOV     r2,r3,d0
0006ce  f7fffffe          BL       __aeabi_cdcmple
0006d2  d204              BCS      |L7.1758|
;;;346    								strcpy( RStr, "0000" );
0006d4  a176              ADR      r1,|L7.2224|
0006d6  4871              LDR      r0,|L7.2204|
0006d8  f7fffffe          BL       strcpy
0006dc  e018              B        |L7.1808|
                  |L7.1758|
;;;347    							}else{
;;;348    								for( i = 0; i < 4 - strlen(tChar); i++ ){			
0006de  2000              MOVS     r0,#0
0006e0  9026              STR      r0,[sp,#0x98]
0006e2  e008              B        |L7.1782|
                  |L7.1764|
;;;349    									strcat(RStr,"0");
0006e4  a174              ADR      r1,|L7.2232|
0006e6  486d              LDR      r0,|L7.2204|
0006e8  f7fffffe          BL       strcat
0006ec  f89d0098          LDRB     r0,[sp,#0x98]         ;348
0006f0  1c40              ADDS     r0,r0,#1              ;348
0006f2  b2c0              UXTB     r0,r0                 ;348
0006f4  9026              STR      r0,[sp,#0x98]         ;348
                  |L7.1782|
0006f6  a823              ADD      r0,sp,#0x8c           ;348
0006f8  f7fffffe          BL       strlen
0006fc  f1c00004          RSB      r0,r0,#4              ;348
000700  f89d1098          LDRB     r1,[sp,#0x98]         ;348
000704  4288              CMP      r0,r1                 ;348
000706  d8ed              BHI      |L7.1764|
;;;350    								}
;;;351    								strcat( RStr, tChar);
000708  a923              ADD      r1,sp,#0x8c
00070a  4864              LDR      r0,|L7.2204|
00070c  f7fffffe          BL       strcat
                  |L7.1808|
;;;352    							}
;;;353    							
;;;354    							memset(SGhListR[4].f_SName, '\0', sizeof(SGhListR[4].f_SName));
000710  2114              MOVS     r1,#0x14
000712  4863              LDR      r0,|L7.2208|
000714  30d8              ADDS     r0,r0,#0xd8
000716  f7fffffe          BL       __aeabi_memclr4
;;;355    							memset(SGhListR[4].f_EName, '\0', sizeof(SGhListR[4].f_EName));
00071a  2114              MOVS     r1,#0x14
00071c  4860              LDR      r0,|L7.2208|
00071e  30ec              ADDS     r0,r0,#0xec
000720  f7fffffe          BL       __aeabi_memclr4
;;;356    							strcpy(SGhListR[4].f_SName, RStr );	
000724  495d              LDR      r1,|L7.2204|
000726  485e              LDR      r0,|L7.2208|
000728  30d8              ADDS     r0,r0,#0xd8
00072a  f7fffffe          BL       strcpy
;;;357    							strcpy(SGhListR[4].f_EName, RStr);
00072e  495b              LDR      r1,|L7.2204|
000730  485b              LDR      r0,|L7.2208|
000732  30ec              ADDS     r0,r0,#0xec
000734  f7fffffe          BL       strcpy
000738  e07e              B        |L7.2104|
                  |L7.1850|
;;;358    						}
;;;359    							
;;;360    					}
;;;361    					else{
;;;362    				
;;;363    						sprintf( RStr, "%f", DISS_Voltage );
00073a  485a              LDR      r0,|L7.2212|
00073c  6800              LDR      r0,[r0,#0]  ; DISS_Voltage
00073e  f7fffffe          BL       __aeabi_f2d
000742  ec410b18          VMOV     d8,r0,r1
000746  ec532b18          VMOV     r2,r3,d8
00074a  f2af2140          ADR      r1,|L7.1292|
00074e  4853              LDR      r0,|L7.2204|
000750  f7fffffe          BL       __2sprintf
;;;364    						_dloc = dot_Loc_isNull(RStr,strlen(RStr)) > 1 ? 6 : 5;
000754  4851              LDR      r0,|L7.2204|
000756  f7fffffe          BL       strlen
00075a  4605              MOV      r5,r0
00075c  4629              MOV      r1,r5
00075e  484f              LDR      r0,|L7.2204|
000760  f7fffffe          BL       dot_Loc_isNull
000764  2801              CMP      r0,#1
000766  dd01              BLE      |L7.1900|
000768  2006              MOVS     r0,#6
00076a  e000              B        |L7.1902|
                  |L7.1900|
00076c  2005              MOVS     r0,#5
                  |L7.1902|
00076e  9022              STR      r0,[sp,#0x88]
;;;365    						
;;;366    						memset(Un_SGhListR[1].f_SName, '\0', sizeof(Un_SGhListR[1].f_SName));
000770  2114              MOVS     r1,#0x14
000772  4855              LDR      r0,|L7.2248|
000774  f7fffffe          BL       __aeabi_memclr4
;;;367    						memset(Un_SGhListR[1].f_EName, '\0', sizeof(Un_SGhListR[1].f_EName));
000778  2114              MOVS     r1,#0x14
00077a  4853              LDR      r0,|L7.2248|
00077c  3014              ADDS     r0,r0,#0x14
00077e  f7fffffe          BL       __aeabi_memclr4
;;;368    						
;;;369    						strncpy( Un_SGhListR[1].f_SName, RStr, _dloc );	
000782  f89d2088          LDRB     r2,[sp,#0x88]
000786  4945              LDR      r1,|L7.2204|
000788  484f              LDR      r0,|L7.2248|
00078a  f7fffffe          BL       strncpy
;;;370    						strncpy( Un_SGhListR[1].f_EName, RStr, _dloc);	
00078e  f89d2088          LDRB     r2,[sp,#0x88]
000792  4942              LDR      r1,|L7.2204|
000794  484c              LDR      r0,|L7.2248|
000796  3014              ADDS     r0,r0,#0x14
000798  f7fffffe          BL       strncpy
;;;371    						
;;;372    						memset( RStr, '\0', sizeof(RStr));		
00079c  483f              LDR      r0,|L7.2204|
00079e  2100              MOVS     r1,#0
0007a0  6001              STR      r1,[r0,#0]  ; RStr
0007a2  6041              STR      r1,[r0,#4]  ; RStr
0007a4  8101              STRH     r1,[r0,#8]
;;;373    						memset( tChar, '\0', sizeof(tChar));					
0007a6  2000              MOVS     r0,#0
0007a8  9023              STR      r0,[sp,#0x8c]
0007aa  9024              STR      r0,[sp,#0x90]
0007ac  9025              STR      r0,[sp,#0x94]
;;;374    						sprintf( tChar, "%d", CLists.CR_VLUE );
0007ae  4843              LDR      r0,|L7.2236|
0007b0  6b82              LDR      r2,[r0,#0x38]  ; CLists
0007b2  a13e              ADR      r1,|L7.2220|
0007b4  a823              ADD      r0,sp,#0x8c
0007b6  f7fffffe          BL       __2sprintf
;;;375    						if( DISS_Voltage < 0.01 ){
0007ba  483a              LDR      r0,|L7.2212|
0007bc  6800              LDR      r0,[r0,#0]  ; DISS_Voltage
0007be  f7fffffe          BL       __aeabi_f2d
0007c2  ec410b18          VMOV     d8,r0,r1
0007c6  ed9f0b3e          VLDR     d0,|L7.2240|
0007ca  ec532b10          VMOV     r2,r3,d0
0007ce  f7fffffe          BL       __aeabi_cdcmple
0007d2  d204              BCS      |L7.2014|
;;;376    							strcpy( RStr, "0000" );
0007d4  a136              ADR      r1,|L7.2224|
0007d6  4831              LDR      r0,|L7.2204|
0007d8  f7fffffe          BL       strcpy
0007dc  e018              B        |L7.2064|
                  |L7.2014|
;;;377    						}else{
;;;378    							for( i = 0; i < 4 - strlen(tChar); i++ ){			
0007de  2000              MOVS     r0,#0
0007e0  9026              STR      r0,[sp,#0x98]
0007e2  e008              B        |L7.2038|
                  |L7.2020|
;;;379    								strcat(RStr,"0");
0007e4  a134              ADR      r1,|L7.2232|
0007e6  482d              LDR      r0,|L7.2204|
0007e8  f7fffffe          BL       strcat
0007ec  f89d0098          LDRB     r0,[sp,#0x98]         ;378
0007f0  1c40              ADDS     r0,r0,#1              ;378
0007f2  b2c0              UXTB     r0,r0                 ;378
0007f4  9026              STR      r0,[sp,#0x98]         ;378
                  |L7.2038|
0007f6  a823              ADD      r0,sp,#0x8c           ;378
0007f8  f7fffffe          BL       strlen
0007fc  f1c00004          RSB      r0,r0,#4              ;378
000800  f89d1098          LDRB     r1,[sp,#0x98]         ;378
000804  4288              CMP      r0,r1                 ;378
000806  d8ed              BHI      |L7.2020|
;;;380    							}
;;;381    							strcat( RStr, tChar);
000808  a923              ADD      r1,sp,#0x8c
00080a  4824              LDR      r0,|L7.2204|
00080c  f7fffffe          BL       strcat
                  |L7.2064|
;;;382    						}
;;;383    						
;;;384    						memset(Un_SGhListR[4].f_SName, '\0', sizeof(Un_SGhListR[4].f_SName));
000810  2114              MOVS     r1,#0x14
000812  482d              LDR      r0,|L7.2248|
000814  30d8              ADDS     r0,r0,#0xd8
000816  f7fffffe          BL       __aeabi_memclr4
;;;385    						memset(Un_SGhListR[4].f_EName, '\0', sizeof(Un_SGhListR[4].f_EName));
00081a  2114              MOVS     r1,#0x14
00081c  482a              LDR      r0,|L7.2248|
00081e  30ec              ADDS     r0,r0,#0xec
000820  f7fffffe          BL       __aeabi_memclr4
;;;386    						strcpy(Un_SGhListR[4].f_SName, RStr );	
000824  491d              LDR      r1,|L7.2204|
000826  4828              LDR      r0,|L7.2248|
000828  30d8              ADDS     r0,r0,#0xd8
00082a  f7fffffe          BL       strcpy
;;;387    						strcpy(Un_SGhListR[4].f_EName, RStr);
00082e  491b              LDR      r1,|L7.2204|
000830  4825              LDR      r0,|L7.2248|
000832  30ec              ADDS     r0,r0,#0xec
000834  f7fffffe          BL       strcpy
                  |L7.2104|
;;;388    							
;;;389    					}
;;;390    					memset( RStr, '\0', sizeof(RStr)); 		
000838  4818              LDR      r0,|L7.2204|
00083a  2100              MOVS     r1,#0
00083c  6001              STR      r1,[r0,#0]  ; RStr
00083e  6041              STR      r1,[r0,#4]  ; RStr
000840  8101              STRH     r1,[r0,#8]
;;;391    					memset( tChar, '\0', sizeof(tChar));
000842  2000              MOVS     r0,#0
000844  9023              STR      r0,[sp,#0x8c]
000846  9024              STR      r0,[sp,#0x90]
000848  9025              STR      r0,[sp,#0x94]
;;;392    					
;;;393    					WM_InvalidateWindow(hWinR);	
00084a  4820              LDR      r0,|L7.2252|
00084c  6800              LDR      r0,[r0,#0]  ; hWinR
00084e  f7fffffe          BL       WM_InvalidateWindow
;;;394    					WM_RestartTimer(pMsg->Data.v, 500);    //复位定时器数值越大刷新时间越短
000852  f44f71fa          MOV      r1,#0x1f4
000856  68e0              LDR      r0,[r4,#0xc]
000858  f7fffffe          BL       WM_RestartTimer
                  |L7.2140|
;;;395    				}
;;;396    				
;;;397    			break;
00085c  e017              B        |L7.2190|
                  |L7.2142|
;;;398    				
;;;399    			case WM_INIT_DIALOG:{
;;;400    			
;;;401    					WINDOW_SetBkColor(pMsg->hWin, 0x004A4655);
00085e  491c              LDR      r1,|L7.2256|
000860  6860              LDR      r0,[r4,#4]
000862  f7fffffe          BL       WINDOW_SetBkColor
;;;402    					
;;;403    					WM_CreateTimer( pMsg->hWin ,ID_TimerTimeR ,20 , 0);//创建本窗口定时器
000866  2300              MOVS     r3,#0
000868  2214              MOVS     r2,#0x14
00086a  2101              MOVS     r1,#1
00086c  6860              LDR      r0,[r4,#4]
00086e  f7fffffe          BL       WM_CreateTimer
;;;404    						
;;;405    					MAX_LEN = sizeof(slistR)/sizeof(slistR[0]);
000872  2605              MOVS     r6,#5
;;;406    					
;;;407    					bush_WinObj( FLAG_LANG, pMsg , slistR , MAX_LEN);
000874  4633              MOV      r3,r6
000876  4a17              LDR      r2,|L7.2260|
000878  4621              MOV      r1,r4
00087a  4817              LDR      r0,|L7.2264|
00087c  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
00087e  f7fffffe          BL       bush_WinObj
;;;408    			}
;;;409    			
;;;410    			break;
000882  e004              B        |L7.2190|
                  |L7.2180|
;;;411    			
;;;412    			case WM_NOTIFY_PARENT:
;;;413    
;;;414    			break;
000884  e003              B        |L7.2190|
                  |L7.2182|
;;;415    			
;;;416    			default:
;;;417    			
;;;418    				WM_DefaultProc(pMsg);
000886  4620              MOV      r0,r4
000888  f7fffffe          BL       WM_DefaultProc
;;;419    			break;
00088c  bf00              NOP      
                  |L7.2190|
00088e  bf00              NOP                            ;225
;;;420      
;;;421    	}
;;;422    
;;;423    }
000890  b027              ADD      sp,sp,#0x9c
000892  ecbd8b02          VPOP     {d8}
000896  e8bd83f0          POP      {r4-r9,pc}
;;;424    
                          ENDP

00089a  0000              DCW      0x0000
                  |L7.2204|
                          DCD      RStr
                  |L7.2208|
                          DCD      SGhListR+0x54
                  |L7.2212|
                          DCD      DISS_Voltage
                  |L7.2216|
                          DCD      r_memory
                  |L7.2220|
0008ac  256400            DCB      "%d",0
0008af  00                DCB      0
                  |L7.2224|
0008b0  30303030          DCB      "0000",0
0008b4  00      
0008b5  00                DCB      0
0008b6  00                DCB      0
0008b7  00                DCB      0
                  |L7.2232|
0008b8  3000              DCB      "0",0
0008ba  00                DCB      0
0008bb  00                DCB      0
                  |L7.2236|
                          DCD      CLists
                  |L7.2240|
0008c0  47ae147b          DCFD     0x3f847ae147ae147b ; 0.01
0008c4  3f847ae1
                  |L7.2248|
                          DCD      Un_SGhListR+0x54
                  |L7.2252|
                          DCD      hWinR
                  |L7.2256|
                          DCD      0x004a4655
                  |L7.2260|
                          DCD      slistR
                  |L7.2264|
                          DCD      FLAG_LANG

                          AREA ||i.trig_R_charge||, CODE, READONLY, ALIGN=2

                  trig_R_charge PROC
;;;1243   
;;;1244   void trig_R_charge()
000000  b510              PUSH     {r4,lr}
;;;1245   {
;;;1246   
;;;1247   		if( trig_flag_state == 0 )
000002  4818              LDR      r0,|L8.100|
000004  7800              LDRB     r0,[r0,#0]  ; trig_flag_state
000006  b980              CBNZ     r0,|L8.42|
;;;1248   		{
;;;1249   				trig_flag_state = 1;	
000008  2001              MOVS     r0,#1
00000a  4916              LDR      r1,|L8.100|
00000c  7008              STRB     r0,[r1,#0]
;;;1250   				POWER_RECHARGE = 1;
00000e  4916              LDR      r1,|L8.104|
000010  7008              STRB     r0,[r1,#0]
;;;1251   				keydown_trig = 1;
000012  4916              LDR      r1,|L8.108|
000014  7008              STRB     r0,[r1,#0]
;;;1252   				OnOff_GPOI_ResetSet( 0 , 1 );	
000016  2101              MOVS     r1,#1
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       OnOff_GPOI_ResetSet
;;;1253   				ms_time = 0;
00001e  2000              MOVS     r0,#0
000020  4913              LDR      r1,|L8.112|
000022  6008              STR      r0,[r1,#0]  ; ms_time
;;;1254   				abc_time = 0;
000024  4913              LDR      r1,|L8.116|
000026  6008              STR      r0,[r1,#0]  ; abc_time
000028  e017              B        |L8.90|
                  |L8.42|
;;;1255   		
;;;1256   		}
;;;1257   		else if( trig_flag_state == 1 &&( POWER_RECHARGE == 1 || C_DISCHARGE == 1))
00002a  480e              LDR      r0,|L8.100|
00002c  7800              LDRB     r0,[r0,#0]  ; trig_flag_state
00002e  2801              CMP      r0,#1
000030  d113              BNE      |L8.90|
000032  480d              LDR      r0,|L8.104|
000034  7800              LDRB     r0,[r0,#0]  ; POWER_RECHARGE
000036  2801              CMP      r0,#1
000038  d003              BEQ      |L8.66|
00003a  480f              LDR      r0,|L8.120|
00003c  7800              LDRB     r0,[r0,#0]  ; C_DISCHARGE
00003e  2801              CMP      r0,#1
000040  d10b              BNE      |L8.90|
                  |L8.66|
;;;1258   		{	
;;;1259   				Off_GPOI_ResetSet();
000042  f7fffffe          BL       Off_GPOI_ResetSet
;;;1260   				trig_flag_state = 0;
000046  2000              MOVS     r0,#0
000048  4906              LDR      r1,|L8.100|
00004a  7008              STRB     r0,[r1,#0]
;;;1261   				keydown_trig = 0;
00004c  4907              LDR      r1,|L8.108|
00004e  7008              STRB     r0,[r1,#0]
;;;1262   				CLists.CSET_Current_Laod =  CLists.IR_Start_C;
000050  480a              LDR      r0,|L8.124|
000052  f8b000d4          LDRH     r0,[r0,#0xd4]  ; CLists
000056  4909              LDR      r1,|L8.124|
000058  6148              STR      r0,[r1,#0x14]  ; CLists
                  |L8.90|
;;;1263   		}
;;;1264   		WM_InvalidateWindow(hWinR);
00005a  4809              LDR      r0,|L8.128|
00005c  6800              LDR      r0,[r0,#0]  ; hWinR
00005e  f7fffffe          BL       WM_InvalidateWindow
;;;1265   	
;;;1266   }
000062  bd10              POP      {r4,pc}
;;;1267   
                          ENDP

                  |L8.100|
                          DCD      trig_flag_state
                  |L8.104|
                          DCD      POWER_RECHARGE
                  |L8.108|
                          DCD      keydown_trig
                  |L8.112|
                          DCD      ms_time
                  |L8.116|
                          DCD      abc_time
                  |L8.120|
                          DCD      C_DISCHARGE
                  |L8.124|
                          DCD      CLists
                  |L8.128|
                          DCD      hWinR

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  RStr
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _aDialogCreate
                          DCD      WINDOW_CreateIndirect
                          DCD      ||.conststring||
000008  08000000          DCW      0x0800,0x0000
00000c  000001e0          DCW      0x0000,0x01e0
000010  01100000          DCW      0x0110,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x4
000024  08020055          DCW      0x0802,0x0055
000028  00e80046          DCW      0x00e8,0x0046
00002c  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x4
000040  080300a4          DCW      0x0803,0x00a4
000044  00e80046          DCW      0x00e8,0x0046
000048  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x4
00005c  080400f3          DCW      0x0804,0x00f3
000060  00e80046          DCW      0x00e8,0x0046
000064  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x4
000078  08050142          DCW      0x0805,0x0142
00007c  00e80046          DCW      0x00e8,0x0046
000080  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x4
000094  08060191          DCW      0x0806,0x0191
000098  00e80046          DCW      0x00e8,0x0046
00009c  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                  WINR_id_DataLists
                          DCD      0x00000015
                          DCD      0x00000018
                          DCD      0x0000001b
                          DCD      0x0000001e

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  5200              DCB      "R",0
000002  00                DCB      0
000003  00                DCB      0
000004  42757474          DCB      "Button",0
000008  6f6e00  

                          AREA ||.data||, DATA, ALIGN=2

                  hWinR
                          DCD      0x00000000
                  DISS_Voltage
                          DCD      0x00000000
                  DISS_POW_Voltage
                          DCD      0x00000000
                  DISS_Current
                          DCD      0x00000000
                  DISS_POW_Current
                          DCD      0x00000000
                  DISS_R
                          DCD      0x00000000
                  SGhListR
                          DCD      0x00000001
                          DCD      0x00000000
                          DCD      0x00000002
000024  563a0000          DCB      0x56,0x3a,0x00,0x00
                          %        16
000038  563a0000          DCB      0x56,0x3a,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000058  001e002d          DCW      0x001e,0x002d
00005c  00000000          DCW      0x0000,0x0000
                          DCD      0x00000002
                          DCD      0x00000000
                          DCD      0x00000002
00006c  302e3030          DCB      0x30,0x2e,0x30,0x30
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
000080  302e3030          DCB      0x30,0x2e,0x30,0x30
000084  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
0000a0  0058002d          DCW      0x0058,0x002d
0000a4  00000000          DCW      0x0000,0x0000
                          DCD      0x00000003
                          DCD      0x00000000
                          DCD      0x00000002
0000b4  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
0000c8  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
0000e8  00b2002d          DCW      0x00b2,0x002d
0000ec  00000000          DCW      0x0000,0x0000
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000002
0000fc  523a0000          DCB      0x52,0x3a,0x00,0x00
                          %        16
000110  523a0000          DCB      0x52,0x3a,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000130  001e0050          DCW      0x001e,0x0050
000134  00000000          DCW      0x0000,0x0000
                          DCD      0x00000005
                          DCD      0x00000000
                          DCD      0x00000002
000144  30303030          DCB      0x30,0x30,0x30,0x30
000148  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
000158  30303030          DCB      0x30,0x30,0x30,0x30
00015c  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000178  00580050          DCW      0x0058,0x0050
00017c  00000000          DCW      0x0000,0x0000
                          DCD      0x00000006
                          DCD      0x00000000
                          DCD      0x00000002
00018c  6d000000          DCB      0x6d,0x00,0x00,0x00
                          %        16
0001a0  6d000000          DCB      0x6d,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
0001c0  00b20050          DCW      0x00b2,0x0050
0001c4  00000000          DCW      0x0000,0x0000
                          DCD      0x00000007
                          DCD      0x00000000
                          DCD      0x00000002
0001d4  cea90000          DCB      0xce,0xa9,0x00,0x00
                          %        16
0001e8  cea90000          DCB      0xce,0xa9,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000208  00bb0052          DCW      0x00bb,0x0052
00020c  00000000          DCW      0x0000,0x0000
                          DCD      0x00000008
                          DCD      0x00000000
                          DCD      0x00000002
00021c  493a0000          DCB      0x49,0x3a,0x00,0x00
                          %        16
000230  493a0000          DCB      0x49,0x3a,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000250  001e0073          DCW      0x001e,0x0073
000254  00000000          DCW      0x0000,0x0000
                          DCD      0x00000009
                          DCD      0x00000000
                          DCD      0x00000002
000264  302e3030          DCB      0x30,0x2e,0x30,0x30
000268  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
000278  302e3030          DCB      0x30,0x2e,0x30,0x30
00027c  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000298  00580073          DCW      0x0058,0x0073
00029c  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000a
                          DCD      0x00000000
                          DCD      0x00000002
0002ac  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
0002c0  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
0002e0  00b20073          DCW      0x00b2,0x0073
0002e4  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000b
                          DCD      0x00000000
                          DCD      0x00000002
0002f4  52313a00          DCB      0x52,0x31,0x3a,0x00
                          %        16
000308  52313a00          DCB      0x52,0x31,0x3a,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000328  001e0096          DCW      0x001e,0x0096
00032c  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000c
                          DCD      0x00000000
                          DCD      0x00000002
00033c  30303030          DCB      0x30,0x30,0x30,0x30
000340  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
000350  30303030          DCB      0x30,0x30,0x30,0x30
000354  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000370  00580096          DCW      0x0058,0x0096
000374  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000d
                          DCD      0x00000000
                          DCD      0x00000002
000384  00000000          DCB      0x00,0x00,0x00,0x00
                          %        16
000398  00000000          DCB      0x00,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
0003b8  00b20096          DCW      0x00b2,0x0096
0003bc  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000e
                          DCD      0x00000000
                          DCD      0x00000002
0003cc  cea90000          DCB      0xce,0xa9,0x00,0x00
                          %        16
0003e0  cea90000          DCB      0xce,0xa9,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000400  00bb0098          DCW      0x00bb,0x0098
000404  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000f
                          DCD      0x00000000
                          DCD      0x00000002
000414  52323a00          DCB      0x52,0x32,0x3a,0x00
                          %        16
000428  52320000          DCB      0x52,0x32,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000448  001e00b9          DCW      0x001e,0x00b9
00044c  00000000          DCW      0x0000,0x0000
                          DCD      0x00000010
                          DCD      0x00000000
                          DCD      0x00000002
00045c  30303030          DCB      0x30,0x30,0x30,0x30
000460  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
000470  30303030          DCB      0x30,0x30,0x30,0x30
000474  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000490  005800b9          DCW      0x0058,0x00b9
000494  00000000          DCW      0x0000,0x0000
                          DCD      0x00000011
                          DCD      0x00000000
                          DCD      0x00000002
0004a4  00000000          DCB      0x00,0x00,0x00,0x00
                          %        16
0004b8  00000000          DCB      0x00,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
0004d8  00b200b9          DCW      0x00b2,0x00b9
0004dc  00000000          DCW      0x0000,0x0000
                          DCD      0x00000012
                          DCD      0x00000000
                          DCD      0x00000002
0004ec  cea90000          DCB      0xce,0xa9,0x00,0x00
                          %        16
000500  cea90000          DCB      0xce,0xa9,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000520  00bb00bb          DCW      0x00bb,0x00bb
000524  00000000          DCW      0x0000,0x0000
                          DCD      0x00000013
                          DCD      0x00000000
                          DCD      0x00000002
000534  e8bf87e6          DCB      0xe8,0xbf,0x87,0xe6
000538  b581e6b5          DCB      0xb5,0x81,0xe6,0xb5
00053c  8be8af95          DCB      0x8b,0xe8,0xaf,0x95
000540  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000548  4f766572          DCB      0x4f,0x76,0x65,0x72
00054c  666c6f77          DCB      0x66,0x6c,0x6f,0x77
000550  20546573          DCB      0x20,0x54,0x65,0x73
000554  74000000          DCB      0x74,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000568  01040028          DCW      0x0104,0x0028
00056c  00000000          DCW      0x0000,0x0000
                          DCD      0x00000014
                          DCD      0x00000000
                          DCD      0x00000002
00057c  e8b5b7e5          DCB      0xe8,0xb5,0xb7,0xe5
000580  a78be794          DCB      0xa7,0x8b,0xe7,0x94
000584  b5e6b581          DCB      0xb5,0xe6,0xb5,0x81
000588  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000590  53746172          DCB      0x53,0x74,0x61,0x72
000594  74696e67          DCB      0x74,0x69,0x6e,0x67
000598  20430000          DCB      0x20,0x43,0x00,0x00
                          %        8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0005b0  01040041          DCW      0x0104,0x0041
0005b4  00000000          DCW      0x0000,0x0000
                          DCD      0x00000015
                          DCD      0x00000001
                          DCD      0x00000001
0005c4  312e3030          DCB      0x31,0x2e,0x30,0x30
0005c8  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
0005d8  312e3030          DCB      0x31,0x2e,0x30,0x30
0005dc  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0005f8  015e0041          DCW      0x015e,0x0041
0005fc  01900052          DCW      0x0190,0x0052
                          DCD      0x00000016
                          DCD      0x00000000
                          DCD      0x00000002
00060c  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
000620  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000640  01ae0041          DCW      0x01ae,0x0041
000644  00000000          DCW      0x0000,0x0000
                          DCD      0x00000017
                          DCD      0x00000000
                          DCD      0x00000002
000654  e6ada5e8          DCB      0xe6,0xad,0xa5,0xe8
000658  bf9be794          DCB      0xbf,0x9b,0xe7,0x94
00065c  b5e6b581          DCB      0xb5,0xe6,0xb5,0x81
000660  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000668  53746570          DCB      0x53,0x74,0x65,0x70
00066c  70696e67          DCB      0x70,0x69,0x6e,0x67
000670  20430000          DCB      0x20,0x43,0x00,0x00
                          %        8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000688  0104005a          DCW      0x0104,0x005a
00068c  00000000          DCW      0x0000,0x0000
                          DCD      0x00000018
                          DCD      0x00000000
                          DCD      0x00000001
00069c  352e3030          DCB      0x35,0x2e,0x30,0x30
0006a0  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
0006b0  352e3030          DCB      0x35,0x2e,0x30,0x30
0006b4  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0006d0  015e005a          DCW      0x015e,0x005a
0006d4  0190006b          DCW      0x0190,0x006b
                          DCD      0x00000019
                          DCD      0x00000000
                          DCD      0x00000002
0006e4  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
0006f8  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000718  01ae005a          DCW      0x01ae,0x005a
00071c  00000000          DCW      0x0000,0x0000
                          DCD      0x0000001a
                          DCD      0x00000000
                          DCD      0x00000002
00072c  e997a8e6          DCB      0xe9,0x97,0xa8,0xe6
000730  a79be794          DCB      0xa7,0x9b,0xe7,0x94
000734  b5e58e8b          DCB      0xb5,0xe5,0x8e,0x8b
000738  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000740  54687265          DCB      0x54,0x68,0x72,0x65
000744  73686f6c          DCB      0x73,0x68,0x6f,0x6c
000748  64205600          DCB      0x64,0x20,0x56,0x00
                          %        8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000760  01040073          DCW      0x0104,0x0073
000764  00000000          DCW      0x0000,0x0000
                          DCD      0x0000001b
                          DCD      0x00000000
                          DCD      0x00000001
000774  302e3030          DCB      0x30,0x2e,0x30,0x30
000778  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
000788  302e3030          DCB      0x30,0x2e,0x30,0x30
00078c  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0007a8  015e0073          DCW      0x015e,0x0073
0007ac  01900084          DCW      0x0190,0x0084
                          DCD      0x0000001c
                          DCD      0x00000000
                          DCD      0x00000002
0007bc  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
0007d0  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0007f0  01ae0073          DCW      0x01ae,0x0073
0007f4  00000000          DCW      0x0000,0x0000
                          DCD      0x0000001d
                          DCD      0x00000000
                          DCD      0x00000002
000804  e6ada5e8          DCB      0xe6,0xad,0xa5,0xe8
000808  bf9be697          DCB      0xbf,0x9b,0xe6,0x97
00080c  b6e997b4          DCB      0xb6,0xe9,0x97,0xb4
000810  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000818  53746570          DCB      0x53,0x74,0x65,0x70
00081c  2054696d          DCB      0x20,0x54,0x69,0x6d
000820  65000000          DCB      0x65,0x00,0x00,0x00
                          %        8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000838  0104008c          DCW      0x0104,0x008c
00083c  00000000          DCW      0x0000,0x0000
                          DCD      0x0000001e
                          DCD      0x00000000
                          DCD      0x00000001
00084c  30303032          DCB      0x30,0x30,0x30,0x32
000850  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
000860  30303032          DCB      0x30,0x30,0x30,0x32
000864  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000880  015e008c          DCW      0x015e,0x008c
000884  0190009d          DCW      0x0190,0x009d
                          DCD      0x0000001f
                          DCD      0x00000000
                          DCD      0x00000002
000894  6d730000          DCB      0x6d,0x73,0x00,0x00
                          %        16
0008a8  6d730000          DCB      0x6d,0x73,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0008c8  01ae008c          DCW      0x01ae,0x008c
0008cc  00000000          DCW      0x0000,0x0000
                          DCD      0x00000020
                          DCD      0x00000000
                          DCD      0x00000002
0008dc  e794b5e6          DCB      0xe7,0x94,0xb5,0xe6
0008e0  b5810000          DCB      0xb5,0x81,0x00,0x00
                          %        12
0008f0  43757272          DCB      0x43,0x75,0x72,0x72
0008f4  656e7400          DCB      0x65,0x6e,0x74,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000910  010400a5          DCW      0x0104,0x00a5
000914  00000000          DCW      0x0000,0x0000
                          DCD      0x00000021
                          DCD      0x00000000
                          DCD      0x00000002
000924  302e3030          DCB      0x30,0x2e,0x30,0x30
000928  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
000938  302e3030          DCB      0x30,0x2e,0x30,0x30
00093c  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000958  015e00a5          DCW      0x015e,0x00a5
00095c  019000b6          DCW      0x0190,0x00b6
                          DCD      0x00000022
                          DCD      0x00000000
                          DCD      0x00000002
00096c  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
000980  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0009a0  01ae00a5          DCW      0x01ae,0x00a5
0009a4  00000000          DCW      0x0000,0x0000
                          DCD      0x00000023
                          DCD      0x00000000
                          DCD      0x00000002
0009b4  e79fade8          DCB      0xe7,0x9f,0xad,0xe8
0009b8  b7afe697          DCB      0xb7,0xaf,0xe6,0x97
0009bc  b6e997b4          DCB      0xb6,0xe9,0x97,0xb4
0009c0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
0009c8  53686f72          DCB      0x53,0x68,0x6f,0x72
0009cc  74205469          DCB      0x74,0x20,0x54,0x69
0009d0  6d650000          DCB      0x6d,0x65,0x00,0x00
                          %        8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0009e8  010400be          DCW      0x0104,0x00be
0009ec  00000000          DCW      0x0000,0x0000
                          DCD      0x00000024
                          DCD      0x00000000
                          DCD      0x00000002
0009fc  30303030          DCB      0x30,0x30,0x30,0x30
000a00  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
000a10  30303030          DCB      0x30,0x30,0x30,0x30
000a14  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000a30  015e00be          DCW      0x015e,0x00be
000a34  019000cf          DCW      0x0190,0x00cf
                          DCD      0x00000025
                          DCD      0x00000000
                          DCD      0x00000002
000a44  6d730000          DCB      0x6d,0x73,0x00,0x00
                          %        16
000a58  6d730000          DCB      0x6d,0x73,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000a78  01ae00be          DCW      0x01ae,0x00be
000a7c  00000000          DCW      0x0000,0x0000
                  Un_SGhListR
                          DCD      0x00000001
                          DCD      0x00000000
                          DCD      0x00000002
000a8c  563a0000          DCB      0x56,0x3a,0x00,0x00
                          %        16
000aa0  563a0000          DCB      0x56,0x3a,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000ac0  001e0037          DCW      0x001e,0x0037
000ac4  00000000          DCW      0x0000,0x0000
                          DCD      0x00000002
                          DCD      0x00000000
                          DCD      0x00000002
000ad4  302e3030          DCB      0x30,0x2e,0x30,0x30
000ad8  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
000ae8  302e3030          DCB      0x30,0x2e,0x30,0x30
000aec  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000b08  00580037          DCW      0x0058,0x0037
000b0c  00000000          DCW      0x0000,0x0000
                          DCD      0x00000003
                          DCD      0x00000000
                          DCD      0x00000002
000b1c  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
000b30  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000b50  00b20037          DCW      0x00b2,0x0037
000b54  00000000          DCW      0x0000,0x0000
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000002
000b64  523a0000          DCB      0x52,0x3a,0x00,0x00
                          %        16
000b78  523a0000          DCB      0x52,0x3a,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000b98  001e005a          DCW      0x001e,0x005a
000b9c  00000000          DCW      0x0000,0x0000
                          DCD      0x00000005
                          DCD      0x00000000
                          DCD      0x00000002
000bac  30303030          DCB      0x30,0x30,0x30,0x30
000bb0  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
000bc0  30303030          DCB      0x30,0x30,0x30,0x30
000bc4  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000be0  0058005a          DCW      0x0058,0x005a
000be4  00000000          DCW      0x0000,0x0000
                          DCD      0x00000006
                          DCD      0x00000000
                          DCD      0x00000002
000bf4  6d000000          DCB      0x6d,0x00,0x00,0x00
                          %        16
000c08  6d000000          DCB      0x6d,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000c28  00b2005a          DCW      0x00b2,0x005a
000c2c  00000000          DCW      0x0000,0x0000
                          DCD      0x00000007
                          DCD      0x00000000
                          DCD      0x00000002
000c3c  cea90000          DCB      0xce,0xa9,0x00,0x00
                          %        16
000c50  cea90000          DCB      0xce,0xa9,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000c70  00bb005c          DCW      0x00bb,0x005c
000c74  00000000          DCW      0x0000,0x0000
                          DCD      0x00000008
                          DCD      0x00000000
                          DCD      0x00000002
000c84  52313a00          DCB      0x52,0x31,0x3a,0x00
                          %        16
000c98  52313a00          DCB      0x52,0x31,0x3a,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000cb8  001e007d          DCW      0x001e,0x007d
000cbc  00000000          DCW      0x0000,0x0000
                          DCD      0x00000009
                          DCD      0x00000000
                          DCD      0x00000002
000ccc  30303030          DCB      0x30,0x30,0x30,0x30
000cd0  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
000ce0  30303030          DCB      0x30,0x30,0x30,0x30
000ce4  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000d00  0058007d          DCW      0x0058,0x007d
000d04  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000a
                          DCD      0x00000000
                          DCD      0x00000002
000d14  6d000000          DCB      0x6d,0x00,0x00,0x00
                          %        16
000d28  6d000000          DCB      0x6d,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000d48  00b2007d          DCW      0x00b2,0x007d
000d4c  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000b
                          DCD      0x00000000
                          DCD      0x00000002
000d5c  cea90000          DCB      0xce,0xa9,0x00,0x00
                          %        16
000d70  cea90000          DCB      0xce,0xa9,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000d90  00bb007f          DCW      0x00bb,0x007f
000d94  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000c
                          DCD      0x00000000
                          DCD      0x00000002
000da4  52323a00          DCB      0x52,0x32,0x3a,0x00
                          %        16
000db8  52320000          DCB      0x52,0x32,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000dd8  001e00a0          DCW      0x001e,0x00a0
000ddc  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000d
                          DCD      0x00000000
                          DCD      0x00000002
000dec  30303030          DCB      0x30,0x30,0x30,0x30
000df0  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
000e00  30303030          DCB      0x30,0x30,0x30,0x30
000e04  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000e20  005800a0          DCW      0x0058,0x00a0
000e24  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000e
                          DCD      0x00000000
                          DCD      0x00000002
000e34  6d000000          DCB      0x6d,0x00,0x00,0x00
                          %        16
000e48  6d000000          DCB      0x6d,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000e68  00b200a0          DCW      0x00b2,0x00a0
000e6c  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000f
                          DCD      0x00000000
                          DCD      0x00000002
000e7c  cea90000          DCB      0xce,0xa9,0x00,0x00
                          %        16
000e90  cea90000          DCB      0xce,0xa9,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000eb0  00bb00a2          DCW      0x00bb,0x00a2
000eb4  00000000          DCW      0x0000,0x0000
                  old_I
000eb8  00000000          DCFS     0x00000000 ; 0
                  max_discahrgeNum
000ebc  00000000          DCFS     0x00000000 ; 0
                  v_memory
000ec0  00000000          DCFS     0x00000000 ; 0
                  r_memory
000ec4  00000000          DCFS     0x00000000 ; 0
                  keydown_trig
000ec8  00000000          DCB      0x00,0x00,0x00,0x00
                  slistR
000ecc  00e58685          DCB      0x00,0xe5,0x86,0x85
000ed0  e998bbe6          DCB      0xe9,0x98,0xbb,0xe6
000ed4  b58be8af          DCB      0xb5,0x8b,0xe8,0xaf
000ed8  95000000          DCB      0x95,0x00,0x00,0x00
                          DCD      0x00000000
000ee0  00492e52          DCB      0x00,0x49,0x2e,0x52
000ee4  2e205445          DCB      0x2e,0x20,0x54,0x45
000ee8  53540000          DCB      0x53,0x54,0x00,0x00
                          %        8
000ef4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x00000802
000f04  00e7a88b          DCB      0x00,0xe7,0xa8,0x8b
000f08  e68ea7e7          DCB      0xe6,0x8e,0xa7,0xe7
000f0c  94b5e6ba          DCB      0x94,0xb5,0xe6,0xba
000f10  90000000          DCB      0x90,0x00,0x00,0x00
                          DCD      0x00000000
000f18  00504f57          DCB      0x00,0x50,0x4f,0x57
000f1c  45520000          DCB      0x45,0x52,0x00,0x00
                          %        12
000f2c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x00000803
000f3c  00e7a88b          DCB      0x00,0xe7,0xa8,0x8b
000f40  e68ea7e8          DCB      0xe6,0x8e,0xa7,0xe8
000f44  b49fe8bd          DCB      0xb4,0x9f,0xe8,0xbd
000f48  bd000000          DCB      0xbd,0x00,0x00,0x00
                          DCD      0x00000000
000f50  004c4f41          DCB      0x00,0x4c,0x4f,0x41
000f54  44000000          DCB      0x44,0x00,0x00,0x00
                          %        12
000f64  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x00000804
000f74  00e58585          DCB      0x00,0xe5,0x85,0x85
000f78  e694bee7          DCB      0xe6,0x94,0xbe,0xe7
000f7c  94b50000          DCB      0x94,0xb5,0x00,0x00
                          %        8
000f88  00432644          DCB      0x00,0x43,0x26,0x44
000f8c  43000000          DCB      0x43,0x00,0x00,0x00
                          %        12
000f9c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x00000805
000fac  00e7b3bb          DCB      0x00,0xe7,0xb3,0xbb
000fb0  e7bb9fe8          DCB      0xe7,0xbb,0x9f,0xe8
000fb4  aebee7bd          DCB      0xae,0xbe,0xe7,0xbd
000fb8  ae000000          DCB      0xae,0x00,0x00,0x00
                          DCD      0x00000000
000fc0  00535953          DCB      0x00,0x53,0x59,0x53
000fc4  54454d00          DCB      0x54,0x45,0x4d,0x00
                          %        12
000fd4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x00000806

;*** Start embedded assembler ***

#line 1 "..\\APP\\R_Face.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_R_Face_c_old_I____REV16|
#line 129 "D:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_R_Face_c_old_I____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_R_Face_c_old_I____REVSH|
#line 144
|__asm___8_R_Face_c_old_I____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
