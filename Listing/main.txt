; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\main.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\main.crf --no_multibyte_chars ..\User\main.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;40     
;;;41     int main(void)
000000  2400              MOVS     r4,#0
;;;42     	{
;;;43     		u8 i;
;;;44     	 int t=0;
;;;45     	u16 len;	
;;;46     	u8 datatemp[30];
;;;47     	u8 len1 =0;
000002  2600              MOVS     r6,#0
;;;48     		
;;;49     		
;;;50     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_CRC, ENABLE);//开启CRC时钟，STEMWIN授权使用
000004  2101              MOVS     r1,#1
000006  0308              LSLS     r0,r1,#12
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;51     	RCC_Configuration();
00000c  f7fffffe          BL       RCC_Configuration
;;;52     	SysTick_Init();
000010  f7fffffe          BL       SysTick_Init
;;;53     	GPIO_Conf();
000014  f7fffffe          BL       GPIO_Conf
;;;54     
;;;55         abc_time = 0;
000018  2000              MOVS     r0,#0
00001a  4943              LDR      r1,|L1.296|
00001c  6008              STR      r0,[r1,#0]  ; abc_time
;;;56         ms_time = 0;
00001e  4943              LDR      r1,|L1.300|
000020  6008              STR      r0,[r1,#0]  ; ms_time
;;;57     
;;;58     	TIM1_PWM_Config();
000022  f7fffffe          BL       TIM1_PWM_Config
;;;59     	TIM4_PWM_Config();
000026  f7fffffe          BL       TIM4_PWM_Config
;;;60     	TIM3_Int_Init(10-1,8400-1);
00002a  f24201cf          MOV      r1,#0x20cf
00002e  2009              MOVS     r0,#9
000030  f7fffffe          BL       TIM3_Int_Init
;;;61     	TIM6_Config();
000034  f7fffffe          BL       TIM6_Config
;;;62     	ADC1_DMA_Init();
000038  f7fffffe          BL       ADC1_DMA_Init
;;;63     //	USART_Configuration();
;;;64     	USART2_Configuration();
00003c  f7fffffe          BL       USART2_Configuration
;;;65     	i2c_CfgGpio();//24C01引脚初始化
000040  f7fffffe          BL       i2c_CfgGpio
;;;66     	TM1650_GPIO_INT();		/*TM1650引脚初始化 */
000044  f7fffffe          BL       TM1650_GPIO_INT
;;;67     	AD5541_GPIOCoing();//DAC初始化
000048  f7fffffe          BL       AD5541_GPIOCoing
;;;68     	AD7689_InitializeSPI1();//AD7689初始化
00004c  f7fffffe          BL       AD7689_InitializeSPI1
;;;69     //	LCD_Initializtion();//液晶屏初始化
;;;70     	//EEPROM_READ_Coeff();//读取校准参数
;;;71     	RCONT_SW = 0;
000050  2000              MOVS     r0,#0
000052  4937              LDR      r1,|L1.304|
000054  6248              STR      r0,[r1,#0x24]  ; Run_Control
;;;72     	Read_Flash_Bytes();
000056  f7fffffe          BL       Read_Flash_Bytes
;;;73     	Off_GPOI_ResetSet();
00005a  f7fffffe          BL       Off_GPOI_ResetSet
;;;74     	LOAD_MODE = 0;//负载CC模式
00005e  2000              MOVS     r0,#0
000060  4933              LDR      r1,|L1.304|
000062  6188              STR      r0,[r1,#0x18]  ; Run_Control
;;;75     	LOAD_V_SW = 1;
000064  2001              MOVS     r0,#1
000066  61c8              STR      r0,[r1,#0x1c]  ; Run_Control
;;;76     	LOAD_I_SW = 0;
000068  2000              MOVS     r0,#0
00006a  6208              STR      r0,[r1,#0x20]  ; Run_Control
;;;77     	GPIO_SetBits(GPIOC,GPIO_Pin_1);//OFF
00006c  2102              MOVS     r1,#2
00006e  4831              LDR      r0,|L1.308|
000070  f7fffffe          BL       GPIO_SetBits
;;;78     	Flag_Swtich_ON = 0;
000074  4830              LDR      r0,|L1.312|
000076  6800              LDR      r0,[r0,#0]  ; flagA
000078  f0200040          BIC      r0,r0,#0x40
00007c  492e              LDR      r1,|L1.312|
00007e  6008              STR      r0,[r1,#0]  ; flagA
;;;79     	flag_CC_MODE = 1;
000080  482e              LDR      r0,|L1.316|
000082  6800              LDR      r0,[r0,#0]  ; flagE
000084  f0200080          BIC      r0,r0,#0x80
000088  3080              ADDS     r0,r0,#0x80
00008a  492c              LDR      r1,|L1.316|
00008c  6008              STR      r0,[r1,#0]  ; flagE
;;;80     	while(1)
00008e  e04a              B        |L1.294|
                  |L1.144|
;;;81     	{
;;;82     		if(USART_RX_STA&0x8000)	   //判断是否接收完数据
000090  482b              LDR      r0,|L1.320|
000092  8800              LDRH     r0,[r0,#0]  ; USART_RX_STA
000094  f4004000          AND      r0,r0,#0x8000
000098  b1f8              CBZ      r0,|L1.218|
;;;83     		{					   
;;;84     
;;;85     //			len1=USART_RX_STA&0x3f;
;;;86     			len1=USART_RX_CNT;
00009a  482a              LDR      r0,|L1.324|
00009c  7806              LDRB     r6,[r0,#0]  ; USART_RX_CNT
;;;87     			len = SerialRemoteHandleL(len1,USART_RX_BUF);
00009e  492a              LDR      r1,|L1.328|
0000a0  4630              MOV      r0,r6
0000a2  f7fffffe          BL       SerialRemoteHandleL
0000a6  4605              MOV      r5,r0
;;;88     			len1 =0;
0000a8  2600              MOVS     r6,#0
;;;89     			for(t=0;t<len;t++)								  //通过长度进行循环
0000aa  2400              MOVS     r4,#0
0000ac  e00c              B        |L1.200|
                  |L1.174|
;;;90     			{
;;;91     				USART_SendData(USART2, USART_RX_BUF[t]);      //将数组采集好的数据 一次向串口1发送
0000ae  4826              LDR      r0,|L1.328|
0000b0  5d01              LDRB     r1,[r0,r4]
0000b2  4826              LDR      r0,|L1.332|
0000b4  f7fffffe          BL       USART_SendData
;;;92     				while(USART_GetFlagStatus(USART2,USART_FLAG_TC)!=SET);//等待发送结束
0000b8  bf00              NOP      
                  |L1.186|
0000ba  2140              MOVS     r1,#0x40
0000bc  4823              LDR      r0,|L1.332|
0000be  f7fffffe          BL       USART_GetFlagStatus
0000c2  2801              CMP      r0,#1
0000c4  d1f9              BNE      |L1.186|
0000c6  1c64              ADDS     r4,r4,#1              ;89
                  |L1.200|
0000c8  42ac              CMP      r4,r5                 ;89
0000ca  dbf0              BLT      |L1.174|
;;;93     			}
;;;94     			memset(USART_RX_BUF,0,USART_REC_LEN);
0000cc  21c8              MOVS     r1,#0xc8
0000ce  481e              LDR      r0,|L1.328|
0000d0  f7fffffe          BL       __aeabi_memclr
;;;95     			
;;;96     			USART_RX_STA=0;			  //清零 虚拟寄存器		  为一下次采集做准备
0000d4  2000              MOVS     r0,#0
0000d6  491a              LDR      r1,|L1.320|
0000d8  8008              STRH     r0,[r1,#0]
                  |L1.218|
;;;97     		}
;;;98     		TIM_SetCompare3(TIM4,Contr_Voltage);//稳压电源电流DAC
0000da  481d              LDR      r0,|L1.336|
0000dc  8801              LDRH     r1,[r0,#0]  ; Contr_Voltage
0000de  481d              LDR      r0,|L1.340|
0000e0  f7fffffe          BL       TIM_SetCompare3
;;;99     		TIM_SetCompare4(TIM4,Contr_Current);//稳压电源电压DAC
0000e4  481c              LDR      r0,|L1.344|
0000e6  8801              LDRH     r1,[r0,#0]  ; Contr_Current
0000e8  481a              LDR      r0,|L1.340|
0000ea  f7fffffe          BL       TIM_SetCompare4
;;;100    		AD5541_Send(Contr_Laod);//加载DAC值
0000ee  481b              LDR      r0,|L1.348|
0000f0  8800              LDRH     r0,[r0,#0]  ; Contr_Laod
0000f2  f7fffffe          BL       AD5541_Send
;;;101    		MODE_CONT();//电压电流档位切换
0000f6  f7fffffe          BL       MODE_CONT
;;;102    		if(Flag_DAC_OFF==0)
0000fa  4819              LDR      r0,|L1.352|
0000fc  7800              LDRB     r0,[r0,#0]  ; flagB
0000fe  f3c000c0          UBFX     r0,r0,#3,#1
000102  b908              CBNZ     r0,|L1.264|
;;;103    		{
;;;104    			Transformation_ADC();
000104  f7fffffe          BL       Transformation_ADC
                  |L1.264|
;;;105    		}
;;;106    		if(Flag_ADC_Full==1)
000108  480b              LDR      r0,|L1.312|
00010a  7800              LDRB     r0,[r0,#0]  ; flagA
00010c  f3c00040          UBFX     r0,r0,#1,#1
000110  b138              CBZ      r0,|L1.290|
;;;107    		{
;;;108    			Flag_ADC_Full=0;
000112  4809              LDR      r0,|L1.312|
000114  6800              LDR      r0,[r0,#0]  ; flagA
000116  f0200002          BIC      r0,r0,#2
00011a  4907              LDR      r1,|L1.312|
00011c  6008              STR      r0,[r1,#0]  ; flagA
;;;109    			ADC_CH_Scan();//ADC滤波
00011e  f7fffffe          BL       ADC_CH_Scan
                  |L1.290|
;;;110    		}
;;;111    		AD7689_Scan_CH();//读取AD7689各通道AD值
000122  f7fffffe          BL       AD7689_Scan_CH
                  |L1.294|
000126  e7b3              B        |L1.144|
;;;112    	}
;;;113    	//IWDG_Inte();
;;;114    //	MainTask();
;;;115    }
;;;116    
                          ENDP

                  |L1.296|
                          DCD      abc_time
                  |L1.300|
                          DCD      ms_time
                  |L1.304|
                          DCD      Run_Control
                  |L1.308|
                          DCD      0x40020800
                  |L1.312|
                          DCD      flagA
                  |L1.316|
                          DCD      flagE
                  |L1.320|
                          DCD      USART_RX_STA
                  |L1.324|
                          DCD      USART_RX_CNT
                  |L1.328|
                          DCD      USART_RX_BUF
                  |L1.332|
                          DCD      0x40004400
                  |L1.336|
                          DCD      Contr_Voltage
                  |L1.340|
                          DCD      0x40000800
                  |L1.344|
                          DCD      Contr_Current
                  |L1.348|
                          DCD      Contr_Laod
                  |L1.352|
                          DCD      flagB

                          AREA ||.data||, DATA, ALIGN=2

                  flagA
                          DCD      0x00000000
                  flagB
                          DCD      0x00000000
                  flagC
                          DCD      0x00000000
                  flagD
                          DCD      0x00000000
                  flagE
                          DCD      0x00000000
                  flagF
                          DCD      0x00000000
                  flagG
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 129 "D:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 144
|__asm___6_main_c_main____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
