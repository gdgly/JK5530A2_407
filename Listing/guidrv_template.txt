; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\guidrv_template.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\guidrv_template.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\guidrv_template.crf --no_multibyte_chars ..\STemWinLibrary522\Config\GUIDRV_Template.c]
                          THUMB

                          AREA ||i._DrawBitLine16BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine16BPP PROC
;;;591    */
;;;592    static void _DrawBitLine16BPP(GUI_DEVICE * pDevice, int x, int y, U16 const GUI_UNI_PTR * p, int xsize) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4605              MOV      r5,r0
000004  9c05              LDR      r4,[sp,#0x14]
;;;593    //   for (;xsize > 0; xsize--, x++, p++) {
;;;594    //     _SetPixelIndex(pDevice, x, y, *p);
;;;595    //   }
;;;596        LCD_PIXELINDEX ColorIndex;
;;;597        
;;;598        ColorIndex = LCD__GetColorIndex();
000006  4e1e              LDR      r6,|L1.128|
000008  6836              LDR      r6,[r6,#0]  ; GUI_pContext
00000a  6bf6              LDR      r6,[r6,#0x3c]
00000c  6830              LDR      r0,[r6,#0]
;;;599        *(__IO u16 *) (Bank1_LCD_C) = 0x2a;
00000e  262a              MOVS     r6,#0x2a
000010  f04f47c0          MOV      r7,#0x60000000
000014  803e              STRH     r6,[r7,#0]
;;;600        *(__IO u16 *) (Bank1_LCD_D) = (x>>8)&0xff;
000016  f3c12607          UBFX     r6,r1,#8,#8
00001a  4f1a              LDR      r7,|L1.132|
00001c  803e              STRH     r6,[r7,#0]
;;;601        *(__IO u16 *) (Bank1_LCD_D) = x & 0xff;
00001e  b2ce              UXTB     r6,r1
000020  803e              STRH     r6,[r7,#0]
;;;602        *(__IO u16 *) (Bank1_LCD_D) = (480>>8)&0xff;
000022  2601              MOVS     r6,#1
000024  803e              STRH     r6,[r7,#0]
;;;603        *(__IO u16 *) (Bank1_LCD_D) = 480 & 0xff;
000026  26e0              MOVS     r6,#0xe0
000028  803e              STRH     r6,[r7,#0]
;;;604        
;;;605        *(__IO u16 *) (Bank1_LCD_C) = 0x2b;
00002a  262b              MOVS     r6,#0x2b
00002c  0777              LSLS     r7,r6,#29
00002e  803e              STRH     r6,[r7,#0]
;;;606        *(__IO u16 *) (Bank1_LCD_D) = (y>>8)&0xff;
000030  f3c22607          UBFX     r6,r2,#8,#8
000034  4f13              LDR      r7,|L1.132|
000036  803e              STRH     r6,[r7,#0]
;;;607        *(__IO u16 *) (Bank1_LCD_D) = y & 0xff;
000038  b2d6              UXTB     r6,r2
00003a  803e              STRH     r6,[r7,#0]
;;;608        *(__IO u16 *) (Bank1_LCD_D) = (272>>8)&0xff;
00003c  2601              MOVS     r6,#1
00003e  803e              STRH     r6,[r7,#0]
;;;609        *(__IO u16 *) (Bank1_LCD_D) = 272 & 0xff;
000040  2610              MOVS     r6,#0x10
000042  803e              STRH     r6,[r7,#0]
;;;610    
;;;611        *(__IO u16 *) (Bank1_LCD_C) = 0x2c;
000044  262c              MOVS     r6,#0x2c
000046  06f7              LSLS     r7,r6,#27
000048  803e              STRH     r6,[r7,#0]
;;;612        
;;;613        if ((GUI_pContext->DrawMode & LCD_DRAWMODE_TRANS)==0)
00004a  4e0d              LDR      r6,|L1.128|
00004c  6836              LDR      r6,[r6,#0]  ; GUI_pContext
00004e  7c36              LDRB     r6,[r6,#0x10]
000050  f0060602          AND      r6,r6,#2
000054  b94e              CBNZ     r6,|L1.106|
;;;614        {
;;;615    
;;;616            for( ; xsize>0; xsize--,x++,p++)
000056  e005              B        |L1.100|
                  |L1.88|
;;;617                *(__IO u16 *) (Bank1_LCD_D) = *p;
000058  881e              LDRH     r6,[r3,#0]
00005a  4f0a              LDR      r7,|L1.132|
00005c  803e              STRH     r6,[r7,#0]
00005e  1e64              SUBS     r4,r4,#1              ;616
000060  1c49              ADDS     r1,r1,#1              ;616
000062  1c9b              ADDS     r3,r3,#2              ;616
                  |L1.100|
000064  2c00              CMP      r4,#0                 ;616
000066  dcf7              BGT      |L1.88|
000068  e009              B        |L1.126|
                  |L1.106|
;;;618        }
;;;619        else
;;;620        {
;;;621            for (; xsize > 0; xsize--, x++, p++)
00006a  e006              B        |L1.122|
                  |L1.108|
;;;622            {
;;;623                ColorIndex = *p;
00006c  8818              LDRH     r0,[r3,#0]
;;;624                if (ColorIndex)
00006e  b108              CBZ      r0,|L1.116|
;;;625                {
;;;626                   *(__IO u16 *) (Bank1_LCD_D) = ColorIndex;
000070  4f04              LDR      r7,|L1.132|
000072  8038              STRH     r0,[r7,#0]
                  |L1.116|
000074  1e64              SUBS     r4,r4,#1              ;621
000076  1c49              ADDS     r1,r1,#1              ;621
000078  1c9b              ADDS     r3,r3,#2              ;621
                  |L1.122|
00007a  2c00              CMP      r4,#0                 ;621
00007c  dcf6              BGT      |L1.108|
                  |L1.126|
;;;627                }
;;;628            }
;;;629        }
;;;630    }
00007e  bdf0              POP      {r4-r7,pc}
;;;631    
                          ENDP

                  |L1.128|
                          DCD      GUI_pContext
                  |L1.132|
                          DCD      0x60020000

                          AREA ||i._DrawBitLine1BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;361    */
;;;362    static void _DrawBitLine1BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b083              SUB      sp,sp,#0xc
000006  4681              MOV      r9,r0
000008  460e              MOV      r6,r1
00000a  461c              MOV      r4,r3
00000c  e9dd7a11          LDRD     r7,r10,[sp,#0x44]
000010  9d10              LDR      r5,[sp,#0x40]
;;;363      LCD_PIXELINDEX IndexMask, Index0, Index1, Pixel;
;;;364    
;;;365      Index0 = *(pTrans + 0);
000012  f8da0000          LDR      r0,[r10,#0]
000016  9002              STR      r0,[sp,#8]
;;;366      Index1 = *(pTrans + 1);
000018  f8da0004          LDR      r0,[r10,#4]
00001c  9001              STR      r0,[sp,#4]
;;;367      x += Diff;
00001e  442e              ADD      r6,r6,r5
;;;368      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000020  4832              LDR      r0,|L2.236|
000022  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000024  7c00              LDRB     r0,[r0,#0x10]
000026  f0000003          AND      r0,r0,#3
00002a  b130              CBZ      r0,|L2.58|
00002c  2801              CMP      r0,#1
00002e  d036              BEQ      |L2.158|
000030  2802              CMP      r0,#2
000032  d01c              BEQ      |L2.110|
000034  2803              CMP      r0,#3
000036  d155              BNE      |L2.228|
000038  e030              B        |L2.156|
                  |L2.58|
;;;369      case 0:
;;;370        do {
00003a  bf00              NOP      
                  |L2.60|
;;;371          _SetPixelIndex(pDevice, x++, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
00003c  7820              LDRB     r0,[r4,#0]
00003e  2280              MOVS     r2,#0x80
000040  412a              ASRS     r2,r2,r5
000042  4010              ANDS     r0,r0,r2
000044  b108              CBZ      r0,|L2.74|
000046  9801              LDR      r0,[sp,#4]
000048  e000              B        |L2.76|
                  |L2.74|
00004a  9802              LDR      r0,[sp,#8]
                  |L2.76|
00004c  4603              MOV      r3,r0
00004e  4631              MOV      r1,r6
000050  1c76              ADDS     r6,r6,#1
000052  4648              MOV      r0,r9
000054  9a05              LDR      r2,[sp,#0x14]
000056  f7fffffe          BL       _SetPixelIndex
;;;372          if (++Diff == 8) {
00005a  1c68              ADDS     r0,r5,#1
00005c  4605              MOV      r5,r0
00005e  2808              CMP      r0,#8
000060  d101              BNE      |L2.102|
;;;373            Diff = 0;
000062  2500              MOVS     r5,#0
;;;374            p++;
000064  1c64              ADDS     r4,r4,#1
                  |L2.102|
;;;375          }
;;;376        } while (--xsize);
000066  1e78              SUBS     r0,r7,#1
000068  1e07              SUBS     r7,r0,#0
00006a  d1e7              BNE      |L2.60|
;;;377        break;
00006c  e03a              B        |L2.228|
                  |L2.110|
;;;378      case LCD_DRAWMODE_TRANS:
;;;379        do {
00006e  bf00              NOP      
                  |L2.112|
;;;380          if (*p & (0x80 >> Diff))
000070  7820              LDRB     r0,[r4,#0]
000072  2180              MOVS     r1,#0x80
000074  4129              ASRS     r1,r1,r5
000076  4008              ANDS     r0,r0,r1
000078  b128              CBZ      r0,|L2.134|
;;;381            _SetPixelIndex(pDevice, x, y, Index1);
00007a  4631              MOV      r1,r6
00007c  4648              MOV      r0,r9
00007e  9b01              LDR      r3,[sp,#4]
000080  9a05              LDR      r2,[sp,#0x14]
000082  f7fffffe          BL       _SetPixelIndex
                  |L2.134|
;;;382          x++;
000086  1c76              ADDS     r6,r6,#1
;;;383          if (++Diff == 8) {
000088  1c68              ADDS     r0,r5,#1
00008a  4605              MOV      r5,r0
00008c  2808              CMP      r0,#8
00008e  d101              BNE      |L2.148|
;;;384            Diff = 0;
000090  2500              MOVS     r5,#0
;;;385            p++;
000092  1c64              ADDS     r4,r4,#1
                  |L2.148|
;;;386          }
;;;387        } while (--xsize);
000094  1e78              SUBS     r0,r7,#1
000096  1e07              SUBS     r7,r0,#0
000098  d1ea              BNE      |L2.112|
;;;388        break;
00009a  e023              B        |L2.228|
                  |L2.156|
;;;389      case LCD_DRAWMODE_XOR | LCD_DRAWMODE_TRANS:
;;;390      case LCD_DRAWMODE_XOR:
00009c  bf00              NOP      
                  |L2.158|
;;;391        IndexMask = pDevice->pColorConvAPI->pfGetIndexMask();
00009e  f8d91010          LDR      r1,[r9,#0x10]
0000a2  6888              LDR      r0,[r1,#8]
0000a4  4780              BLX      r0
0000a6  4680              MOV      r8,r0
;;;392        do {
0000a8  bf00              NOP      
                  |L2.170|
;;;393          if (*p & (0x80 >> Diff)) {
0000aa  7820              LDRB     r0,[r4,#0]
0000ac  2180              MOVS     r1,#0x80
0000ae  4129              ASRS     r1,r1,r5
0000b0  4008              ANDS     r0,r0,r1
0000b2  b160              CBZ      r0,|L2.206|
;;;394            Pixel = _GetPixelIndex(pDevice, x, y);
0000b4  4631              MOV      r1,r6
0000b6  4648              MOV      r0,r9
0000b8  9a05              LDR      r2,[sp,#0x14]
0000ba  f7fffffe          BL       _GetPixelIndex
0000be  4683              MOV      r11,r0
;;;395            _SetPixelIndex(pDevice, x, y, Pixel ^ IndexMask);
0000c0  ea8b0308          EOR      r3,r11,r8
0000c4  4631              MOV      r1,r6
0000c6  4648              MOV      r0,r9
0000c8  9a05              LDR      r2,[sp,#0x14]
0000ca  f7fffffe          BL       _SetPixelIndex
                  |L2.206|
;;;396          }
;;;397          x++;
0000ce  1c76              ADDS     r6,r6,#1
;;;398          if (++Diff == 8) {
0000d0  1c68              ADDS     r0,r5,#1
0000d2  4605              MOV      r5,r0
0000d4  2808              CMP      r0,#8
0000d6  d101              BNE      |L2.220|
;;;399            Diff = 0;
0000d8  2500              MOVS     r5,#0
;;;400            p++;
0000da  1c64              ADDS     r4,r4,#1
                  |L2.220|
;;;401          }
;;;402        } while (--xsize);
0000dc  1e78              SUBS     r0,r7,#1
0000de  1e07              SUBS     r7,r0,#0
0000e0  d1e3              BNE      |L2.170|
;;;403        break;
0000e2  bf00              NOP      
                  |L2.228|
0000e4  bf00              NOP                            ;377
;;;404      }
;;;405    }
0000e6  b007              ADD      sp,sp,#0x1c
0000e8  e8bd8ff0          POP      {r4-r11,pc}
;;;406    
                          ENDP

                  |L2.236|
                          DCD      GUI_pContext

                          AREA ||i._DrawBitLine2BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine2BPP PROC
;;;410    */
;;;411    static void  _DrawBitLine2BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b081              SUB      sp,sp,#4
000006  460f              MOV      r7,r1
000008  4698              MOV      r8,r3
00000a  e9dd9a0f          LDRD     r9,r10,[sp,#0x3c]
;;;412      LCD_PIXELINDEX Pixels, PixelIndex;
;;;413      int CurrentPixel, Shift, Index;
;;;414    
;;;415      Pixels = *p;
00000e  f898b000          LDRB     r11,[r8,#0]
;;;416      CurrentPixel = Diff;
000012  9d0e              LDR      r5,[sp,#0x38]
;;;417      x += Diff;
000014  9d0e              LDR      r5,[sp,#0x38]
000016  442f              ADD      r7,r7,r5
;;;418      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000018  4853              LDR      r0,|L3.360|
00001a  6800              LDR      r0,[r0,#0]  ; GUI_pContext
00001c  7c00              LDRB     r0,[r0,#0x10]
00001e  f0000003          AND      r0,r0,#3
000022  b110              CBZ      r0,|L3.42|
000024  2802              CMP      r0,#2
000026  d14b              BNE      |L3.192|
000028  e04b              B        |L3.194|
                  |L3.42|
;;;419      case 0:
;;;420        if (pTrans) {
00002a  f1ba0f00          CMP      r10,#0
00002e  d025              BEQ      |L3.124|
;;;421          do {
000030  bf00              NOP      
                  |L3.50|
;;;422            Shift = (3 - CurrentPixel) << 1;
000032  f1c50003          RSB      r0,r5,#3
000036  0044              LSLS     r4,r0,#1
;;;423            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
000038  f1c40106          RSB      r1,r4,#6
00003c  20c0              MOVS     r0,#0xc0
00003e  4108              ASRS     r0,r0,r1
000040  ea00000b          AND      r0,r0,r11
000044  fa20f604          LSR      r6,r0,r4
;;;424            PixelIndex = *(pTrans + Index);
000048  f85a0026          LDR      r0,[r10,r6,LSL #2]
00004c  9000              STR      r0,[sp,#0]
;;;425            _SetPixelIndex(pDevice, x++, y, PixelIndex);
00004e  4639              MOV      r1,r7
000050  1c7f              ADDS     r7,r7,#1
000052  e9dd3000          LDRD     r3,r0,[sp,#0]
000056  9a03              LDR      r2,[sp,#0xc]
000058  f7fffffe          BL       _SetPixelIndex
;;;426            if (++CurrentPixel == 4) {
00005c  1c68              ADDS     r0,r5,#1
00005e  4605              MOV      r5,r0
000060  2804              CMP      r0,#4
000062  d105              BNE      |L3.112|
;;;427              CurrentPixel = 0;
000064  2500              MOVS     r5,#0
;;;428              Pixels = *(++p);
000066  f1080001          ADD      r0,r8,#1
00006a  4680              MOV      r8,r0
00006c  f890b000          LDRB     r11,[r0,#0]
                  |L3.112|
;;;429            }
;;;430          } while (--xsize);
000070  f1a90001          SUB      r0,r9,#1
000074  f1b00900          SUBS     r9,r0,#0
000078  d1db              BNE      |L3.50|
00007a  e021              B        |L3.192|
                  |L3.124|
;;;431        } else {
;;;432          do {
00007c  bf00              NOP      
                  |L3.126|
;;;433            Shift = (3 - CurrentPixel) << 1;
00007e  f1c50003          RSB      r0,r5,#3
000082  0044              LSLS     r4,r0,#1
;;;434            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
000084  f1c40106          RSB      r1,r4,#6
000088  20c0              MOVS     r0,#0xc0
00008a  4108              ASRS     r0,r0,r1
00008c  ea00000b          AND      r0,r0,r11
000090  fa20f604          LSR      r6,r0,r4
;;;435            _SetPixelIndex(pDevice, x++, y, Index);
000094  4639              MOV      r1,r7
000096  1c7f              ADDS     r7,r7,#1
000098  4633              MOV      r3,r6
00009a  9a03              LDR      r2,[sp,#0xc]
00009c  9801              LDR      r0,[sp,#4]
00009e  f7fffffe          BL       _SetPixelIndex
;;;436            if (++CurrentPixel == 4) {
0000a2  1c68              ADDS     r0,r5,#1
0000a4  4605              MOV      r5,r0
0000a6  2804              CMP      r0,#4
0000a8  d105              BNE      |L3.182|
;;;437              CurrentPixel = 0;
0000aa  2500              MOVS     r5,#0
;;;438              Pixels = *(++p);
0000ac  f1080001          ADD      r0,r8,#1
0000b0  4680              MOV      r8,r0
0000b2  f890b000          LDRB     r11,[r0,#0]
                  |L3.182|
;;;439            }
;;;440          } while (--xsize);
0000b6  f1a90001          SUB      r0,r9,#1
0000ba  f1b00900          SUBS     r9,r0,#0
0000be  d1de              BNE      |L3.126|
                  |L3.192|
;;;441        }
;;;442        break;
0000c0  e04d              B        |L3.350|
                  |L3.194|
;;;443      case LCD_DRAWMODE_TRANS:
;;;444        if (pTrans) {
0000c2  f1ba0f00          CMP      r10,#0
0000c6  d026              BEQ      |L3.278|
;;;445          do {
0000c8  bf00              NOP      
                  |L3.202|
;;;446            Shift = (3 - CurrentPixel) << 1;
0000ca  f1c50003          RSB      r0,r5,#3
0000ce  0044              LSLS     r4,r0,#1
;;;447            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
0000d0  f1c40106          RSB      r1,r4,#6
0000d4  20c0              MOVS     r0,#0xc0
0000d6  4108              ASRS     r0,r0,r1
0000d8  ea00000b          AND      r0,r0,r11
0000dc  fa20f604          LSR      r6,r0,r4
;;;448            if (Index) {
0000e0  b146              CBZ      r6,|L3.244|
;;;449              PixelIndex = *(pTrans + Index);
0000e2  f85a0026          LDR      r0,[r10,r6,LSL #2]
0000e6  9000              STR      r0,[sp,#0]
;;;450              _SetPixelIndex(pDevice, x, y, PixelIndex);
0000e8  4639              MOV      r1,r7
0000ea  e9dd3000          LDRD     r3,r0,[sp,#0]
0000ee  9a03              LDR      r2,[sp,#0xc]
0000f0  f7fffffe          BL       _SetPixelIndex
                  |L3.244|
;;;451            }
;;;452            x++;
0000f4  1c7f              ADDS     r7,r7,#1
;;;453            if (++CurrentPixel == 4) {
0000f6  1c68              ADDS     r0,r5,#1
0000f8  4605              MOV      r5,r0
0000fa  2804              CMP      r0,#4
0000fc  d105              BNE      |L3.266|
;;;454              CurrentPixel = 0;
0000fe  2500              MOVS     r5,#0
;;;455              Pixels = *(++p);
000100  f1080001          ADD      r0,r8,#1
000104  4680              MOV      r8,r0
000106  f890b000          LDRB     r11,[r0,#0]
                  |L3.266|
;;;456            }
;;;457          } while (--xsize);
00010a  f1a90001          SUB      r0,r9,#1
00010e  f1b00900          SUBS     r9,r0,#0
000112  d1da              BNE      |L3.202|
000114  e022              B        |L3.348|
                  |L3.278|
;;;458        } else {
;;;459          do {
000116  bf00              NOP      
                  |L3.280|
;;;460            Shift = (3 - CurrentPixel) << 1;
000118  f1c50003          RSB      r0,r5,#3
00011c  0044              LSLS     r4,r0,#1
;;;461            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
00011e  f1c40106          RSB      r1,r4,#6
000122  20c0              MOVS     r0,#0xc0
000124  4108              ASRS     r0,r0,r1
000126  ea00000b          AND      r0,r0,r11
00012a  fa20f604          LSR      r6,r0,r4
;;;462            if (Index) {
00012e  b12e              CBZ      r6,|L3.316|
;;;463              _SetPixelIndex(pDevice, x, y, Index);
000130  4633              MOV      r3,r6
000132  4639              MOV      r1,r7
000134  9a03              LDR      r2,[sp,#0xc]
000136  9801              LDR      r0,[sp,#4]
000138  f7fffffe          BL       _SetPixelIndex
                  |L3.316|
;;;464            }
;;;465            x++;
00013c  1c7f              ADDS     r7,r7,#1
;;;466            if (++CurrentPixel == 4) {
00013e  1c68              ADDS     r0,r5,#1
000140  4605              MOV      r5,r0
000142  2804              CMP      r0,#4
000144  d105              BNE      |L3.338|
;;;467              CurrentPixel = 0;
000146  2500              MOVS     r5,#0
;;;468              Pixels = *(++p);
000148  f1080001          ADD      r0,r8,#1
00014c  4680              MOV      r8,r0
00014e  f890b000          LDRB     r11,[r0,#0]
                  |L3.338|
;;;469            }
;;;470          } while (--xsize);
000152  f1a90001          SUB      r0,r9,#1
000156  f1b00900          SUBS     r9,r0,#0
00015a  d1dd              BNE      |L3.280|
                  |L3.348|
;;;471        }
;;;472        break;
00015c  bf00              NOP      
                  |L3.350|
00015e  bf00              NOP                            ;442
;;;473      }
;;;474    }
000160  b005              ADD      sp,sp,#0x14
000162  e8bd8ff0          POP      {r4-r11,pc}
;;;475    
                          ENDP

000166  0000              DCW      0x0000
                  |L3.360|
                          DCD      GUI_pContext

                          AREA ||i._DrawBitLine32BPP||, CODE, READONLY, ALIGN=1

                  _DrawBitLine32BPP PROC
;;;640    */
;;;641    static void _DrawBitLine32BPP(GUI_DEVICE * pDevice, int x, int y, U32 const GUI_UNI_PTR * p, int xsize) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
00000c  9e06              LDR      r6,[sp,#0x18]
;;;642      for (;xsize > 0; xsize--, x++, p++) {
00000e  e008              B        |L4.34|
                  |L4.16|
;;;643        _SetPixelIndex(pDevice, x, y, *p);
000010  4642              MOV      r2,r8
000012  4629              MOV      r1,r5
000014  4638              MOV      r0,r7
000016  6823              LDR      r3,[r4,#0]
000018  f7fffffe          BL       _SetPixelIndex
00001c  1e76              SUBS     r6,r6,#1              ;642
00001e  1c6d              ADDS     r5,r5,#1              ;642
000020  1d24              ADDS     r4,r4,#4              ;642
                  |L4.34|
000022  2e00              CMP      r6,#0                 ;642
000024  dcf4              BGT      |L4.16|
;;;644      }
;;;645    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;646    
                          ENDP


                          AREA ||i._DrawBitLine4BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine4BPP PROC
;;;479    */
;;;480    static void  _DrawBitLine4BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b081              SUB      sp,sp,#4
000006  460f              MOV      r7,r1
000008  4698              MOV      r8,r3
00000a  e9dd9a0f          LDRD     r9,r10,[sp,#0x3c]
;;;481      LCD_PIXELINDEX Pixels, PixelIndex;
;;;482      int CurrentPixel, Shift, Index;
;;;483    
;;;484      Pixels = *p;
00000e  f898b000          LDRB     r11,[r8,#0]
;;;485      CurrentPixel = Diff;
000012  9d0e              LDR      r5,[sp,#0x38]
;;;486      x += Diff;
000014  9d0e              LDR      r5,[sp,#0x38]
000016  442f              ADD      r7,r7,r5
;;;487      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000018  4853              LDR      r0,|L5.360|
00001a  6800              LDR      r0,[r0,#0]  ; GUI_pContext
00001c  7c00              LDRB     r0,[r0,#0x10]
00001e  f0000003          AND      r0,r0,#3
000022  b110              CBZ      r0,|L5.42|
000024  2802              CMP      r0,#2
000026  d14b              BNE      |L5.192|
000028  e04b              B        |L5.194|
                  |L5.42|
;;;488      case 0:
;;;489        if (pTrans) {
00002a  f1ba0f00          CMP      r10,#0
00002e  d025              BEQ      |L5.124|
;;;490          do {
000030  bf00              NOP      
                  |L5.50|
;;;491            Shift = (1 - CurrentPixel) << 2;
000032  f1c50001          RSB      r0,r5,#1
000036  0084              LSLS     r4,r0,#2
;;;492            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
000038  f1c40104          RSB      r1,r4,#4
00003c  20f0              MOVS     r0,#0xf0
00003e  4108              ASRS     r0,r0,r1
000040  ea00000b          AND      r0,r0,r11
000044  fa20f604          LSR      r6,r0,r4
;;;493            PixelIndex = *(pTrans + Index);
000048  f85a0026          LDR      r0,[r10,r6,LSL #2]
00004c  9000              STR      r0,[sp,#0]
;;;494            _SetPixelIndex(pDevice, x++, y, PixelIndex);
00004e  4639              MOV      r1,r7
000050  1c7f              ADDS     r7,r7,#1
000052  e9dd3000          LDRD     r3,r0,[sp,#0]
000056  9a03              LDR      r2,[sp,#0xc]
000058  f7fffffe          BL       _SetPixelIndex
;;;495            if (++CurrentPixel == 2) {
00005c  1c68              ADDS     r0,r5,#1
00005e  4605              MOV      r5,r0
000060  2802              CMP      r0,#2
000062  d105              BNE      |L5.112|
;;;496              CurrentPixel = 0;
000064  2500              MOVS     r5,#0
;;;497              Pixels = *(++p);
000066  f1080001          ADD      r0,r8,#1
00006a  4680              MOV      r8,r0
00006c  f890b000          LDRB     r11,[r0,#0]
                  |L5.112|
;;;498            }
;;;499          } while (--xsize);
000070  f1a90001          SUB      r0,r9,#1
000074  f1b00900          SUBS     r9,r0,#0
000078  d1db              BNE      |L5.50|
00007a  e021              B        |L5.192|
                  |L5.124|
;;;500        } else {
;;;501          do {
00007c  bf00              NOP      
                  |L5.126|
;;;502            Shift = (1 - CurrentPixel) << 2;
00007e  f1c50001          RSB      r0,r5,#1
000082  0084              LSLS     r4,r0,#2
;;;503            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
000084  f1c40104          RSB      r1,r4,#4
000088  20f0              MOVS     r0,#0xf0
00008a  4108              ASRS     r0,r0,r1
00008c  ea00000b          AND      r0,r0,r11
000090  fa20f604          LSR      r6,r0,r4
;;;504            _SetPixelIndex(pDevice, x++, y, Index);
000094  4639              MOV      r1,r7
000096  1c7f              ADDS     r7,r7,#1
000098  4633              MOV      r3,r6
00009a  9a03              LDR      r2,[sp,#0xc]
00009c  9801              LDR      r0,[sp,#4]
00009e  f7fffffe          BL       _SetPixelIndex
;;;505            if (++CurrentPixel == 2) {
0000a2  1c68              ADDS     r0,r5,#1
0000a4  4605              MOV      r5,r0
0000a6  2802              CMP      r0,#2
0000a8  d105              BNE      |L5.182|
;;;506              CurrentPixel = 0;
0000aa  2500              MOVS     r5,#0
;;;507              Pixels = *(++p);
0000ac  f1080001          ADD      r0,r8,#1
0000b0  4680              MOV      r8,r0
0000b2  f890b000          LDRB     r11,[r0,#0]
                  |L5.182|
;;;508            }
;;;509          } while (--xsize);
0000b6  f1a90001          SUB      r0,r9,#1
0000ba  f1b00900          SUBS     r9,r0,#0
0000be  d1de              BNE      |L5.126|
                  |L5.192|
;;;510        }
;;;511        break;
0000c0  e04d              B        |L5.350|
                  |L5.194|
;;;512      case LCD_DRAWMODE_TRANS:
;;;513        if (pTrans) {
0000c2  f1ba0f00          CMP      r10,#0
0000c6  d026              BEQ      |L5.278|
;;;514          do {
0000c8  bf00              NOP      
                  |L5.202|
;;;515            Shift = (1 - CurrentPixel) << 2;
0000ca  f1c50001          RSB      r0,r5,#1
0000ce  0084              LSLS     r4,r0,#2
;;;516            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
0000d0  f1c40104          RSB      r1,r4,#4
0000d4  20f0              MOVS     r0,#0xf0
0000d6  4108              ASRS     r0,r0,r1
0000d8  ea00000b          AND      r0,r0,r11
0000dc  fa20f604          LSR      r6,r0,r4
;;;517            if (Index) {
0000e0  b146              CBZ      r6,|L5.244|
;;;518              PixelIndex = *(pTrans + Index);
0000e2  f85a0026          LDR      r0,[r10,r6,LSL #2]
0000e6  9000              STR      r0,[sp,#0]
;;;519              _SetPixelIndex(pDevice, x, y, PixelIndex);
0000e8  4639              MOV      r1,r7
0000ea  e9dd3000          LDRD     r3,r0,[sp,#0]
0000ee  9a03              LDR      r2,[sp,#0xc]
0000f0  f7fffffe          BL       _SetPixelIndex
                  |L5.244|
;;;520            }
;;;521            x++;
0000f4  1c7f              ADDS     r7,r7,#1
;;;522            if (++CurrentPixel == 2) {
0000f6  1c68              ADDS     r0,r5,#1
0000f8  4605              MOV      r5,r0
0000fa  2802              CMP      r0,#2
0000fc  d105              BNE      |L5.266|
;;;523              CurrentPixel = 0;
0000fe  2500              MOVS     r5,#0
;;;524              Pixels = *(++p);
000100  f1080001          ADD      r0,r8,#1
000104  4680              MOV      r8,r0
000106  f890b000          LDRB     r11,[r0,#0]
                  |L5.266|
;;;525            }
;;;526          } while (--xsize);
00010a  f1a90001          SUB      r0,r9,#1
00010e  f1b00900          SUBS     r9,r0,#0
000112  d1da              BNE      |L5.202|
000114  e022              B        |L5.348|
                  |L5.278|
;;;527        } else {
;;;528          do {
000116  bf00              NOP      
                  |L5.280|
;;;529            Shift = (1 - CurrentPixel) << 2;
000118  f1c50001          RSB      r0,r5,#1
00011c  0084              LSLS     r4,r0,#2
;;;530            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
00011e  f1c40104          RSB      r1,r4,#4
000122  20f0              MOVS     r0,#0xf0
000124  4108              ASRS     r0,r0,r1
000126  ea00000b          AND      r0,r0,r11
00012a  fa20f604          LSR      r6,r0,r4
;;;531            if (Index) {
00012e  b12e              CBZ      r6,|L5.316|
;;;532              _SetPixelIndex(pDevice, x, y, Index);
000130  4633              MOV      r3,r6
000132  4639              MOV      r1,r7
000134  9a03              LDR      r2,[sp,#0xc]
000136  9801              LDR      r0,[sp,#4]
000138  f7fffffe          BL       _SetPixelIndex
                  |L5.316|
;;;533            }
;;;534            x++;
00013c  1c7f              ADDS     r7,r7,#1
;;;535            if (++CurrentPixel == 2) {
00013e  1c68              ADDS     r0,r5,#1
000140  4605              MOV      r5,r0
000142  2802              CMP      r0,#2
000144  d105              BNE      |L5.338|
;;;536              CurrentPixel = 0;
000146  2500              MOVS     r5,#0
;;;537              Pixels = *(++p);
000148  f1080001          ADD      r0,r8,#1
00014c  4680              MOV      r8,r0
00014e  f890b000          LDRB     r11,[r0,#0]
                  |L5.338|
;;;538            }
;;;539          } while (--xsize);
000152  f1a90001          SUB      r0,r9,#1
000156  f1b00900          SUBS     r9,r0,#0
00015a  d1dd              BNE      |L5.280|
                  |L5.348|
;;;540        }
;;;541        break;
00015c  bf00              NOP      
                  |L5.350|
00015e  bf00              NOP                            ;511
;;;542      }
;;;543    }
000160  b005              ADD      sp,sp,#0x14
000162  e8bd8ff0          POP      {r4-r11,pc}
;;;544    
                          ENDP

000166  0000              DCW      0x0000
                  |L5.360|
                          DCD      GUI_pContext

                          AREA ||i._DrawBitLine8BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine8BPP PROC
;;;548    */
;;;549    static void  _DrawBitLine8BPP(GUI_DEVICE * pDevice, int x, int y, U8 const GUI_UNI_PTR * p, int xsize, const LCD_PIXELINDEX * pTrans) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4692              MOV      r10,r2
00000a  461c              MOV      r4,r3
00000c  e9dd5808          LDRD     r5,r8,[sp,#0x20]
;;;550      LCD_PIXELINDEX Pixel;
;;;551    
;;;552      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000010  4826              LDR      r0,|L6.172|
000012  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000014  7c00              LDRB     r0,[r0,#0x10]
000016  f0000003          AND      r0,r0,#3
00001a  b110              CBZ      r0,|L6.34|
00001c  2802              CMP      r0,#2
00001e  d141              BNE      |L6.164|
000020  e01e              B        |L6.96|
                  |L6.34|
;;;553      case 0:
;;;554        if (pTrans) {
000022  f1b80f00          CMP      r8,#0
000026  d00e              BEQ      |L6.70|
;;;555          for (; xsize > 0; xsize--, x++, p++) {
000028  e00a              B        |L6.64|
                  |L6.42|
;;;556            Pixel = *p;
00002a  7826              LDRB     r6,[r4,#0]
;;;557            _SetPixelIndex(pDevice, x, y, *(pTrans + Pixel));
00002c  f8583026          LDR      r3,[r8,r6,LSL #2]
000030  4652              MOV      r2,r10
000032  4639              MOV      r1,r7
000034  4648              MOV      r0,r9
000036  f7fffffe          BL       _SetPixelIndex
00003a  1e6d              SUBS     r5,r5,#1              ;555
00003c  1c7f              ADDS     r7,r7,#1              ;555
00003e  1c64              ADDS     r4,r4,#1              ;555
                  |L6.64|
000040  2d00              CMP      r5,#0                 ;555
000042  dcf2              BGT      |L6.42|
000044  e00b              B        |L6.94|
                  |L6.70|
;;;558          }
;;;559        } else {
;;;560          for (; xsize > 0; xsize--, x++, p++) {
000046  e008              B        |L6.90|
                  |L6.72|
;;;561            _SetPixelIndex(pDevice, x, y, *p);
000048  7823              LDRB     r3,[r4,#0]
00004a  4652              MOV      r2,r10
00004c  4639              MOV      r1,r7
00004e  4648              MOV      r0,r9
000050  f7fffffe          BL       _SetPixelIndex
000054  1e6d              SUBS     r5,r5,#1              ;560
000056  1c7f              ADDS     r7,r7,#1              ;560
000058  1c64              ADDS     r4,r4,#1              ;560
                  |L6.90|
00005a  2d00              CMP      r5,#0                 ;560
00005c  dcf4              BGT      |L6.72|
                  |L6.94|
;;;562          }
;;;563        }
;;;564        break;
00005e  e021              B        |L6.164|
                  |L6.96|
;;;565      case LCD_DRAWMODE_TRANS:
;;;566        if (pTrans) {
000060  f1b80f00          CMP      r8,#0
000064  d00f              BEQ      |L6.134|
;;;567          for (; xsize > 0; xsize--, x++, p++) {
000066  e00b              B        |L6.128|
                  |L6.104|
;;;568            Pixel = *p;
000068  7826              LDRB     r6,[r4,#0]
;;;569            if (Pixel) {
00006a  b136              CBZ      r6,|L6.122|
;;;570              _SetPixelIndex(pDevice, x, y, *(pTrans + Pixel));
00006c  f8583026          LDR      r3,[r8,r6,LSL #2]
000070  4652              MOV      r2,r10
000072  4639              MOV      r1,r7
000074  4648              MOV      r0,r9
000076  f7fffffe          BL       _SetPixelIndex
                  |L6.122|
00007a  1e6d              SUBS     r5,r5,#1              ;567
00007c  1c7f              ADDS     r7,r7,#1              ;567
00007e  1c64              ADDS     r4,r4,#1              ;567
                  |L6.128|
000080  2d00              CMP      r5,#0                 ;567
000082  dcf1              BGT      |L6.104|
000084  e00d              B        |L6.162|
                  |L6.134|
;;;571            }
;;;572          }
;;;573        } else {
;;;574          for (; xsize > 0; xsize--, x++, p++) {
000086  e00a              B        |L6.158|
                  |L6.136|
;;;575            Pixel = *p;
000088  7826              LDRB     r6,[r4,#0]
;;;576            if (Pixel) {
00008a  b12e              CBZ      r6,|L6.152|
;;;577              _SetPixelIndex(pDevice, x, y, Pixel);
00008c  4633              MOV      r3,r6
00008e  4652              MOV      r2,r10
000090  4639              MOV      r1,r7
000092  4648              MOV      r0,r9
000094  f7fffffe          BL       _SetPixelIndex
                  |L6.152|
000098  1e6d              SUBS     r5,r5,#1              ;574
00009a  1c7f              ADDS     r7,r7,#1              ;574
00009c  1c64              ADDS     r4,r4,#1              ;574
                  |L6.158|
00009e  2d00              CMP      r5,#0                 ;574
0000a0  dcf2              BGT      |L6.136|
                  |L6.162|
;;;578            }
;;;579          }
;;;580        }
;;;581        break;
0000a2  bf00              NOP      
                  |L6.164|
0000a4  bf00              NOP                            ;564
;;;582      }
;;;583    }
0000a6  e8bd87f0          POP      {r4-r10,pc}
;;;584    /*********************************************************************
                          ENDP

0000aa  0000              DCW      0x0000
                  |L6.172|
                          DCD      GUI_pContext

                          AREA ||i._DrawBitmap||, CODE, READONLY, ALIGN=1

                  _DrawBitmap PROC
;;;650    */
;;;651    static void _DrawBitmap(GUI_DEVICE * pDevice, int x0, int y0,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;652                           int xSize, int ySize,
;;;653                           int BitsPerPixel, 
;;;654                           int BytesPerLine,
;;;655                           const U8 GUI_UNI_PTR * pData, int Diff,
;;;656                           const LCD_PIXELINDEX * pTrans) {
000004  b083              SUB      sp,sp,#0xc
000006  4615              MOV      r5,r2
000008  461e              MOV      r6,r3
00000a  e9ddba14          LDRD     r11,r10,[sp,#0x50]
00000e  e9dd9712          LDRD     r9,r7,[sp,#0x48]
000012  f8dd8040          LDR      r8,[sp,#0x40]
;;;657      int i;
;;;658    
;;;659      switch (BitsPerPixel) {
000016  9811              LDR      r0,[sp,#0x44]
000018  2808              CMP      r0,#8
00001a  d03f              BEQ      |L7.156|
00001c  dc06              BGT      |L7.44|
00001e  2801              CMP      r0,#1
000020  d009              BEQ      |L7.54|
000022  2802              CMP      r0,#2
000024  d018              BEQ      |L7.88|
000026  2804              CMP      r0,#4
000028  d163              BNE      |L7.242|
00002a  e026              B        |L7.122|
                  |L7.44|
00002c  2810              CMP      r0,#0x10
00002e  d044              BEQ      |L7.186|
000030  2820              CMP      r0,#0x20
000032  d15e              BNE      |L7.242|
000034  e04f              B        |L7.214|
                  |L7.54|
;;;660      case 1:
;;;661        for (i = 0; i < ySize; i++) {
000036  2400              MOVS     r4,#0
000038  e00b              B        |L7.82|
                  |L7.58|
;;;662          _DrawBitLine1BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
00003a  1962              ADDS     r2,r4,r5
00003c  463b              MOV      r3,r7
00003e  e9cdb600          STRD     r11,r6,[sp,#0]
000042  f8cda008          STR      r10,[sp,#8]
000046  e9dd0103          LDRD     r0,r1,[sp,#0xc]
00004a  f7fffffe          BL       _DrawBitLine1BPP
;;;663          pData += BytesPerLine;
00004e  444f              ADD      r7,r7,r9
000050  1c64              ADDS     r4,r4,#1              ;661
                  |L7.82|
000052  4544              CMP      r4,r8                 ;661
000054  dbf1              BLT      |L7.58|
;;;664        }
;;;665        break;
000056  e04c              B        |L7.242|
                  |L7.88|
;;;666      case 2:
;;;667        for (i = 0; i < ySize; i++) {
000058  2400              MOVS     r4,#0
00005a  e00b              B        |L7.116|
                  |L7.92|
;;;668          _DrawBitLine2BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
00005c  1962              ADDS     r2,r4,r5
00005e  463b              MOV      r3,r7
000060  e9cdb600          STRD     r11,r6,[sp,#0]
000064  f8cda008          STR      r10,[sp,#8]
000068  e9dd0103          LDRD     r0,r1,[sp,#0xc]
00006c  f7fffffe          BL       _DrawBitLine2BPP
;;;669          pData += BytesPerLine;
000070  444f              ADD      r7,r7,r9
000072  1c64              ADDS     r4,r4,#1              ;667
                  |L7.116|
000074  4544              CMP      r4,r8                 ;667
000076  dbf1              BLT      |L7.92|
;;;670        }
;;;671        break;
000078  e03b              B        |L7.242|
                  |L7.122|
;;;672      case 4:
;;;673        for (i = 0; i < ySize; i++) {
00007a  2400              MOVS     r4,#0
00007c  e00b              B        |L7.150|
                  |L7.126|
;;;674          _DrawBitLine4BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
00007e  1962              ADDS     r2,r4,r5
000080  463b              MOV      r3,r7
000082  e9cdb600          STRD     r11,r6,[sp,#0]
000086  f8cda008          STR      r10,[sp,#8]
00008a  e9dd0103          LDRD     r0,r1,[sp,#0xc]
00008e  f7fffffe          BL       _DrawBitLine4BPP
;;;675          pData += BytesPerLine;
000092  444f              ADD      r7,r7,r9
000094  1c64              ADDS     r4,r4,#1              ;673
                  |L7.150|
000096  4544              CMP      r4,r8                 ;673
000098  dbf1              BLT      |L7.126|
;;;676        }
;;;677        break;
00009a  e02a              B        |L7.242|
                  |L7.156|
;;;678      case 8:
;;;679        for (i = 0; i < ySize; i++) {
00009c  2400              MOVS     r4,#0
00009e  e009              B        |L7.180|
                  |L7.160|
;;;680          _DrawBitLine8BPP(pDevice, x0, i + y0, pData, xSize, pTrans);
0000a0  1962              ADDS     r2,r4,r5
0000a2  463b              MOV      r3,r7
0000a4  e9cd6a00          STRD     r6,r10,[sp,#0]
0000a8  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0000ac  f7fffffe          BL       _DrawBitLine8BPP
;;;681          pData += BytesPerLine;
0000b0  444f              ADD      r7,r7,r9
0000b2  1c64              ADDS     r4,r4,#1              ;679
                  |L7.180|
0000b4  4544              CMP      r4,r8                 ;679
0000b6  dbf3              BLT      |L7.160|
;;;682        }
;;;683        break;
0000b8  e01b              B        |L7.242|
                  |L7.186|
;;;684      //
;;;685      // Only required for 16bpp color depth of target. Should be removed otherwise.
;;;686      //
;;;687      case 16:
;;;688        for (i = 0; i < ySize; i++) {
0000ba  2400              MOVS     r4,#0
0000bc  e008              B        |L7.208|
                  |L7.190|
;;;689          _DrawBitLine16BPP(pDevice, x0, i + y0, (const U16 *)pData, xSize);
0000be  1962              ADDS     r2,r4,r5
0000c0  463b              MOV      r3,r7
0000c2  9600              STR      r6,[sp,#0]
0000c4  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0000c8  f7fffffe          BL       _DrawBitLine16BPP
;;;690          pData += BytesPerLine;
0000cc  444f              ADD      r7,r7,r9
0000ce  1c64              ADDS     r4,r4,#1              ;688
                  |L7.208|
0000d0  4544              CMP      r4,r8                 ;688
0000d2  dbf4              BLT      |L7.190|
;;;691        }
;;;692        break;
0000d4  e00d              B        |L7.242|
                  |L7.214|
;;;693      //
;;;694      // Only required for 32bpp color depth of target. Should be removed otherwise.
;;;695      //
;;;696      case 32:
;;;697        for (i = 0; i < ySize; i++) {
0000d6  2400              MOVS     r4,#0
0000d8  e008              B        |L7.236|
                  |L7.218|
;;;698          _DrawBitLine32BPP(pDevice, x0, i + y0, (const U32 *)pData, xSize);
0000da  1962              ADDS     r2,r4,r5
0000dc  463b              MOV      r3,r7
0000de  9600              STR      r6,[sp,#0]
0000e0  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0000e4  f7fffffe          BL       _DrawBitLine32BPP
;;;699          pData += BytesPerLine;
0000e8  444f              ADD      r7,r7,r9
0000ea  1c64              ADDS     r4,r4,#1              ;697
                  |L7.236|
0000ec  4544              CMP      r4,r8                 ;697
0000ee  dbf4              BLT      |L7.218|
;;;700        }
;;;701        break;
0000f0  bf00              NOP      
                  |L7.242|
0000f2  bf00              NOP                            ;665
;;;702      }
;;;703    }
0000f4  b007              ADD      sp,sp,#0x1c
0000f6  e8bd8ff0          POP      {r4-r11,pc}
;;;704    
                          ENDP


                          AREA ||i._DrawHLine||, CODE, READONLY, ALIGN=2

                  _DrawHLine PROC
;;;262    */
;;;263    static void _DrawHLine  (GUI_DEVICE * pDevice, int x0, int y,  int x1) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4690              MOV      r8,r2
00000a  461d              MOV      r5,r3
;;;264      int xPhys, yPhys, lphys; //idx;
;;;265      LCD_PIXELINDEX ColorIndex;
;;;266      if (GUI_pContext->DrawMode & LCD_DRAWMODE_XOR) {
00000c  480f              LDR      r0,|L8.76|
00000e  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000010  7c00              LDRB     r0,[r0,#0x10]
000012  f0000001          AND      r0,r0,#1
000016  b148              CBZ      r0,|L8.44|
;;;267        for (; x0 <= x1; x0++) {
000018  e005              B        |L8.38|
                  |L8.26|
;;;268          _XorPixel(pDevice, x0, y);
00001a  4642              MOV      r2,r8
00001c  4621              MOV      r1,r4
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       _XorPixel
000024  1c64              ADDS     r4,r4,#1              ;267
                  |L8.38|
000026  42ac              CMP      r4,r5                 ;267
000028  ddf7              BLE      |L8.26|
00002a  e00d              B        |L8.72|
                  |L8.44|
;;;269        }
;;;270      } else {
;;;271       
;;;272        ColorIndex = LCD__GetColorIndex();
00002c  4807              LDR      r0,|L8.76|
00002e  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000030  6bc0              LDR      r0,[r0,#0x3c]
000032  6806              LDR      r6,[r0,#0]
;;;273    #ifdef USE_OPTIMIZED_DRAW   
;;;274    // #if LCD_SWAP_XY | LCD_MIRROR_X| LCD_MIRROR_Y
;;;275    #if 1
;;;276       xPhys = LOG2PHYS_X(x0, y);
;;;277       yPhys = LOG2PHYS_Y(x0, y); 
;;;278       lphys = (x1 - x0);
;;;279      #else
;;;280        #define xPhys x0
;;;281        #define yPhys y
;;;282        #define lphys x1
;;;283      #endif
;;;284        {
;;;285            *(__IO u16 *) (Bank1_LCD_C) = 0x2a;
;;;286            *(__IO u16 *) (Bank1_LCD_D) = (xPhys>>8)&0xff;
;;;287            *(__IO u16 *) (Bank1_LCD_D) = xPhys & 0xff;
;;;288            *(__IO u16 *) (Bank1_LCD_D) = (480>>8)&0xff;
;;;289            *(__IO u16 *) (Bank1_LCD_D) = 480 & 0xff;
;;;290        
;;;291            *(__IO u16 *) (Bank1_LCD_C) = 0x2b;
;;;292            *(__IO u16 *) (Bank1_LCD_D) = (yPhys>>8)&0xff;
;;;293            *(__IO u16 *) (Bank1_LCD_D) = yPhys & 0xff;
;;;294            *(__IO u16 *) (Bank1_LCD_D) = (yPhys>>8)&0xff;
;;;295            *(__IO u16 *) (Bank1_LCD_D) = yPhys & 0xff;
;;;296    
;;;297            *(__IO u16 *) (Bank1_LCD_C) = 0x2c;
;;;298            for (; xPhys <= lphys; xPhys++)
;;;299            {
;;;300                *(__IO u16 *) (Bank1_LCD_D) = ColorIndex ;
;;;301            }  
;;;302        }
;;;303    //     for (idx =0 ; idx <= lphys ; idx++) 
;;;304    //     {
;;;305    // 	  //
;;;306    //       // Write into hardware ... Adapt to your system
;;;307    // 	  //
;;;308    // 	  
;;;309    // 	  //Example : _SetPixel(ColorIndex)
;;;310    //     }
;;;311    #else
;;;312        for (; x0 <= x1; x0++) {
000034  e006              B        |L8.68|
                  |L8.54|
;;;313          _SetPixelIndex(pDevice, x0, y, ColorIndex);
000036  4633              MOV      r3,r6
000038  4642              MOV      r2,r8
00003a  4621              MOV      r1,r4
00003c  4638              MOV      r0,r7
00003e  f7fffffe          BL       _SetPixelIndex
000042  1c64              ADDS     r4,r4,#1              ;312
                  |L8.68|
000044  42ac              CMP      r4,r5                 ;312
000046  ddf6              BLE      |L8.54|
                  |L8.72|
;;;314        } 
;;;315    #endif
;;;316      }
;;;317    }
000048  e8bd81f0          POP      {r4-r8,pc}
;;;318    
                          ENDP

                  |L8.76|
                          DCD      GUI_pContext

                          AREA ||i._DrawVLine||, CODE, READONLY, ALIGN=2

                  _DrawVLine PROC
;;;322    */
;;;323    static void _DrawVLine  (GUI_DEVICE * pDevice, int x, int y0,  int y1) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  461e              MOV      r6,r3
;;;324      LCD_PIXELINDEX ColorIndex;
;;;325    
;;;326      if (GUI_pContext->DrawMode & LCD_DRAWMODE_XOR) {
00000c  481d              LDR      r0,|L9.132|
00000e  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000010  7c00              LDRB     r0,[r0,#0x10]
000012  f0000001          AND      r0,r0,#1
000016  b148              CBZ      r0,|L9.44|
;;;327        for (; y0 <= y1; y0++) {
000018  e005              B        |L9.38|
                  |L9.26|
;;;328          _XorPixel(pDevice, x, y0);
00001a  4622              MOV      r2,r4
00001c  4629              MOV      r1,r5
00001e  4640              MOV      r0,r8
000020  f7fffffe          BL       _XorPixel
000024  1c64              ADDS     r4,r4,#1              ;327
                  |L9.38|
000026  42b4              CMP      r4,r6                 ;327
000028  ddf7              BLE      |L9.26|
00002a  e029              B        |L9.128|
                  |L9.44|
;;;329        }
;;;330      } else {
;;;331         ColorIndex = LCD__GetColorIndex();
00002c  4815              LDR      r0,|L9.132|
00002e  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000030  6bc0              LDR      r0,[r0,#0x3c]
000032  6807              LDR      r7,[r0,#0]
;;;332    //     for (; y0 <= y1; y0++) {
;;;333    //       _SetPixelIndex(pDevice, x, y0, ColorIndex);
;;;334    //     }
;;;335          {
;;;336            *(__IO u16 *) (Bank1_LCD_C) = 0x2a;
000034  202a              MOVS     r0,#0x2a
000036  f04f41c0          MOV      r1,#0x60000000
00003a  8008              STRH     r0,[r1,#0]
;;;337            *(__IO u16 *) (Bank1_LCD_D) = (x>>8)&0xff;
00003c  f3c52007          UBFX     r0,r5,#8,#8
000040  4911              LDR      r1,|L9.136|
000042  8008              STRH     r0,[r1,#0]
;;;338            *(__IO u16 *) (Bank1_LCD_D) = x & 0xff;
000044  b2e8              UXTB     r0,r5
000046  8008              STRH     r0,[r1,#0]
;;;339            *(__IO u16 *) (Bank1_LCD_D) = (x>>8)&0xff;
000048  f3c52007          UBFX     r0,r5,#8,#8
00004c  8008              STRH     r0,[r1,#0]
;;;340            *(__IO u16 *) (Bank1_LCD_D) = x & 0xff;
00004e  b2e8              UXTB     r0,r5
000050  8008              STRH     r0,[r1,#0]
;;;341        
;;;342            *(__IO u16 *) (Bank1_LCD_C) = 0x2b;
000052  202b              MOVS     r0,#0x2b
000054  0741              LSLS     r1,r0,#29
000056  8008              STRH     r0,[r1,#0]
;;;343            *(__IO u16 *) (Bank1_LCD_D) = (y0>>8)&0xff;
000058  f3c42007          UBFX     r0,r4,#8,#8
00005c  490a              LDR      r1,|L9.136|
00005e  8008              STRH     r0,[r1,#0]
;;;344            *(__IO u16 *) (Bank1_LCD_D) = y0 & 0xff;
000060  b2e0              UXTB     r0,r4
000062  8008              STRH     r0,[r1,#0]
;;;345            *(__IO u16 *) (Bank1_LCD_D) = (y1>>8)&0xff;
000064  f3c62007          UBFX     r0,r6,#8,#8
000068  8008              STRH     r0,[r1,#0]
;;;346            *(__IO u16 *) (Bank1_LCD_D) = y1 & 0xff;
00006a  b2f0              UXTB     r0,r6
00006c  8008              STRH     r0,[r1,#0]
;;;347    
;;;348            *(__IO u16 *) (Bank1_LCD_C) = 0x2c;
00006e  202c              MOVS     r0,#0x2c
000070  06c1              LSLS     r1,r0,#27
000072  8008              STRH     r0,[r1,#0]
;;;349            for (; y0 <= y1; y0++)
000074  e002              B        |L9.124|
                  |L9.118|
;;;350            {
;;;351                *(__IO u16 *) (Bank1_LCD_D) = ColorIndex ;
000076  4904              LDR      r1,|L9.136|
000078  800f              STRH     r7,[r1,#0]
00007a  1c64              ADDS     r4,r4,#1              ;349
                  |L9.124|
00007c  42b4              CMP      r4,r6                 ;349
00007e  ddfa              BLE      |L9.118|
                  |L9.128|
;;;352            }
;;;353        }
;;;354      }
;;;355    }
000080  e8bd81f0          POP      {r4-r8,pc}
;;;356    
                          ENDP

                  |L9.132|
                          DCD      GUI_pContext
                  |L9.136|
                          DCD      0x60020000

                          AREA ||i._FillRect||, CODE, READONLY, ALIGN=2

                  _FillRect PROC
;;;226    */
;;;227    static void _FillRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4607              MOV      r7,r0
000004  9c05              LDR      r4,[sp,#0x14]
;;;228    
;;;229    //   for (; y0 <= y1; y0++) 
;;;230    //   {
;;;231    //     _DrawHLine(pDevice, x0, y0, x1);
;;;232    //   }
;;;233        u32 cnt;
;;;234        LCD_PIXELINDEX ColorIndex;
;;;235        
;;;236        ColorIndex = LCD__GetColorIndex();
000006  4e22              LDR      r6,|L10.144|
000008  6836              LDR      r6,[r6,#0]  ; GUI_pContext
00000a  6bf6              LDR      r6,[r6,#0x3c]
00000c  6830              LDR      r0,[r6,#0]
;;;237        cnt = (y1-y0+1)*(x1-x0+1);
00000e  1aa6              SUBS     r6,r4,r2
000010  1c76              ADDS     r6,r6,#1
000012  eba30c01          SUB      r12,r3,r1
000016  f10c0c01          ADD      r12,r12,#1
00001a  fb06f50c          MUL      r5,r6,r12
;;;238        
;;;239        *(__IO u16 *) (Bank1_LCD_C) = 0x2a;
00001e  262a              MOVS     r6,#0x2a
000020  f04f4cc0          MOV      r12,#0x60000000
000024  f8ac6000          STRH     r6,[r12,#0]
;;;240        *(__IO u16 *) (Bank1_LCD_D) = (x0>>8)&0xff;
000028  f3c12607          UBFX     r6,r1,#8,#8
00002c  f8dfc064          LDR      r12,|L10.148|
000030  f8ac6000          STRH     r6,[r12,#0]
;;;241        *(__IO u16 *) (Bank1_LCD_D) = x0 & 0xff;
000034  b2ce              UXTB     r6,r1
000036  f8ac6000          STRH     r6,[r12,#0]
;;;242        *(__IO u16 *) (Bank1_LCD_D) = (x1>>8)&0xff;
00003a  f3c32607          UBFX     r6,r3,#8,#8
00003e  f8ac6000          STRH     r6,[r12,#0]
;;;243        *(__IO u16 *) (Bank1_LCD_D) = x1 & 0xff;
000042  b2de              UXTB     r6,r3
000044  f8ac6000          STRH     r6,[r12,#0]
;;;244        
;;;245        *(__IO u16 *) (Bank1_LCD_C) = 0x2b;
000048  262b              MOVS     r6,#0x2b
00004a  f04f4cc0          MOV      r12,#0x60000000
00004e  f8ac6000          STRH     r6,[r12,#0]
;;;246        *(__IO u16 *) (Bank1_LCD_D) = (y0>>8)&0xff;
000052  f3c22607          UBFX     r6,r2,#8,#8
000056  f8dfc03c          LDR      r12,|L10.148|
00005a  f8ac6000          STRH     r6,[r12,#0]
;;;247        *(__IO u16 *) (Bank1_LCD_D) = y0 & 0xff;
00005e  b2d6              UXTB     r6,r2
000060  f8ac6000          STRH     r6,[r12,#0]
;;;248        *(__IO u16 *) (Bank1_LCD_D) = (y1>>8)&0xff;
000064  f3c42607          UBFX     r6,r4,#8,#8
000068  f8ac6000          STRH     r6,[r12,#0]
;;;249        *(__IO u16 *) (Bank1_LCD_D) = y1 & 0xff;
00006c  b2e6              UXTB     r6,r4
00006e  f8ac6000          STRH     r6,[r12,#0]
;;;250    
;;;251        *(__IO u16 *) (Bank1_LCD_C) = 0x2c;
000072  262c              MOVS     r6,#0x2c
000074  f04f4cc0          MOV      r12,#0x60000000
000078  f8ac6000          STRH     r6,[r12,#0]
;;;252        while ( cnt-- )
00007c  e003              B        |L10.134|
                  |L10.126|
;;;253        {
;;;254            *(__IO u16 *) (Bank1_LCD_D) = ColorIndex;
00007e  f8dfc014          LDR      r12,|L10.148|
000082  f8ac0000          STRH     r0,[r12,#0]
                  |L10.134|
000086  1e2e              SUBS     r6,r5,#0              ;252
000088  f1a50501          SUB      r5,r5,#1              ;252
00008c  d1f7              BNE      |L10.126|
;;;255        }
;;;256    
;;;257    }
00008e  bdf0              POP      {r4-r7,pc}
;;;258    
                          ENDP

                  |L10.144|
                          DCD      GUI_pContext
                  |L10.148|
                          DCD      0x60020000

                          AREA ||i._GetDevData||, CODE, READONLY, ALIGN=2

                  _GetDevData PROC
;;;764    */
;;;765    static void * _GetDevData(GUI_DEVICE * pDevice, int Index) {
000000  4602              MOV      r2,r0
;;;766      GUI_USE_PARA(pDevice);
;;;767      #if GUI_SUPPORT_MEMDEV
;;;768        switch (Index) {
000002  2901              CMP      r1,#1
000004  d101              BNE      |L11.10|
;;;769        case LCD_DEVDATA_MEMDEV:
;;;770          return (void *)&GUI_MEMDEV_DEVICE_16; // TBD: Has to be adapted to the right memory device depending on the used color depth!
000006  4802              LDR      r0,|L11.16|
                  |L11.8|
;;;771        }
;;;772      #else
;;;773        GUI_USE_PARA(Index);
;;;774      #endif
;;;775      return NULL;
;;;776    }
000008  4770              BX       lr
                  |L11.10|
00000a  2000              MOVS     r0,#0                 ;775
00000c  e7fc              B        |L11.8|
;;;777    
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      GUI_MEMDEV_DEVICE_16

                          AREA ||i._GetDevFunc||, CODE, READONLY, ALIGN=2

                  _GetDevFunc PROC
;;;905    */
;;;906    static void (* _GetDevFunc(GUI_DEVICE ** ppDevice, int Index))(void) {
000000  4602              MOV      r2,r0
;;;907      GUI_USE_PARA(ppDevice);
;;;908      switch (Index) {
000002  f1a10009          SUB      r0,r1,#9
000006  2808              CMP      r0,#8
000008  d213              BCS      |L12.50|
00000a  e8dff000          TBB      [pc,r0]
00000e  0406              DCB      0x04,0x06
000010  080a120c          DCB      0x08,0x0a,0x12,0x0c
000014  0e10              DCB      0x0e,0x10
;;;909      case LCD_DEVFUNC_SET_VRAM_ADDR:
;;;910        return (void (*)(void))_SetVRAMAddr;
000016  4808              LDR      r0,|L12.56|
                  |L12.24|
;;;911      case LCD_DEVFUNC_SET_VSIZE:
;;;912        return (void (*)(void))_SetVSize;
;;;913      case LCD_DEVFUNC_SET_SIZE:
;;;914        return (void (*)(void))_SetSize;
;;;915      case LCD_DEVFUNC_INIT:
;;;916        return (void (*)(void))_Init;
;;;917      case LCD_DEVFUNC_ON:
;;;918        return (void (*)(void))_On;
;;;919      case LCD_DEVFUNC_OFF:
;;;920        return (void (*)(void))_Off;
;;;921      case LCD_DEVFUNC_SETLUTENTRY:
;;;922        return (void (*)(void))_SetLUTEntry;
;;;923      }
;;;924      return NULL;
;;;925    }
000018  4770              BX       lr
00001a  4808              LDR      r0,|L12.60|
00001c  e7fc              B        |L12.24|
00001e  4808              LDR      r0,|L12.64|
000020  e7fa              B        |L12.24|
000022  4808              LDR      r0,|L12.68|
000024  e7f8              B        |L12.24|
000026  4808              LDR      r0,|L12.72|
000028  e7f6              B        |L12.24|
00002a  4808              LDR      r0,|L12.76|
00002c  e7f4              B        |L12.24|
00002e  4808              LDR      r0,|L12.80|
000030  e7f2              B        |L12.24|
                  |L12.50|
000032  2000              MOVS     r0,#0                 ;924
000034  e7f0              B        |L12.24|
;;;926    
                          ENDP

000036  0000              DCW      0x0000
                  |L12.56|
                          DCD      _SetVRAMAddr
                  |L12.60|
                          DCD      _SetVSize
                  |L12.64|
                          DCD      _SetSize
                  |L12.68|
                          DCD      _Init
                  |L12.72|
                          DCD      _On
                  |L12.76|
                          DCD      _Off
                  |L12.80|
                          DCD      _SetLUTEntry

                          AREA ||i._GetDevProp||, CODE, READONLY, ALIGN=1

                  _GetDevProp PROC
;;;729    */
;;;730    static I32 _GetDevProp(GUI_DEVICE * pDevice, int Index) {
000000  4603              MOV      r3,r0
000002  460a              MOV      r2,r1
;;;731      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;732    
;;;733      pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
000004  6899              LDR      r1,[r3,#8]
;;;734      switch (Index) {
000006  2a0f              CMP      r2,#0xf
000008  d21f              BCS      |L13.74|
00000a  e8dff002          TBB      [pc,r2]
00000e  1e08              DCB      0x1e,0x08
000010  0a0c0e1e          DCB      0x0a,0x0c,0x0e,0x1e
000014  1e1e1012          DCB      0x1e,0x1e,0x10,0x12
000018  1416181a          DCB      0x14,0x16,0x18,0x1a
00001c  1c00              DCB      0x1c,0x00
;;;735      case LCD_DEVCAP_XSIZE:
;;;736        return pContext->xSize;
00001e  6848              LDR      r0,[r1,#4]
                  |L13.32|
;;;737      case LCD_DEVCAP_YSIZE:
;;;738        return pContext->ySize;
;;;739      case LCD_DEVCAP_VXSIZE:
;;;740        return pContext->vxSize;
;;;741      case LCD_DEVCAP_VYSIZE:
;;;742        return pContext->vySize;
;;;743      case LCD_DEVCAP_BITSPERPIXEL:
;;;744        return pContext->BitsPerPixel;
;;;745      case LCD_DEVCAP_NUMCOLORS:
;;;746        return 0;
;;;747      case LCD_DEVCAP_XMAG:
;;;748        return 1;
;;;749      case LCD_DEVCAP_YMAG:
;;;750        return 1;
;;;751      case LCD_DEVCAP_MIRROR_X:
;;;752        return 0;
;;;753      case LCD_DEVCAP_MIRROR_Y:
;;;754        return 0;
;;;755      case LCD_DEVCAP_SWAP_XY:
;;;756        return 0;
;;;757      }
;;;758      return -1;
;;;759    }
000020  4770              BX       lr
000022  6888              LDR      r0,[r1,#8]            ;738
000024  e7fc              B        |L13.32|
000026  68c8              LDR      r0,[r1,#0xc]          ;740
000028  e7fa              B        |L13.32|
00002a  6908              LDR      r0,[r1,#0x10]         ;742
00002c  e7f8              B        |L13.32|
00002e  6988              LDR      r0,[r1,#0x18]         ;744
000030  e7f6              B        |L13.32|
000032  2000              MOVS     r0,#0                 ;746
000034  e7f4              B        |L13.32|
000036  2001              MOVS     r0,#1                 ;748
000038  e7f2              B        |L13.32|
00003a  2001              MOVS     r0,#1                 ;750
00003c  e7f0              B        |L13.32|
00003e  2000              MOVS     r0,#0                 ;752
000040  e7ee              B        |L13.32|
000042  2000              MOVS     r0,#0                 ;754
000044  e7ec              B        |L13.32|
000046  2000              MOVS     r0,#0                 ;756
000048  e7ea              B        |L13.32|
                  |L13.74|
00004a  f04f30ff          MOV      r0,#0xffffffff        ;758
00004e  e7e7              B        |L13.32|
;;;760    
                          ENDP


                          AREA ||i._GetPixelIndex||, CODE, READONLY, ALIGN=1

                  _GetPixelIndex PROC
;;;177    */
;;;178    static unsigned int _GetPixelIndex(GUI_DEVICE * pDevice, int x, int y) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;179      unsigned int PixelIndex;
;;;180        //
;;;181        // Convert logical into physical coordinates (Dep. on LCDConf.h)
;;;182        //
;;;183        #if (LCD_MIRROR_X == 1) || (LCD_MIRROR_Y == 1) || (LCD_SWAP_XY == 1)
;;;184          int xPhys, yPhys;
;;;185    
;;;186          xPhys = LOG2PHYS_X(x, y);
;;;187          yPhys = LOG2PHYS_Y(x, y);
;;;188        #else
;;;189          #define xPhys x
;;;190          #define yPhys y
;;;191        #endif
;;;192        GUI_USE_PARA(pDevice);
;;;193        GUI_USE_PARA(x);
;;;194        GUI_USE_PARA(y);
;;;195        {
;;;196          //
;;;197          // Write into hardware ... Adapt to your system
;;;198          //
;;;199          // TBD by customer...
;;;200          //
;;;201    			PixelIndex = LCD_GetPoint(xPhys, yPhys);
00000a  b2a9              UXTH     r1,r5
00000c  b2a0              UXTH     r0,r4
00000e  f7fffffe          BL       LCD_GetPoint
000012  4606              MOV      r6,r0
;;;202        }
;;;203        #if (LCD_MIRROR_X == 0) && (LCD_MIRROR_Y == 0) && (LCD_SWAP_XY == 0)
;;;204          #undef xPhys
;;;205          #undef yPhys
;;;206        #endif
;;;207      return PixelIndex;
000014  4630              MOV      r0,r6
;;;208    }
000016  e8bd81f0          POP      {r4-r8,pc}
;;;209    
                          ENDP


                          AREA ||i._GetRect||, CODE, READONLY, ALIGN=1

                  _GetRect PROC
;;;781    */
;;;782    static void _GetRect(GUI_DEVICE * pDevice, LCD_RECT * pRect) {
000000  6882              LDR      r2,[r0,#8]
;;;783      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;784    
;;;785      pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
;;;786      pRect->x0 = 0;
000002  2300              MOVS     r3,#0
000004  800b              STRH     r3,[r1,#0]
;;;787      pRect->y0 = 0;
000006  804b              STRH     r3,[r1,#2]
;;;788      pRect->x1 = pContext->vxSize - 1;
000008  8993              LDRH     r3,[r2,#0xc]
00000a  1e5b              SUBS     r3,r3,#1
00000c  b21b              SXTH     r3,r3
00000e  808b              STRH     r3,[r1,#4]
;;;789      pRect->y1 = pContext->vySize - 1;
000010  8a13              LDRH     r3,[r2,#0x10]
000012  1e5b              SUBS     r3,r3,#1
000014  b21b              SXTH     r3,r3
000016  80cb              STRH     r3,[r1,#6]
;;;790    }
000018  4770              BX       lr
;;;791    
                          ENDP


                          AREA ||i._Init||, CODE, READONLY, ALIGN=1

                  _Init PROC
;;;865    */
;;;866    static int  _Init(GUI_DEVICE * pDevice) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;867      int r;
;;;868    
;;;869      r = _InitOnce(pDevice);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _InitOnce
00000a  4605              MOV      r5,r0
;;;870      r |= LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_INITCONTROLLER, NULL);
00000c  2200              MOVS     r2,#0
00000e  2101              MOVS     r1,#1
000010  69a0              LDR      r0,[r4,#0x18]
000012  f7fffffe          BL       LCD_X_DisplayDriver
000016  4305              ORRS     r5,r5,r0
;;;871      return r;
000018  4628              MOV      r0,r5
;;;872    }
00001a  bd70              POP      {r4-r6,pc}
;;;873    
                          ENDP


                          AREA ||i._InitOnce||, CODE, READONLY, ALIGN=1

                  _InitOnce PROC
;;;714    */
;;;715    static int _InitOnce(GUI_DEVICE * pDevice) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;716      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;717    
;;;718      if (pDevice->u.pContext == NULL) {
000004  68a0              LDR      r0,[r4,#8]
000006  b958              CBNZ     r0,|L17.32|
;;;719        pDevice->u.pContext = GUI_ALLOC_GetFixedBlock(sizeof(DRIVER_CONTEXT_TEMPLATE));
000008  201c              MOVS     r0,#0x1c
00000a  f7fffffe          BL       GUI_ALLOC_GetFixedBlock
00000e  60a0              STR      r0,[r4,#8]
;;;720        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
000010  68a5              LDR      r5,[r4,#8]
;;;721        pContext->BitsPerPixel = LCD__GetBPP(pDevice->pColorConvAPI->pfGetIndexMask());
000012  6921              LDR      r1,[r4,#0x10]
000014  6888              LDR      r0,[r1,#8]
000016  4780              BLX      r0
000018  4606              MOV      r6,r0
00001a  f7fffffe          BL       LCD__GetBPP
00001e  61a8              STR      r0,[r5,#0x18]
                  |L17.32|
;;;722      }
;;;723      return pDevice->u.pContext ? 0 : 1;
000020  68a0              LDR      r0,[r4,#8]
000022  b908              CBNZ     r0,|L17.40|
000024  2001              MOVS     r0,#1
                  |L17.38|
;;;724    }
000026  bd70              POP      {r4-r6,pc}
                  |L17.40|
000028  2000              MOVS     r0,#0                 ;723
00002a  e7fc              B        |L17.38|
;;;725    
                          ENDP


                          AREA ||i._Off||, CODE, READONLY, ALIGN=1

                  _Off PROC
;;;885    */
;;;886    static void _Off (GUI_DEVICE * pDevice) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;887      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_OFF, NULL);
000004  2200              MOVS     r2,#0
000006  2106              MOVS     r1,#6
000008  69a0              LDR      r0,[r4,#0x18]
00000a  f7fffffe          BL       LCD_X_DisplayDriver
;;;888    }
00000e  bd10              POP      {r4,pc}
;;;889    
                          ENDP


                          AREA ||i._On||, CODE, READONLY, ALIGN=1

                  _On PROC
;;;877    */
;;;878    static void _On (GUI_DEVICE * pDevice) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;879      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_ON, NULL);
000004  2200              MOVS     r2,#0
000006  2105              MOVS     r1,#5
000008  69a0              LDR      r0,[r4,#0x18]
00000a  f7fffffe          BL       LCD_X_DisplayDriver
;;;880    }
00000e  bd10              POP      {r4,pc}
;;;881    
                          ENDP


                          AREA ||i._SetLUTEntry||, CODE, READONLY, ALIGN=1

                  _SetLUTEntry PROC
;;;893    */
;;;894    static void _SetLUTEntry(GUI_DEVICE * pDevice, U8 Pos, LCD_COLOR Color) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;895      LCD_X_SETLUTENTRY_INFO Data = {0};
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  9001              STR      r0,[sp,#4]
;;;896    
;;;897      Data.Pos   = Pos;
00000e  f88d5004          STRB     r5,[sp,#4]
;;;898      Data.Color = Color;
000012  9600              STR      r6,[sp,#0]
;;;899      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETLUTENTRY, (void *)&Data);
000014  466a              MOV      r2,sp
000016  2104              MOVS     r1,#4
000018  69a0              LDR      r0,[r4,#0x18]
00001a  f7fffffe          BL       LCD_X_DisplayDriver
;;;900    }
00001e  bd7c              POP      {r2-r6,pc}
;;;901    
                          ENDP


                          AREA ||i._SetOrg||, CODE, READONLY, ALIGN=1

                  _SetOrg PROC
;;;795    */
;;;796    static void _SetOrg(GUI_DEVICE * pDevice, int x, int y) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;797      LCD_X_SETORG_INFO Data = {0};
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  9001              STR      r0,[sp,#4]
;;;798    
;;;799      Data.xPos = x;
00000e  9500              STR      r5,[sp,#0]
;;;800      Data.yPos = y;
000010  9601              STR      r6,[sp,#4]
;;;801      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETORG, (void *)&Data);
000012  466a              MOV      r2,sp
000014  2103              MOVS     r1,#3
000016  69a0              LDR      r0,[r4,#0x18]
000018  f7fffffe          BL       LCD_X_DisplayDriver
;;;802    }
00001c  bd7c              POP      {r2-r6,pc}
;;;803    
                          ENDP


                          AREA ||i._SetPixelIndex||, CODE, READONLY, ALIGN=1

                  _SetPixelIndex PROC
;;;137    */
;;;138    static void _SetPixelIndex(GUI_DEVICE * pDevice, int x, int y, int PixelIndex) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;139        //
;;;140        // Convert logical into physical coordinates (Dep. on LCDConf.h)
;;;141        //
;;;142        #if (LCD_MIRROR_X == 1) || (LCD_MIRROR_Y == 1) || (LCD_SWAP_XY == 1)
;;;143          int xPhys, yPhys;
;;;144    
;;;145          xPhys = LOG2PHYS_X(x, y);
;;;146          yPhys = LOG2PHYS_Y(x, y);
;;;147        #else
;;;148          #define xPhys x
;;;149          #define yPhys y
;;;150        #endif
;;;151        GUI_USE_PARA(pDevice);
;;;152        GUI_USE_PARA(x);
;;;153        GUI_USE_PARA(y);
;;;154        GUI_USE_PARA(PixelIndex);
;;;155        {
;;;156          //
;;;157          // Write into hardware ... Adapt to your system
;;;158          //
;;;159          // TBD by customer...
;;;160          //
;;;161    			LCD_SetPoint(xPhys, yPhys, PixelIndex);
00000c  b2b2              UXTH     r2,r6
00000e  b2a9              UXTH     r1,r5
000010  b2a0              UXTH     r0,r4
000012  f7fffffe          BL       LCD_SetPoint
;;;162        }
;;;163        #if (LCD_MIRROR_X == 0) && (LCD_MIRROR_Y == 0) && (LCD_SWAP_XY == 0)
;;;164          #undef xPhys
;;;165          #undef yPhys
;;;166        #endif
;;;167    }
000016  e8bd81f0          POP      {r4-r8,pc}
;;;168    
                          ENDP


                          AREA ||i._SetSize||, CODE, READONLY, ALIGN=1

                  _SetSize PROC
;;;846    */
;;;847    static void _SetSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;848      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;849      LCD_X_SETSIZE_INFO Data = {0};
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
00000e  9001              STR      r0,[sp,#4]
;;;850    
;;;851      _InitOnce(pDevice);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       _InitOnce
;;;852      if (pDevice->u.pContext) {
000016  68a8              LDR      r0,[r5,#8]
000018  b178              CBZ      r0,|L23.58|
;;;853        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
00001a  68ac              LDR      r4,[r5,#8]
;;;854        pContext->vxSizePhys = (pContext->vxSizePhys == 0) ? xSize : pContext->vxSizePhys;
00001c  6960              LDR      r0,[r4,#0x14]
00001e  b908              CBNZ     r0,|L23.36|
000020  4630              MOV      r0,r6
000022  e000              B        |L23.38|
                  |L23.36|
000024  6960              LDR      r0,[r4,#0x14]
                  |L23.38|
000026  6160              STR      r0,[r4,#0x14]
;;;855        pContext->xSize = xSize;
000028  6066              STR      r6,[r4,#4]
;;;856        pContext->ySize = ySize;
00002a  60a7              STR      r7,[r4,#8]
;;;857        Data.xSize = xSize;
00002c  9600              STR      r6,[sp,#0]
;;;858        Data.ySize = ySize;
00002e  9701              STR      r7,[sp,#4]
;;;859        LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETSIZE, (void *)&Data);
000030  466a              MOV      r2,sp
000032  2107              MOVS     r1,#7
000034  69a8              LDR      r0,[r5,#0x18]
000036  f7fffffe          BL       LCD_X_DisplayDriver
                  |L23.58|
;;;860      }
;;;861    }
00003a  e8bd81fc          POP      {r2-r8,pc}
;;;862    /*********************************************************************
                          ENDP


                          AREA ||i._SetVRAMAddr||, CODE, READONLY, ALIGN=1

                  _SetVRAMAddr PROC
;;;813    */
;;;814    static void _SetVRAMAddr(GUI_DEVICE * pDevice, void * pVRAM) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;815      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;816      LCD_X_SETVRAMADDR_INFO Data = {0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;817    
;;;818      _InitOnce(pDevice);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _InitOnce
;;;819      if (pDevice->u.pContext) {
000010  68a0              LDR      r0,[r4,#8]
000012  b138              CBZ      r0,|L24.36|
;;;820        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
000014  68a6              LDR      r6,[r4,#8]
;;;821        pContext->VRAMAddr = (U32)pVRAM;
000016  6035              STR      r5,[r6,#0]
;;;822        Data.pVRAM = pVRAM;
000018  9500              STR      r5,[sp,#0]
;;;823        LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVRAMADDR, (void *)&Data);
00001a  466a              MOV      r2,sp
00001c  2102              MOVS     r1,#2
00001e  69a0              LDR      r0,[r4,#0x18]
000020  f7fffffe          BL       LCD_X_DisplayDriver
                  |L24.36|
;;;824      }
;;;825    }
000024  bdf8              POP      {r3-r7,pc}
;;;826    
                          ENDP


                          AREA ||i._SetVSize||, CODE, READONLY, ALIGN=1

                  _SetVSize PROC
;;;830    */
;;;831    static void _SetVSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;832      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;833    
;;;834      _InitOnce(pDevice);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       _InitOnce
;;;835      if (pDevice->u.pContext) {
000010  68a8              LDR      r0,[r5,#8]
000012  b118              CBZ      r0,|L25.28|
;;;836        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
000014  68ac              LDR      r4,[r5,#8]
;;;837        pContext->vxSize = xSize;
000016  60e6              STR      r6,[r4,#0xc]
;;;838        pContext->vySize = ySize;
000018  6127              STR      r7,[r4,#0x10]
;;;839        pContext->vxSizePhys = xSize;
00001a  6166              STR      r6,[r4,#0x14]
                  |L25.28|
;;;840      }
;;;841    }
00001c  e8bd81f0          POP      {r4-r8,pc}
;;;842    
                          ENDP


                          AREA ||i._XorPixel||, CODE, READONLY, ALIGN=1

                  _XorPixel PROC
;;;213    */
;;;214    static void _XorPixel(GUI_DEVICE * pDevice, int x, int y) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;215      LCD_PIXELINDEX PixelIndex;
;;;216      LCD_PIXELINDEX IndexMask;
;;;217    
;;;218      PixelIndex = _GetPixelIndex(pDevice, x, y);
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _GetPixelIndex
000014  4607              MOV      r7,r0
;;;219      IndexMask  = pDevice->pColorConvAPI->pfGetIndexMask();
000016  6921              LDR      r1,[r4,#0x10]
000018  6888              LDR      r0,[r1,#8]
00001a  4780              BLX      r0
00001c  4680              MOV      r8,r0
;;;220      _SetPixelIndex(pDevice, x, y, PixelIndex ^ IndexMask);
00001e  ea870308          EOR      r3,r7,r8
000022  4632              MOV      r2,r6
000024  4629              MOV      r1,r5
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       _SetPixelIndex
;;;221    }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;222    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUIDRV_Template_API
                          DCD      0x00000000
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      _SetOrg
                          DCD      _GetDevFunc
                          DCD      _GetDevProp
                          DCD      _GetDevData
                          DCD      _GetRect

;*** Start embedded assembler ***

#line 1 "..\\STemWinLibrary522\\Config\\GUIDRV_Template.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_GUIDRV_Template_c_4a54813b____REV16|
#line 129 "D:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_GUIDRV_Template_c_4a54813b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_GUIDRV_Template_c_4a54813b____REVSH|
#line 144
|__asm___17_GUIDRV_Template_c_4a54813b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
