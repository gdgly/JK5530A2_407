; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\load_face.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\load_face.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\load_face.crf --no_multibyte_chars ..\APP\load_Face.c]
                          THUMB

                          AREA ||i.CreateWindowload||, CODE, READONLY, ALIGN=2

                  CreateWindowload PROC
;;;260    
;;;261    WM_HWIN CreateWindowload(void) {
000000  b57c              PUSH     {r2-r6,lr}
;;;262    
;;;263    	int dlen = 0;
000002  2500              MOVS     r5,#0
;;;264    		
;;;265    	int *key_loc;
;;;266    		
;;;267    	if( FLAG_FIRSTWIN[2] )
000004  4832              LDR      r0,|L1.208|
000006  7880              LDRB     r0,[r0,#2]  ; FLAG_FIRSTWIN
000008  b398              CBZ      r0,|L1.114|
;;;268    	{
;;;269    		if( CLists.LOAD_C 	  !=	0xffffff )
00000a  4832              LDR      r0,|L1.212|
00000c  f8b000e2          LDRH     r0,[r0,#0xe2]  ; CLists
000010  f06f417f          MVN      r1,#0xff000000
000014  4288              CMP      r0,r1
000016  d007              BEQ      |L1.40|
;;;270    				
;;;271    			strcpy( SGhListL[10].f_SName , Read_Data_Parse(1) ); 		strcpy( SGhListL[10].f_EName , Read_Data_Parse(1) ); 			
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       Read_Data_Parse
00001e  4606              MOV      r6,r0
000020  4631              MOV      r1,r6
000022  482d              LDR      r0,|L1.216|
000024  f7fffffe          BL       strcpy
                  |L1.40|
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       Read_Data_Parse
00002e  4606              MOV      r6,r0
000030  4631              MOV      r1,r6
000032  4829              LDR      r0,|L1.216|
000034  3014              ADDS     r0,r0,#0x14
000036  f7fffffe          BL       strcpy
;;;272    				
;;;273    		if( CLists.LOAD_V 	  !=	0xffffff )
00003a  4826              LDR      r0,|L1.212|
00003c  f8b000e4          LDRH     r0,[r0,#0xe4]  ; CLists
000040  f06f417f          MVN      r1,#0xff000000
000044  4288              CMP      r0,r1
000046  d008              BEQ      |L1.90|
;;;274    				
;;;275    			strcpy( SGhListL[13].f_SName , Read_Data_Parse(2) ); 		strcpy( SGhListL[13].f_EName , Read_Data_Parse(2) ); 			
000048  2002              MOVS     r0,#2
00004a  f7fffffe          BL       Read_Data_Parse
00004e  4606              MOV      r6,r0
000050  4631              MOV      r1,r6
000052  4821              LDR      r0,|L1.216|
000054  30d8              ADDS     r0,r0,#0xd8
000056  f7fffffe          BL       strcpy
                  |L1.90|
00005a  2002              MOVS     r0,#2
00005c  f7fffffe          BL       Read_Data_Parse
000060  4606              MOV      r6,r0
000062  4631              MOV      r1,r6
000064  481c              LDR      r0,|L1.216|
000066  30ec              ADDS     r0,r0,#0xec
000068  f7fffffe          BL       strcpy
;;;276    				
;;;277    		FLAG_FIRSTWIN[2] = 0;	
00006c  2000              MOVS     r0,#0
00006e  4918              LDR      r1,|L1.208|
000070  7088              STRB     r0,[r1,#2]
                  |L1.114|
;;;278    			
;;;279    	} 	
;;;280    		
;;;281    	CLists.CSET_Current_Laod =  CLists.LOAD_C;
000072  4818              LDR      r0,|L1.212|
000074  f8b000e2          LDRH     r0,[r0,#0xe2]  ; CLists
000078  4916              LDR      r1,|L1.212|
00007a  6148              STR      r0,[r1,#0x14]  ; CLists
;;;282    
;;;283    	dlen = sizeof(SGhListL) / sizeof(SGhListL[0]);
00007c  250f              MOVS     r5,#0xf
;;;284    		
;;;285    	key_loc = get_id_index( SGhListL, dlen);
00007e  4629              MOV      r1,r5
000080  4816              LDR      r0,|L1.220|
000082  f7fffffe          BL       get_id_index
000086  4604              MOV      r4,r0
;;;286    		
;;;287    	memset( displayStr, '\0', sizeof(displayStr));
000088  2114              MOVS     r1,#0x14
00008a  4815              LDR      r0,|L1.224|
00008c  f7fffffe          BL       __aeabi_memclr
;;;288    		
;;;289    	if( *key_loc != 11 ){
000090  6820              LDR      r0,[r4,#0]
000092  280b              CMP      r0,#0xb
000094  d00b              BEQ      |L1.174|
;;;290    
;;;291    		SGhListL[*(key_loc+1)].focusType = 0;
000096  2000              MOVS     r0,#0
000098  6861              LDR      r1,[r4,#4]
00009a  eb0101c1          ADD      r1,r1,r1,LSL #3
00009e  4a0f              LDR      r2,|L1.220|
0000a0  eb0201c1          ADD      r1,r2,r1,LSL #3
0000a4  6048              STR      r0,[r1,#4]
;;;292    			
;;;293    		SGhListL[10].focusType = 1;
0000a6  2101              MOVS     r1,#1
0000a8  4610              MOV      r0,r2
0000aa  f8c012d4          STR      r1,[r0,#0x2d4]
                  |L1.174|
;;;294    	}
;;;295    
;;;296    	load_wind = GUI_CreateDialogBox(_aDialogCreateload, GUI_COUNTOF(_aDialogCreateload), _cbDialogload, WM_HBKWIN, 0, 0);
0000ae  f7fffffe          BL       WM_GetDesktopWindow
0000b2  4606              MOV      r6,r0
0000b4  2000              MOVS     r0,#0
0000b6  9000              STR      r0,[sp,#0]
0000b8  4633              MOV      r3,r6
0000ba  4a0a              LDR      r2,|L1.228|
0000bc  2106              MOVS     r1,#6
0000be  9001              STR      r0,[sp,#4]
0000c0  4809              LDR      r0,|L1.232|
0000c2  f7fffffe          BL       GUI_CreateDialogBox
0000c6  4909              LDR      r1,|L1.236|
0000c8  6008              STR      r0,[r1,#0]  ; load_wind
;;;297    		
;;;298    	return load_wind;
0000ca  4608              MOV      r0,r1
0000cc  6800              LDR      r0,[r0,#0]  ; load_wind
;;;299      
;;;300    }
0000ce  bd7c              POP      {r2-r6,pc}
;;;301    
                          ENDP

                  |L1.208|
                          DCD      FLAG_FIRSTWIN
                  |L1.212|
                          DCD      CLists
                  |L1.216|
                          DCD      SGhListL+0x2dc
                  |L1.220|
                          DCD      SGhListL
                  |L1.224|
                          DCD      displayStr
                  |L1.228|
                          DCD      _cbDialogload
                  |L1.232|
                          DCD      _aDialogCreateload
                  |L1.236|
                          DCD      load_wind

                          AREA ||i.KEY_DOWN_LOAD||, CODE, READONLY, ALIGN=2

                  KEY_DOWN_LOAD PROC
;;;359    
;;;360    void KEY_DOWN_LOAD( int handle ){
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4606              MOV      r6,r0
;;;361    
;;;362    	int i, dlen = 0, flag = 0;
000006  2700              MOVS     r7,#0
000008  46ba              MOV      r10,r7
;;;363    	
;;;364    	int *key_loc;
;;;365    	
;;;366    	int get_nextid = 0, nowid = 0, nowid_index = 0;
00000a  46b8              MOV      r8,r7
00000c  46b9              MOV      r9,r7
00000e  46bb              MOV      r11,r7
;;;367    	
;;;368    	if( FLAG_INPUTAUTH == 0 )
000010  4829              LDR      r0,|L2.184|
000012  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000014  2800              CMP      r0,#0
000016  d14d              BNE      |L2.180|
;;;369    	{
;;;370    		dlen = sizeof(SGhListL) / sizeof(SGhListL[0]);
000018  270f              MOVS     r7,#0xf
;;;371    		
;;;372    		key_loc = get_id_index( SGhListL, dlen);
00001a  4639              MOV      r1,r7
00001c  4827              LDR      r0,|L2.188|
00001e  f7fffffe          BL       get_id_index
000022  4605              MOV      r5,r0
;;;373    			
;;;374    		nowid = *key_loc;
000024  f8d59000          LDR      r9,[r5,#0]
;;;375    		
;;;376    		nowid_index = *(key_loc + 1);
000028  f8d5b004          LDR      r11,[r5,#4]
;;;377    			
;;;378    		if( nowid == 0x194 ) 
00002c  f5b97fca          CMP      r9,#0x194
000030  d104              BNE      |L2.60|
;;;379    					
;;;380    			SGhListL[10].focusType = 1;			
000032  2101              MOVS     r1,#1
000034  4821              LDR      r0,|L2.188|
000036  f8c012d4          STR      r1,[r0,#0x2d4]
00003a  e001              B        |L2.64|
                  |L2.60|
;;;381    		else
;;;382    				
;;;383    			flag = 1;
00003c  f04f0a01          MOV      r10,#1
                  |L2.64|
;;;384    			
;;;385    		get_nextid = get_nextindex( nowid, WINL_id_DataLists, handle);
000040  4632              MOV      r2,r6
000042  491f              LDR      r1,|L2.192|
000044  4648              MOV      r0,r9
000046  f7fffffe          BL       get_nextindex
00004a  4680              MOV      r8,r0
;;;386    			
;;;387    		if( flag && get_nextid != 0xFF )
00004c  f1ba0f00          CMP      r10,#0
000050  d02c              BEQ      |L2.172|
000052  f1b80fff          CMP      r8,#0xff
000056  d029              BEQ      |L2.172|
;;;388    		{
;;;389    			SGhListL[nowid_index].focusType = 0;	
000058  2000              MOVS     r0,#0
00005a  eb0b01cb          ADD      r1,r11,r11,LSL #3
00005e  4a17              LDR      r2,|L2.188|
000060  eb0201c1          ADD      r1,r2,r1,LSL #3
000064  6048              STR      r0,[r1,#4]
;;;390    			
;;;391    			for	( i = 0; i < dlen; i++)
000066  2400              MOVS     r4,#0
000068  e01d              B        |L2.166|
                  |L2.106|
;;;392    			{
;;;393    				if( SGhListL[i].d_ID == get_nextid && (SGhListL[i].t_Type == T_THref || SGhListL[i].t_Type == T_TLISTBOX) )
00006a  eb0400c4          ADD      r0,r4,r4,LSL #3
00006e  4913              LDR      r1,|L2.188|
000070  f8510030          LDR      r0,[r1,r0,LSL #3]
000074  4540              CMP      r0,r8
000076  d115              BNE      |L2.164|
000078  eb0400c4          ADD      r0,r4,r4,LSL #3
00007c  eb0100c0          ADD      r0,r1,r0,LSL #3
000080  6880              LDR      r0,[r0,#8]
000082  2801              CMP      r0,#1
000084  d006              BEQ      |L2.148|
000086  eb0400c4          ADD      r0,r4,r4,LSL #3
00008a  eb0100c0          ADD      r0,r1,r0,LSL #3
00008e  6880              LDR      r0,[r0,#8]
000090  2803              CMP      r0,#3
000092  d107              BNE      |L2.164|
                  |L2.148|
;;;394    				{				
;;;395    					SGhListL[i].focusType = 1;	
000094  2001              MOVS     r0,#1
000096  eb0401c4          ADD      r1,r4,r4,LSL #3
00009a  4a08              LDR      r2,|L2.188|
00009c  eb0201c1          ADD      r1,r2,r1,LSL #3
0000a0  6048              STR      r0,[r1,#4]
;;;396    					break;
0000a2  e002              B        |L2.170|
                  |L2.164|
0000a4  1c64              ADDS     r4,r4,#1              ;391
                  |L2.166|
0000a6  42bc              CMP      r4,r7                 ;391
0000a8  dbdf              BLT      |L2.106|
                  |L2.170|
0000aa  bf00              NOP      
                  |L2.172|
;;;397    				}
;;;398    			}	
;;;399    		}
;;;400    		WM_InvalidateWindow(load_wind);	
0000ac  4805              LDR      r0,|L2.196|
0000ae  6800              LDR      r0,[r0,#0]  ; load_wind
0000b0  f7fffffe          BL       WM_InvalidateWindow
                  |L2.180|
;;;401    	}
;;;402    	else
;;;403    	{
;;;404    	
;;;405    	}
;;;406    }
0000b4  e8bd9ff0          POP      {r4-r12,pc}
;;;407    
                          ENDP

                  |L2.184|
                          DCD      FLAG_INPUTAUTH
                  |L2.188|
                          DCD      SGhListL
                  |L2.192|
                          DCD      WINL_id_DataLists
                  |L2.196|
                          DCD      load_wind

                          AREA ||i.KEY_LOAD_INPUT||, CODE, READONLY, ALIGN=2

                  KEY_LOAD_INPUT PROC
;;;301    
;;;302    void KEY_LOAD_INPUT(char *strx){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
;;;303    	
;;;304    	int *key_loc;
;;;305    		
;;;306    	int i, dlen, flen;
;;;307    		
;;;308    	int dot_loc = 1024;
000006  f44f6880          MOV      r8,#0x400
;;;309    		
;;;310    	dlen = sizeof(SGhListL) / sizeof(SGhListL[0]);
00000a  270f              MOVS     r7,#0xf
;;;311    		
;;;312    	key_loc = get_id_index( SGhListL, dlen);
00000c  4639              MOV      r1,r7
00000e  483c              LDR      r0,|L3.256|
000010  f7fffffe          BL       get_id_index
000014  4604              MOV      r4,r0
;;;313    		
;;;314    	if( *key_loc == 0x194 )
000016  6820              LDR      r0,[r4,#0]
000018  f5b07fca          CMP      r0,#0x194
00001c  d104              BNE      |L3.40|
;;;315    			
;;;316    		SGhListL[10].focusType = 1;
00001e  2101              MOVS     r1,#1
000020  4837              LDR      r0,|L3.256|
000022  f8c012d4          STR      r1,[r0,#0x2d4]
000026  e064              B        |L3.242|
                  |L3.40|
;;;317    	else
;;;318    	{
;;;319    		if( displayStr[0] == '\0' && *strx == 0x2e ) 
000028  4836              LDR      r0,|L3.260|
00002a  7800              LDRB     r0,[r0,#0]  ; displayStr
00002c  b938              CBNZ     r0,|L3.62|
00002e  7830              LDRB     r0,[r6,#0]
000030  282e              CMP      r0,#0x2e
000032  d104              BNE      |L3.62|
;;;320    					
;;;321    			strcat( displayStr, "0.");		
000034  a134              ADR      r1,|L3.264|
000036  4833              LDR      r0,|L3.260|
000038  f7fffffe          BL       strcat
00003c  e02a              B        |L3.148|
                  |L3.62|
;;;322    		else
;;;323    		{
;;;324    			for ( i = 0; i < strlen(displayStr); i++)
00003e  2500              MOVS     r5,#0
000040  e00d              B        |L3.94|
                  |L3.66|
;;;325    			{
;;;326    				if( displayStr[i] == 0x2e )
000042  4830              LDR      r0,|L3.260|
000044  5d40              LDRB     r0,[r0,r5]
000046  282e              CMP      r0,#0x2e
000048  d100              BNE      |L3.76|
;;;327    									
;;;328    					dot_loc = i;
00004a  46a8              MOV      r8,r5
                  |L3.76|
;;;329    						
;;;330    				if( displayStr[i] == 0x2e && *strx == 0x2e )
00004c  482d              LDR      r0,|L3.260|
00004e  5d40              LDRB     r0,[r0,r5]
000050  282e              CMP      r0,#0x2e
000052  d103              BNE      |L3.92|
000054  7830              LDRB     r0,[r6,#0]
000056  282e              CMP      r0,#0x2e
000058  d100              BNE      |L3.92|
;;;331    									
;;;332    					goto lmore_point;
00005a  e04b              B        |L3.244|
                  |L3.92|
00005c  1c6d              ADDS     r5,r5,#1              ;324
                  |L3.94|
00005e  4829              LDR      r0,|L3.260|
000060  f7fffffe          BL       strlen
000064  42a8              CMP      r0,r5                 ;324
000066  d8ec              BHI      |L3.66|
;;;333    			}
;;;334    			if( dot_loc == 1024 )
000068  f5b86f80          CMP      r8,#0x400
00006c  d109              BNE      |L3.130|
;;;335    			{						
;;;336    				if( strlen(displayStr) < 4 )
00006e  4825              LDR      r0,|L3.260|
000070  f7fffffe          BL       strlen
000074  2804              CMP      r0,#4
000076  d20d              BCS      |L3.148|
;;;337    									
;;;338    					strcat( displayStr, strx);	
000078  4631              MOV      r1,r6
00007a  4822              LDR      r0,|L3.260|
00007c  f7fffffe          BL       strcat
000080  e008              B        |L3.148|
                  |L3.130|
;;;339    			}
;;;340    			else
;;;341    			{
;;;342    				if( strlen(displayStr) < 6 )
000082  4820              LDR      r0,|L3.260|
000084  f7fffffe          BL       strlen
000088  2806              CMP      r0,#6
00008a  d203              BCS      |L3.148|
;;;343    								
;;;344    					strcat( displayStr, strx);
00008c  4631              MOV      r1,r6
00008e  481d              LDR      r0,|L3.260|
000090  f7fffffe          BL       strcat
                  |L3.148|
;;;345    			}		
;;;346    		}
;;;347    		if( SGhListL[*(key_loc+1)].focusType == 1 &&( SGhListL[*(key_loc+1)].t_Type == T_THref || SGhListL[*(key_loc+1)].t_Type == T_TLISTBOX) )
000094  6860              LDR      r0,[r4,#4]
000096  eb0000c0          ADD      r0,r0,r0,LSL #3
00009a  4919              LDR      r1,|L3.256|
00009c  eb0100c0          ADD      r0,r1,r0,LSL #3
0000a0  6840              LDR      r0,[r0,#4]
0000a2  2801              CMP      r0,#1
0000a4  d125              BNE      |L3.242|
0000a6  6860              LDR      r0,[r4,#4]
0000a8  eb0000c0          ADD      r0,r0,r0,LSL #3
0000ac  eb0100c0          ADD      r0,r1,r0,LSL #3
0000b0  6880              LDR      r0,[r0,#8]
0000b2  2801              CMP      r0,#1
0000b4  d007              BEQ      |L3.198|
0000b6  6860              LDR      r0,[r4,#4]
0000b8  eb0000c0          ADD      r0,r0,r0,LSL #3
0000bc  eb0100c0          ADD      r0,r1,r0,LSL #3
0000c0  6880              LDR      r0,[r0,#8]
0000c2  2803              CMP      r0,#3
0000c4  d115              BNE      |L3.242|
                  |L3.198|
;;;348    		{	
;;;349    			strcpy( SGhListL[*(key_loc+1)].f_SName, displayStr );	
0000c6  6861              LDR      r1,[r4,#4]
0000c8  eb0101c1          ADD      r1,r1,r1,LSL #3
0000cc  4a0c              LDR      r2,|L3.256|
0000ce  eb0201c1          ADD      r1,r2,r1,LSL #3
0000d2  f101000c          ADD      r0,r1,#0xc
0000d6  490b              LDR      r1,|L3.260|
0000d8  f7fffffe          BL       strcpy
;;;350    									 
;;;351    			strcpy( SGhListL[*(key_loc+1)].f_EName, displayStr );		 
0000dc  6861              LDR      r1,[r4,#4]
0000de  eb0101c1          ADD      r1,r1,r1,LSL #3
0000e2  4a07              LDR      r2,|L3.256|
0000e4  eb0201c1          ADD      r1,r2,r1,LSL #3
0000e8  f1010020          ADD      r0,r1,#0x20
0000ec  4905              LDR      r1,|L3.260|
0000ee  f7fffffe          BL       strcpy
                  |L3.242|
;;;352    		}
;;;353    	}
;;;354    	lmore_point:	
0000f2  bf00              NOP      
                  |L3.244|
;;;355    		
;;;356    		WM_InvalidateWindow(load_wind);
0000f4  4805              LDR      r0,|L3.268|
0000f6  6800              LDR      r0,[r0,#0]  ; load_wind
0000f8  f7fffffe          BL       WM_InvalidateWindow
;;;357    }
0000fc  e8bd81f0          POP      {r4-r8,pc}
;;;358    
                          ENDP

                  |L3.256|
                          DCD      SGhListL
                  |L3.260|
                          DCD      displayStr
                  |L3.264|
000108  302e00            DCB      "0.",0
00010b  00                DCB      0
                  |L3.268|
                          DCD      load_wind

                          AREA ||i.Load_delete_input||, CODE, READONLY, ALIGN=2

                  Load_delete_input PROC
;;;448    
;;;449    void Load_delete_input(){
000000  b570              PUSH     {r4-r6,lr}
;;;450    	
;;;451    	int dlen = 0, flen = 0;
000002  2500              MOVS     r5,#0
000004  2600              MOVS     r6,#0
;;;452    	
;;;453    	int *key_loc;
;;;454    	
;;;455    	if( FLAG_INPUTAUTH  ){	
000006  4828              LDR      r0,|L4.168|
000008  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
00000a  2800              CMP      r0,#0
00000c  d04a              BEQ      |L4.164|
;;;456    	
;;;457    		dlen = sizeof( SGhListL ) / sizeof(SGhListL[0]);
00000e  250f              MOVS     r5,#0xf
;;;458    		
;;;459    		key_loc = get_id_index( SGhListL, dlen);
000010  4629              MOV      r1,r5
000012  4826              LDR      r0,|L4.172|
000014  f7fffffe          BL       get_id_index
000018  4604              MOV      r4,r0
;;;460    		
;;;461    		if( *key_loc == 0x194 )
00001a  6820              LDR      r0,[r4,#0]
00001c  f5b07fca          CMP      r0,#0x194
000020  d104              BNE      |L4.44|
;;;462    					
;;;463    			SGhListL[10].focusType = 1;
000022  2101              MOVS     r1,#1
000024  4821              LDR      r0,|L4.172|
000026  f8c012d4          STR      r1,[r0,#0x2d4]
00002a  e03b              B        |L4.164|
                  |L4.44|
;;;464    		else
;;;465    		{
;;;466    			strcpy( displayStr , SGhListL[*key_loc].f_EName );
00002c  6820              LDR      r0,[r4,#0]
00002e  eb0000c0          ADD      r0,r0,r0,LSL #3
000032  4a1e              LDR      r2,|L4.172|
000034  eb0200c0          ADD      r0,r2,r0,LSL #3
000038  f1000120          ADD      r1,r0,#0x20
00003c  481c              LDR      r0,|L4.176|
00003e  f7fffffe          BL       strcpy
;;;467    			
;;;468    			if( SGhListL[*key_loc].t_Type == T_THref && ( strlen( displayStr) != 0 || displayStr[0] != '\0' ) )
000042  6820              LDR      r0,[r4,#0]
000044  eb0000c0          ADD      r0,r0,r0,LSL #3
000048  4918              LDR      r1,|L4.172|
00004a  eb0100c0          ADD      r0,r1,r0,LSL #3
00004e  6880              LDR      r0,[r0,#8]
000050  2801              CMP      r0,#1
000052  d127              BNE      |L4.164|
000054  4816              LDR      r0,|L4.176|
000056  f7fffffe          BL       strlen
00005a  b910              CBNZ     r0,|L4.98|
00005c  4814              LDR      r0,|L4.176|
00005e  7800              LDRB     r0,[r0,#0]  ; displayStr
000060  b300              CBZ      r0,|L4.164|
                  |L4.98|
;;;469    			{		
;;;470    				displayStr [ strlen( displayStr) - 1 ] = '\0'; 
000062  4813              LDR      r0,|L4.176|
000064  f7fffffe          BL       strlen
000068  1e40              SUBS     r0,r0,#1
00006a  4911              LDR      r1,|L4.176|
00006c  2200              MOVS     r2,#0
00006e  540a              STRB     r2,[r1,r0]
;;;471    				
;;;472    				strcpy( SGhListL[*key_loc].f_SName, displayStr );	
000070  6821              LDR      r1,[r4,#0]
000072  eb0101c1          ADD      r1,r1,r1,LSL #3
000076  4a0d              LDR      r2,|L4.172|
000078  eb0201c1          ADD      r1,r2,r1,LSL #3
00007c  f101000c          ADD      r0,r1,#0xc
000080  490b              LDR      r1,|L4.176|
000082  f7fffffe          BL       strcpy
;;;473    					
;;;474    				strcpy( SGhListL[*key_loc].f_EName, displayStr );	
000086  6821              LDR      r1,[r4,#0]
000088  eb0101c1          ADD      r1,r1,r1,LSL #3
00008c  4a07              LDR      r2,|L4.172|
00008e  eb0201c1          ADD      r1,r2,r1,LSL #3
000092  f1010020          ADD      r0,r1,#0x20
000096  4906              LDR      r1,|L4.176|
000098  f7fffffe          BL       strcpy
;;;475    					
;;;476    				WM_InvalidateWindow(load_wind);
00009c  4805              LDR      r0,|L4.180|
00009e  6800              LDR      r0,[r0,#0]  ; load_wind
0000a0  f7fffffe          BL       WM_InvalidateWindow
                  |L4.164|
;;;477    			}
;;;478    		
;;;479    		}
;;;480    	}
;;;481    	
;;;482    }
0000a4  bd70              POP      {r4-r6,pc}
;;;483    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L4.168|
                          DCD      FLAG_INPUTAUTH
                  |L4.172|
                          DCD      SGhListL
                  |L4.176|
                          DCD      displayStr
                  |L4.180|
                          DCD      load_wind

                          AREA ||i.Load_ent||, CODE, READONLY, ALIGN=2

                  Load_ent PROC
;;;408    
;;;409    void Load_ent(){
000000  b570              PUSH     {r4-r6,lr}
;;;410    	
;;;411    	int *key_loc;
;;;412    	
;;;413    	int dlen = 0;
000002  2500              MOVS     r5,#0
;;;414    	
;;;415    	if( FLAG_INPUTAUTH ){
000004  481f              LDR      r0,|L5.132|
000006  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000008  b128              CBZ      r0,|L5.22|
;;;416    		
;;;417    		FLAG_INPUTAUTH = 0;
00000a  2000              MOVS     r0,#0
00000c  491d              LDR      r1,|L5.132|
00000e  7008              STRB     r0,[r1,#0]
;;;418    		
;;;419    		Load_value_correct();
000010  f7fffffe          BL       Load_value_correct
000014  e034              B        |L5.128|
                  |L5.22|
;;;420    		
;;;421    	}else{
;;;422    		
;;;423    		FLAG_INPUTAUTH = 1;
000016  2001              MOVS     r0,#1
000018  491a              LDR      r1,|L5.132|
00001a  7008              STRB     r0,[r1,#0]
;;;424    		
;;;425    		dlen = sizeof( SGhListL ) / sizeof( SGhListL[0] );
00001c  250f              MOVS     r5,#0xf
;;;426    		
;;;427    		key_loc = get_id_index( SGhListL, dlen);
00001e  4629              MOV      r1,r5
000020  4819              LDR      r0,|L5.136|
000022  f7fffffe          BL       get_id_index
000026  4604              MOV      r4,r0
;;;428    		
;;;429    		if( *key_loc == 0x194 )
000028  6820              LDR      r0,[r4,#0]
00002a  f5b07fca          CMP      r0,#0x194
00002e  d104              BNE      |L5.58|
;;;430    					
;;;431    			SGhListL[10].focusType = 1;
000030  2101              MOVS     r1,#1
000032  4815              LDR      r0,|L5.136|
000034  f8c012d4          STR      r1,[r0,#0x2d4]
000038  e022              B        |L5.128|
                  |L5.58|
;;;432    		else
;;;433    		{
;;;434    			memset( displayStr, '\0', sizeof( displayStr));
00003a  2114              MOVS     r1,#0x14
00003c  4813              LDR      r0,|L5.140|
00003e  f7fffffe          BL       __aeabi_memclr
;;;435    			
;;;436    			SGhListL[*(key_loc+1)].d_BKColor = 0x00F0FFFF;
000042  4813              LDR      r0,|L5.144|
000044  6861              LDR      r1,[r4,#4]
000046  eb0101c1          ADD      r1,r1,r1,LSL #3
00004a  4a0f              LDR      r2,|L5.136|
00004c  eb0201c1          ADD      r1,r2,r1,LSL #3
000050  6388              STR      r0,[r1,#0x38]
;;;437    			
;;;438    			strcpy( SGhListL[*(key_loc+1)].f_SName, "");
000052  6860              LDR      r0,[r4,#4]
000054  eb0000c0          ADD      r0,r0,r0,LSL #3
000058  4611              MOV      r1,r2
00005a  eb0100c0          ADD      r0,r1,r0,LSL #3
00005e  a10d              ADR      r1,|L5.148|
000060  7809              LDRB     r1,[r1,#0]
000062  7301              STRB     r1,[r0,#0xc]
;;;439    			
;;;440    			strcpy( SGhListL[*(key_loc+1)].f_EName, "");
000064  6860              LDR      r0,[r4,#4]
000066  eb0000c0          ADD      r0,r0,r0,LSL #3
00006a  4611              MOV      r1,r2
00006c  eb0100c0          ADD      r0,r1,r0,LSL #3
000070  a108              ADR      r1,|L5.148|
000072  7809              LDRB     r1,[r1,#0]
000074  f8801020          STRB     r1,[r0,#0x20]
;;;441    			
;;;442    			WM_InvalidateWindow(load_wind);
000078  4807              LDR      r0,|L5.152|
00007a  6800              LDR      r0,[r0,#0]  ; load_wind
00007c  f7fffffe          BL       WM_InvalidateWindow
                  |L5.128|
;;;443    		}
;;;444    			
;;;445    	}
;;;446    	
;;;447    }
000080  bd70              POP      {r4-r6,pc}
;;;448    
                          ENDP

000082  0000              DCW      0x0000
                  |L5.132|
                          DCD      FLAG_INPUTAUTH
                  |L5.136|
                          DCD      SGhListL
                  |L5.140|
                          DCD      displayStr
                  |L5.144|
                          DCD      0x00f0ffff
                  |L5.148|
000094  00                DCB      0
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L5.152|
                          DCD      load_wind

                          AREA ||i.Load_value_correct||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  Load_value_correct PROC
;;;483    
;;;484    void Load_value_correct(){
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  ed2d8b04          VPUSH    {d8-d9}
000008  b08b              SUB      sp,sp,#0x2c
;;;485    	
;;;486    	int dlen = 0, i = 0, NUM = 0, flag_null = 0; 
00000a  f04f0b00          MOV      r11,#0
00000e  2400              MOVS     r4,#0
000010  46a1              MOV      r9,r4
000012  46a2              MOV      r10,r4
;;;487    	
;;;488    	int *key_loc;
;;;489    	
;;;490    	int temp, temp_int;
;;;491    	
;;;492    	int dot_loc = 1024;   //是否具有小数点  1024---无   其余---小数点位置
000014  f44f6880          MOV      r8,#0x400
;;;493    	
;;;494    	char temp_char[10];
;;;495    	
;;;496    	float temp_float;
;;;497    	
;;;498    	char int_char[10], float_char[10];
;;;499    	
;;;500    	vu8 flag_dot = 0;
000018  2000              MOVS     r0,#0
00001a  9001              STR      r0,[sp,#4]
;;;501    	
;;;502    	if( !FLAG_INPUTAUTH ){
00001c  48fe              LDR      r0,|L6.1048|
00001e  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000020  2800              CMP      r0,#0
000022  d10e              BNE      |L6.66|
;;;503    		
;;;504    		dlen = sizeof( SGhListL ) / sizeof( SGhListL[0] );
000024  f04f0b0f          MOV      r11,#0xf
;;;505    		
;;;506    		key_loc = get_id_index( SGhListL, dlen);
000028  4659              MOV      r1,r11
00002a  48fc              LDR      r0,|L6.1052|
00002c  f7fffffe          BL       get_id_index
000030  4607              MOV      r7,r0
;;;507    		
;;;508    		if( *key_loc == 0x194 )
000032  6838              LDR      r0,[r7,#0]
000034  f5b07fca          CMP      r0,#0x194
000038  d104              BNE      |L6.68|
;;;509    		
;;;510    			SGhListL[10].focusType = 1;
00003a  2101              MOVS     r1,#1
00003c  48f7              LDR      r0,|L6.1052|
00003e  f8c012d4          STR      r1,[r0,#0x2d4]
                  |L6.66|
000042  e1de              B        |L6.1026|
                  |L6.68|
;;;511    		else
;;;512    		{
;;;513    			temp = *(key_loc+1);
000044  687e              LDR      r6,[r7,#4]
;;;514    			
;;;515    			strcpy( displayStr , SGhListL[temp].f_EName );
000046  eb0600c6          ADD      r0,r6,r6,LSL #3
00004a  4af4              LDR      r2,|L6.1052|
00004c  eb0200c0          ADD      r0,r2,r0,LSL #3
000050  f1000120          ADD      r1,r0,#0x20
000054  48f2              LDR      r0,|L6.1056|
000056  f7fffffe          BL       strcpy
;;;516    			
;;;517    			if( (displayStr[0] == '\0' || strlen(displayStr) == 0) && SGhListL[temp].t_Type == T_THref ){
00005a  48f1              LDR      r0,|L6.1056|
00005c  7800              LDRB     r0,[r0,#0]  ; displayStr
00005e  b118              CBZ      r0,|L6.104|
000060  48ef              LDR      r0,|L6.1056|
000062  f7fffffe          BL       strlen
000066  b940              CBNZ     r0,|L6.122|
                  |L6.104|
000068  eb0600c6          ADD      r0,r6,r6,LSL #3
00006c  49eb              LDR      r1,|L6.1052|
00006e  eb0100c0          ADD      r0,r1,r0,LSL #3
000072  6880              LDR      r0,[r0,#8]
000074  2801              CMP      r0,#1
000076  d100              BNE      |L6.122|
;;;518    				
;;;519    				flag_null = 1;	
000078  4682              MOV      r10,r0
                  |L6.122|
;;;520    			}
;;;521    			for( i = 0; i < strlen(displayStr); i++  ){  
00007a  2400              MOVS     r4,#0
00007c  e005              B        |L6.138|
                  |L6.126|
;;;522    			
;;;523    				if( displayStr[i] == 0x2e ){		
00007e  48e8              LDR      r0,|L6.1056|
000080  5d00              LDRB     r0,[r0,r4]
000082  282e              CMP      r0,#0x2e
000084  d100              BNE      |L6.136|
;;;524    				
;;;525    					dot_loc = i;			//记录小数点位置	
000086  46a0              MOV      r8,r4
                  |L6.136|
000088  1c64              ADDS     r4,r4,#1              ;521
                  |L6.138|
00008a  48e5              LDR      r0,|L6.1056|
00008c  f7fffffe          BL       strlen
000090  42a0              CMP      r0,r4                 ;521
000092  d8f4              BHI      |L6.126|
;;;526    				}			
;;;527    			}
;;;528    			
;;;529    			temp_int = atoi(displayStr);   //转为整数
000094  48e2              LDR      r0,|L6.1056|
000096  f7fffffe          BL       atoi
00009a  4605              MOV      r5,r0
;;;530    			
;;;531    			temp_float = atof(displayStr);  //转为浮点数
00009c  48e0              LDR      r0,|L6.1056|
00009e  f7fffffe          BL       __hardfp_atof
0000a2  eeb09a40          VMOV.F32 s18,s0
0000a6  eef09a60          VMOV.F32 s19,s1
0000aa  ec510b19          VMOV     r0,r1,d9
0000ae  f7fffffe          BL       __aeabi_d2f
0000b2  ee080a10          VMOV     s16,r0
;;;532    			
;;;533    			memset( temp_char, '\0', sizeof(temp_char));
0000b6  2000              MOVS     r0,#0
0000b8  9008              STR      r0,[sp,#0x20]
0000ba  9009              STR      r0,[sp,#0x24]
0000bc  900a              STR      r0,[sp,#0x28]
;;;534    			
;;;535    			memset( int_char, '\0', sizeof(int_char));
0000be  9005              STR      r0,[sp,#0x14]
0000c0  9006              STR      r0,[sp,#0x18]
0000c2  9007              STR      r0,[sp,#0x1c]
;;;536    			
;;;537    			memset( float_char, '\0', sizeof(float_char));
0000c4  9002              STR      r0,[sp,#8]
0000c6  9003              STR      r0,[sp,#0xc]
0000c8  9004              STR      r0,[sp,#0x10]
;;;538    			
;;;539    			sprintf(int_char, "%d", temp_int);
0000ca  462a              MOV      r2,r5
0000cc  a1d5              ADR      r1,|L6.1060|
0000ce  a805              ADD      r0,sp,#0x14
0000d0  f7fffffe          BL       __2sprintf
;;;540    			
;;;541    			sprintf(float_char, "%f", temp_float);
0000d4  ee180a10          VMOV     r0,s16
0000d8  f7fffffe          BL       __aeabi_f2d
0000dc  ec410b19          VMOV     d9,r0,r1
0000e0  ec532b19          VMOV     r2,r3,d9
0000e4  a1d0              ADR      r1,|L6.1064|
0000e6  a802              ADD      r0,sp,#8
0000e8  f7fffffe          BL       __2sprintf
;;;542    			
;;;543    			for( i = 0; i < strlen(displayStr); i++  ){  
0000ec  2400              MOVS     r4,#0
0000ee  e007              B        |L6.256|
                  |L6.240|
;;;544    			
;;;545    				if( displayStr[i] == 0x2e ){	
0000f0  48cb              LDR      r0,|L6.1056|
0000f2  5d00              LDRB     r0,[r0,r4]
0000f4  282e              CMP      r0,#0x2e
0000f6  d102              BNE      |L6.254|
;;;546    				
;;;547    					flag_dot = 1;	
0000f8  2001              MOVS     r0,#1
0000fa  9001              STR      r0,[sp,#4]
;;;548    					
;;;549    					break;
0000fc  e005              B        |L6.266|
                  |L6.254|
0000fe  1c64              ADDS     r4,r4,#1              ;543
                  |L6.256|
000100  48c7              LDR      r0,|L6.1056|
000102  f7fffffe          BL       strlen
000106  42a0              CMP      r0,r4                 ;543
000108  d8f2              BHI      |L6.240|
                  |L6.266|
00010a  bf00              NOP      
;;;550    				}			
;;;551    			}
;;;552    			
;;;553    			for( i = 0; i < strlen(float_char); i++  ){  
00010c  2400              MOVS     r4,#0
00010e  e006              B        |L6.286|
                  |L6.272|
;;;554    			
;;;555    				if( float_char[i] == 0x2e ){	
000110  a802              ADD      r0,sp,#8
000112  5d00              LDRB     r0,[r0,r4]
000114  282e              CMP      r0,#0x2e
000116  d101              BNE      |L6.284|
;;;556    				
;;;557    					dot_loc = i;	
000118  46a0              MOV      r8,r4
;;;558    					
;;;559    					break;
00011a  e005              B        |L6.296|
                  |L6.284|
00011c  1c64              ADDS     r4,r4,#1              ;553
                  |L6.286|
00011e  a802              ADD      r0,sp,#8              ;553
000120  f7fffffe          BL       strlen
000124  42a0              CMP      r0,r4                 ;553
000126  d8f3              BHI      |L6.272|
                  |L6.296|
000128  bf00              NOP      
;;;560    				}			
;;;561    			}
;;;562    			
;;;563    			switch( SGhListL[temp].d_ID ){
00012a  eb0600c6          ADD      r0,r6,r6,LSL #3
00012e  49bb              LDR      r1,|L6.1052|
000130  f8510030          LDR      r0,[r1,r0,LSL #3]
000134  2806              CMP      r0,#6
000136  d002              BEQ      |L6.318|
000138  280d              CMP      r0,#0xd
00013a  d122              BNE      |L6.386|
00013c  e0b0              B        |L6.672|
                  |L6.318|
;;;564    				
;;;565    				case 6:   
;;;566    				//====================================负载电流======================================
;;;567    					if( flag_null ){ 
00013e  f1ba0f00          CMP      r10,#0
000142  d00c              BEQ      |L6.350|
;;;568    					
;;;569    						strcpy( displayStr, "0.000"  );
000144  a1b9              ADR      r1,|L6.1068|
000146  48b6              LDR      r0,|L6.1056|
000148  f7fffffe          BL       strcpy
;;;570    						
;;;571    						CLists.LOAD_C  = 0 * 1000;
00014c  2000              MOVS     r0,#0
00014e  49b9              LDR      r1,|L6.1076|
000150  f8a100e2          STRH     r0,[r1,#0xe2]
;;;572    						
;;;573    						CLists.CSET_Current_Laod =  CLists.LOAD_C;
000154  4608              MOV      r0,r1
000156  f8b000e2          LDRH     r0,[r0,#0xe2]  ; CLists
00015a  6148              STR      r0,[r1,#0x14]  ; CLists
00015c  e09f              B        |L6.670|
                  |L6.350|
;;;574    						
;;;575    					}else{	
;;;576    						
;;;577    						if( !flag_dot ){      	
00015e  f89d0004          LDRB     r0,[sp,#4]
000162  bbe8              CBNZ     r0,|L6.480|
;;;578    							
;;;579    							if( temp_int > 30  ){   //最大值
000164  2d1e              CMP      r5,#0x1e
000166  dd0d              BLE      |L6.388|
;;;580    							
;;;581    								strcpy( displayStr, "30.000"  );
000168  a1b3              ADR      r1,|L6.1080|
00016a  48ad              LDR      r0,|L6.1056|
00016c  f7fffffe          BL       strcpy
;;;582    								
;;;583    								CLists.LOAD_C  = 30 * 1000;
000170  f2475030          MOV      r0,#0x7530
000174  49af              LDR      r1,|L6.1076|
000176  f8a100e2          STRH     r0,[r1,#0xe2]
;;;584    								
;;;585    								CLists.CSET_Current_Laod =  CLists.LOAD_C;
00017a  4608              MOV      r0,r1
00017c  f8b000e2          LDRH     r0,[r0,#0xe2]  ; CLists
000180  6148              STR      r0,[r1,#0x14]  ; CLists
                  |L6.386|
;;;586    								
;;;587    								break;
000182  e121              B        |L6.968|
                  |L6.388|
;;;588    							}
;;;589    							if( temp_int <= 0 ){    //最小值
000184  2d00              CMP      r5,#0
000186  dc0c              BGT      |L6.418|
;;;590    							
;;;591    								strcpy( displayStr, "0.000"  );
000188  a1a8              ADR      r1,|L6.1068|
00018a  48a5              LDR      r0,|L6.1056|
00018c  f7fffffe          BL       strcpy
;;;592    								
;;;593    								CLists.LOAD_C  = 0 * 1000;
000190  2000              MOVS     r0,#0
000192  49a8              LDR      r1,|L6.1076|
000194  f8a100e2          STRH     r0,[r1,#0xe2]
;;;594    								
;;;595    								CLists.CSET_Current_Laod =  CLists.LOAD_C;
000198  4608              MOV      r0,r1
00019a  f8b000e2          LDRH     r0,[r0,#0xe2]  ; CLists
00019e  6148              STR      r0,[r1,#0x14]  ; CLists
;;;596    								
;;;597    								break;		
0001a0  e112              B        |L6.968|
                  |L6.418|
;;;598    							}						
;;;599    							if( strlen(int_char) > 2){
0001a2  a805              ADD      r0,sp,#0x14
0001a4  f7fffffe          BL       strlen
0001a8  2802              CMP      r0,#2
0001aa  d904              BLS      |L6.438|
;;;600    								
;;;601    								strcat( int_char, ".0");
0001ac  a1a4              ADR      r1,|L6.1088|
0001ae  a805              ADD      r0,sp,#0x14
0001b0  f7fffffe          BL       strcat
0001b4  e003              B        |L6.446|
                  |L6.438|
;;;602    								
;;;603    							}else{
;;;604    								
;;;605    								strcat( int_char, ".000");
0001b6  a1a3              ADR      r1,|L6.1092|
0001b8  a805              ADD      r0,sp,#0x14
0001ba  f7fffffe          BL       strcat
                  |L6.446|
;;;606    								
;;;607    							}
;;;608    							
;;;609    							strcpy( displayStr, int_char );
0001be  a905              ADD      r1,sp,#0x14
0001c0  4897              LDR      r0,|L6.1056|
0001c2  f7fffffe          BL       strcpy
;;;610    							
;;;611    							CLists.LOAD_C  = temp_int * 1000;
0001c6  eb050045          ADD      r0,r5,r5,LSL #1
0001ca  ebc010c5          RSB      r0,r0,r5,LSL #7
0001ce  f64f71ff          MOV      r1,#0xffff
0001d2  ea0100c0          AND      r0,r1,r0,LSL #3
0001d6  4997              LDR      r1,|L6.1076|
0001d8  f8a100e2          STRH     r0,[r1,#0xe2]
;;;612    							
;;;613    							CLists.CSET_Current_Laod =  CLists.LOAD_C;
0001dc  4608              MOV      r0,r1
0001de  e000              B        |L6.482|
                  |L6.480|
0001e0  e003              B        |L6.490|
                  |L6.482|
0001e2  f8b000e2          LDRH     r0,[r0,#0xe2]  ; CLists
0001e6  6148              STR      r0,[r1,#0x14]  ; CLists
0001e8  e059              B        |L6.670|
                  |L6.490|
;;;614    							
;;;615    						}else{
;;;616    
;;;617    							if( temp_float - 30 > 0 ){   //最大值
0001ea  eeb30a0e          VMOV.F32 s0,#30.00000000
0001ee  ee380a40          VSUB.F32 s0,s16,s0
0001f2  eeb50ac0          VCMPE.F32 s0,#0.0
0001f6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001fa  dd0d              BLE      |L6.536|
;;;618    							
;;;619    								strcpy( displayStr, "30.000"  );
0001fc  a18e              ADR      r1,|L6.1080|
0001fe  4888              LDR      r0,|L6.1056|
000200  f7fffffe          BL       strcpy
;;;620    								
;;;621    								CLists.LOAD_C  = 30 * 1000;
000204  f2475030          MOV      r0,#0x7530
000208  498a              LDR      r1,|L6.1076|
00020a  f8a100e2          STRH     r0,[r1,#0xe2]
;;;622    								
;;;623    								CLists.CSET_Current_Laod =  CLists.LOAD_C;
00020e  4608              MOV      r0,r1
000210  f8b000e2          LDRH     r0,[r0,#0xe2]  ; CLists
000214  6148              STR      r0,[r1,#0x14]  ; CLists
;;;624    								
;;;625    								break;
000216  e0d7              B        |L6.968|
                  |L6.536|
;;;626    							}
;;;627    							
;;;628    							if( temp_float <= 0 ){    //最小值
000218  eeb58ac0          VCMPE.F32 s16,#0.0
00021c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000220  d80c              BHI      |L6.572|
;;;629    							
;;;630    								strcpy( displayStr, "0.000"  );
000222  a182              ADR      r1,|L6.1068|
000224  487e              LDR      r0,|L6.1056|
000226  f7fffffe          BL       strcpy
;;;631    								
;;;632    								CLists.LOAD_C  = 0 * 1000;
00022a  2000              MOVS     r0,#0
00022c  4981              LDR      r1,|L6.1076|
00022e  f8a100e2          STRH     r0,[r1,#0xe2]
;;;633    								
;;;634    								CLists.CSET_Current_Laod =  CLists.LOAD_C;
000232  4608              MOV      r0,r1
000234  f8b000e2          LDRH     r0,[r0,#0xe2]  ; CLists
000238  6148              STR      r0,[r1,#0x14]  ; CLists
;;;635    								
;;;636    								break;
00023a  e0c5              B        |L6.968|
                  |L6.572|
;;;637    							}
;;;638    							
;;;639    							NUM = strlen(float_char) - dot_loc - 1;
00023c  a802              ADD      r0,sp,#8
00023e  f7fffffe          BL       strlen
000242  eba00008          SUB      r0,r0,r8
000246  f1a00901          SUB      r9,r0,#1
;;;640    							
;;;641    							for( i = 0; i < 3 - NUM; i++ ){		strcat( float_char, "0");		}	
00024a  2400              MOVS     r4,#0
00024c  e004              B        |L6.600|
                  |L6.590|
00024e  a178              ADR      r1,|L6.1072|
000250  a802              ADD      r0,sp,#8
000252  f7fffffe          BL       strcat
000256  1c64              ADDS     r4,r4,#1
                  |L6.600|
000258  f1c90003          RSB      r0,r9,#3
00025c  42a0              CMP      r0,r4
00025e  dcf6              BGT      |L6.590|
;;;642    							
;;;643    							NUM = ( dot_loc > 1 ) ? 6 : 5;
000260  f1b80f01          CMP      r8,#1
000264  dd01              BLE      |L6.618|
000266  2006              MOVS     r0,#6
000268  e000              B        |L6.620|
                  |L6.618|
00026a  2005              MOVS     r0,#5
                  |L6.620|
00026c  4681              MOV      r9,r0
;;;644    							
;;;645    							strncpy( int_char, float_char, NUM );
00026e  464a              MOV      r2,r9
000270  a902              ADD      r1,sp,#8
000272  a805              ADD      r0,sp,#0x14
000274  f7fffffe          BL       strncpy
;;;646    							
;;;647    							strcpy( displayStr, int_char );	
000278  a905              ADD      r1,sp,#0x14
00027a  4869              LDR      r0,|L6.1056|
00027c  f7fffffe          BL       strcpy
;;;648    							
;;;649    							CLists.LOAD_C  = temp_float * 1000;
000280  ed9f0a72          VLDR     s0,|L6.1100|
000284  ee280a00          VMUL.F32 s0,s16,s0
000288  eebc0ac0          VCVT.U32.F32 s0,s0
00028c  ee100a10          VMOV     r0,s0
000290  4968              LDR      r1,|L6.1076|
000292  f8a100e2          STRH     r0,[r1,#0xe2]
;;;650    							
;;;651    							CLists.CSET_Current_Laod =  CLists.LOAD_C;
000296  4608              MOV      r0,r1
000298  f8b000e2          LDRH     r0,[r0,#0xe2]  ; CLists
00029c  6148              STR      r0,[r1,#0x14]  ; CLists
                  |L6.670|
;;;652    						}
;;;653    					}
;;;654    				
;;;655    				break;
00029e  e093              B        |L6.968|
                  |L6.672|
;;;656    				
;;;657    				case 13:   
;;;658    				//====================================负载电压======================================
;;;659    					if( flag_null ){ 
0002a0  f1ba0f00          CMP      r10,#0
0002a4  d008              BEQ      |L6.696|
;;;660    					
;;;661    						strcpy( displayStr, "0.000"  );
0002a6  a161              ADR      r1,|L6.1068|
0002a8  485d              LDR      r0,|L6.1056|
0002aa  f7fffffe          BL       strcpy
;;;662    						
;;;663    						CLists.LOAD_V  = 0 * 1000;
0002ae  2000              MOVS     r0,#0
0002b0  4960              LDR      r1,|L6.1076|
0002b2  f8a100e4          STRH     r0,[r1,#0xe4]
0002b6  e086              B        |L6.966|
                  |L6.696|
;;;664    						
;;;665    					}else{	
;;;666    						
;;;667    						if( !flag_dot ){      	
0002b8  f89d0004          LDRB     r0,[sp,#4]
0002bc  bba0              CBNZ     r0,|L6.808|
;;;668    							
;;;669    							if( temp_int > 60  ){   //最大值
0002be  2d3c              CMP      r5,#0x3c
0002c0  dd09              BLE      |L6.726|
;;;670    							
;;;671    								strcpy( displayStr, "60.000"  );
0002c2  a163              ADR      r1,|L6.1104|
0002c4  4856              LDR      r0,|L6.1056|
0002c6  f7fffffe          BL       strcpy
;;;672    								
;;;673    								CLists.LOAD_V  = 60 * 1000;
0002ca  f64e2060          MOV      r0,#0xea60
0002ce  4959              LDR      r1,|L6.1076|
0002d0  f8a100e4          STRH     r0,[r1,#0xe4]
;;;674    								
;;;675    								break;
0002d4  e078              B        |L6.968|
                  |L6.726|
;;;676    							}
;;;677    							if( temp_int <= 0 ){    //最小值
0002d6  2d00              CMP      r5,#0
0002d8  dc08              BGT      |L6.748|
;;;678    							
;;;679    								strcpy( displayStr, "0.000"  );
0002da  a154              ADR      r1,|L6.1068|
0002dc  4850              LDR      r0,|L6.1056|
0002de  f7fffffe          BL       strcpy
;;;680    								
;;;681    								CLists.LOAD_V  = 0 * 1000;
0002e2  2000              MOVS     r0,#0
0002e4  4953              LDR      r1,|L6.1076|
0002e6  f8a100e4          STRH     r0,[r1,#0xe4]
;;;682    								
;;;683    								break;		
0002ea  e06d              B        |L6.968|
                  |L6.748|
;;;684    							}						
;;;685    							if( strlen(int_char) > 2){
0002ec  a805              ADD      r0,sp,#0x14
0002ee  f7fffffe          BL       strlen
0002f2  2802              CMP      r0,#2
0002f4  d904              BLS      |L6.768|
;;;686    								
;;;687    								strcat( int_char, ".0");
0002f6  a152              ADR      r1,|L6.1088|
0002f8  a805              ADD      r0,sp,#0x14
0002fa  f7fffffe          BL       strcat
0002fe  e003              B        |L6.776|
                  |L6.768|
;;;688    								
;;;689    							}else{
;;;690    								
;;;691    								strcat( int_char, ".000");
000300  a150              ADR      r1,|L6.1092|
000302  a805              ADD      r0,sp,#0x14
000304  f7fffffe          BL       strcat
                  |L6.776|
;;;692    								
;;;693    							}
;;;694    							
;;;695    							strcpy( displayStr, int_char );
000308  a905              ADD      r1,sp,#0x14
00030a  4845              LDR      r0,|L6.1056|
00030c  f7fffffe          BL       strcpy
;;;696    							
;;;697    							CLists.LOAD_V  = temp_int * 1000;
000310  eb050045          ADD      r0,r5,r5,LSL #1
000314  ebc010c5          RSB      r0,r0,r5,LSL #7
000318  f64f71ff          MOV      r1,#0xffff
00031c  ea0100c0          AND      r0,r1,r0,LSL #3
000320  4944              LDR      r1,|L6.1076|
000322  f8a100e4          STRH     r0,[r1,#0xe4]
000326  e04e              B        |L6.966|
                  |L6.808|
000328  e7ff              B        |L6.810|
                  |L6.810|
;;;698    							
;;;699    						}else{
;;;700    
;;;701    							if( temp_float - 60 > 0 ){   //最大值
00032a  ed9f0a4b          VLDR     s0,|L6.1112|
00032e  ee380a40          VSUB.F32 s0,s16,s0
000332  eeb50ac0          VCMPE.F32 s0,#0.0
000336  eef1fa10          VMRS     APSR_nzcv,FPSCR
00033a  dd09              BLE      |L6.848|
;;;702    							
;;;703    								strcpy( displayStr, "60.000"  );
00033c  a144              ADR      r1,|L6.1104|
00033e  4838              LDR      r0,|L6.1056|
000340  f7fffffe          BL       strcpy
;;;704    								
;;;705    								CLists.LOAD_V  = 60 * 1000;
000344  f64e2060          MOV      r0,#0xea60
000348  493a              LDR      r1,|L6.1076|
00034a  f8a100e4          STRH     r0,[r1,#0xe4]
;;;706    								
;;;707    								break;
00034e  e03b              B        |L6.968|
                  |L6.848|
;;;708    							}
;;;709    							
;;;710    							if( temp_float <= 0 ){    //最小值
000350  eeb58ac0          VCMPE.F32 s16,#0.0
000354  eef1fa10          VMRS     APSR_nzcv,FPSCR
000358  d808              BHI      |L6.876|
;;;711    							
;;;712    								strcpy( displayStr, "0.000"  );
00035a  a134              ADR      r1,|L6.1068|
00035c  4830              LDR      r0,|L6.1056|
00035e  f7fffffe          BL       strcpy
;;;713    								
;;;714    								CLists.LOAD_V  = 0 * 1000;
000362  2000              MOVS     r0,#0
000364  4933              LDR      r1,|L6.1076|
000366  f8a100e4          STRH     r0,[r1,#0xe4]
;;;715    								
;;;716    								break;
00036a  e02d              B        |L6.968|
                  |L6.876|
;;;717    							}
;;;718    							
;;;719    							NUM = strlen(float_char) - dot_loc - 1;
00036c  a802              ADD      r0,sp,#8
00036e  f7fffffe          BL       strlen
000372  eba00008          SUB      r0,r0,r8
000376  f1a00901          SUB      r9,r0,#1
;;;720    							
;;;721    							for( i = 0; i < 3 - NUM; i++ ){		strcat( float_char, "0");		}	
00037a  2400              MOVS     r4,#0
00037c  e004              B        |L6.904|
                  |L6.894|
00037e  a12c              ADR      r1,|L6.1072|
000380  a802              ADD      r0,sp,#8
000382  f7fffffe          BL       strcat
000386  1c64              ADDS     r4,r4,#1
                  |L6.904|
000388  f1c90003          RSB      r0,r9,#3
00038c  42a0              CMP      r0,r4
00038e  dcf6              BGT      |L6.894|
;;;722    							
;;;723    							NUM = ( dot_loc > 1 ) ? 6 : 5;
000390  f1b80f01          CMP      r8,#1
000394  dd01              BLE      |L6.922|
000396  2006              MOVS     r0,#6
000398  e000              B        |L6.924|
                  |L6.922|
00039a  2005              MOVS     r0,#5
                  |L6.924|
00039c  4681              MOV      r9,r0
;;;724    							
;;;725    							strncpy( int_char, float_char, NUM );
00039e  464a              MOV      r2,r9
0003a0  a902              ADD      r1,sp,#8
0003a2  a805              ADD      r0,sp,#0x14
0003a4  f7fffffe          BL       strncpy
;;;726    							
;;;727    							strcpy( displayStr, int_char );	
0003a8  a905              ADD      r1,sp,#0x14
0003aa  481d              LDR      r0,|L6.1056|
0003ac  f7fffffe          BL       strcpy
;;;728    							
;;;729    							CLists.LOAD_V  = temp_float * 1000;
0003b0  ed9f0a26          VLDR     s0,|L6.1100|
0003b4  ee280a00          VMUL.F32 s0,s16,s0
0003b8  eebc0ac0          VCVT.U32.F32 s0,s0
0003bc  ee100a10          VMOV     r0,s0
0003c0  491c              LDR      r1,|L6.1076|
0003c2  f8a100e4          STRH     r0,[r1,#0xe4]
                  |L6.966|
;;;730    						}
;;;731    					}
;;;732    				
;;;733    				break;
0003c6  bf00              NOP      
                  |L6.968|
0003c8  bf00              NOP                            ;587
;;;734    			}
;;;735    			
;;;736    			Write_Flash_Bytes();
0003ca  f7fffffe          BL       Write_Flash_Bytes
;;;737    			
;;;738    			SGhListL[temp].d_BKColor = 0;
0003ce  2000              MOVS     r0,#0
0003d0  eb0601c6          ADD      r1,r6,r6,LSL #3
0003d4  4a11              LDR      r2,|L6.1052|
0003d6  eb0201c1          ADD      r1,r2,r1,LSL #3
0003da  6388              STR      r0,[r1,#0x38]
;;;739    			
;;;740    			strcpy( SGhListL[temp].f_SName, displayStr );
0003dc  eb0601c6          ADD      r1,r6,r6,LSL #3
0003e0  eb0201c1          ADD      r1,r2,r1,LSL #3
0003e4  f101000c          ADD      r0,r1,#0xc
0003e8  490d              LDR      r1,|L6.1056|
0003ea  f7fffffe          BL       strcpy
;;;741    			
;;;742    			strcpy( SGhListL[temp].f_EName, displayStr );
0003ee  eb0601c6          ADD      r1,r6,r6,LSL #3
0003f2  4a0a              LDR      r2,|L6.1052|
0003f4  eb0201c1          ADD      r1,r2,r1,LSL #3
0003f8  f1010020          ADD      r0,r1,#0x20
0003fc  4908              LDR      r1,|L6.1056|
0003fe  f7fffffe          BL       strcpy
                  |L6.1026|
;;;743    		}
;;;744    	}
;;;745    	memset( displayStr, '\0', sizeof(displayStr));
000402  2114              MOVS     r1,#0x14
000404  4806              LDR      r0,|L6.1056|
000406  f7fffffe          BL       __aeabi_memclr
;;;746    	
;;;747    	WM_InvalidateWindow(load_wind);
00040a  4814              LDR      r0,|L6.1116|
00040c  6800              LDR      r0,[r0,#0]  ; load_wind
00040e  f7fffffe          BL       WM_InvalidateWindow
;;;748    	
;;;749    }
000412  b00b              ADD      sp,sp,#0x2c
000414  e024              B        |L6.1120|
000416  0000              DCW      0x0000
                  |L6.1048|
                          DCD      FLAG_INPUTAUTH
                  |L6.1052|
                          DCD      SGhListL
                  |L6.1056|
                          DCD      displayStr
                  |L6.1060|
000424  256400            DCB      "%d",0
000427  00                DCB      0
                  |L6.1064|
000428  256600            DCB      "%f",0
00042b  00                DCB      0
                  |L6.1068|
00042c  302e3030          DCB      "0.00"
                  |L6.1072|
000430  3000              DCB      "0",0
000432  00                DCB      0
000433  00                DCB      0
                  |L6.1076|
                          DCD      CLists
                  |L6.1080|
000438  33302e30          DCB      "30.000",0
00043c  303000  
00043f  00                DCB      0
                  |L6.1088|
000440  2e3000            DCB      ".0",0
000443  00                DCB      0
                  |L6.1092|
000444  2e303030          DCB      ".000",0
000448  00      
000449  00                DCB      0
00044a  00                DCB      0
00044b  00                DCB      0
                  |L6.1100|
00044c  447a0000          DCFS     0x447a0000 ; 1000
                  |L6.1104|
000450  36302e30          DCB      "60.000",0
000454  303000  
000457  00                DCB      0
                  |L6.1112|
000458  42700000          DCFS     0x42700000 ; 60
                  |L6.1116|
                          DCD      load_wind
                  |L6.1120|
000460  ecbd8b04          VPOP     {d8-d9}
000464  e8bd8ff0          POP      {r4-r11,pc}
;;;750    
                          ENDP


                          AREA ||i._cbDialogload||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  _cbDialogload PROC
;;;79     
;;;80     static void _cbDialogload(WM_MESSAGE * pMsg) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  ed2d8b02          VPUSH    {d8}
000008  b0a3              SUB      sp,sp,#0x8c
00000a  4604              MOV      r4,r0
;;;81     	
;;;82     	WM_HWIN hItem;
;;;83     	
;;;84     	int NCode, Id, MAX_LEN = 0;
00000c  2700              MOVS     r7,#0
;;;85     	
;;;86      	vu8 i;
;;;87     	
;;;88     	char* winName, *chargeName;
;;;89     	
;;;90     	static struct SListData slistL[] = {	
;;;91     	
;;;92     		{T_Button ,"内阻测试", 	"I.R. TEST",  0x00B22222 , 0,	    ID_BUTTON_7 },
;;;93     		
;;;94     		{T_Button ,"程控电源", 	"POWER",  0x00B22222 , 0, 	ID_BUTTON_8 },
;;;95     		
;;;96     		{T_Button ,"程控负载", 	"LOAD",  0x00B22222, 0, 	ID_BUTTON_9 },
;;;97     		
;;;98     		{T_Button , "充放电", "C&DC",  0x00B22222, 0, ID_BUTTON_10 },
;;;99     		
;;;100    		{T_Button ,"系统设置", 	"SYSTEM",  0x00B22222 , 0, 	ID_BUTTON_11},
;;;101    		
;;;102    	};
;;;103    	
;;;104    	vu8 _dloc;
;;;105    	
;;;106    	float ftemp;
;;;107    	
;;;108    	char lChar[4];
;;;109    	
;;;110    	switch (pMsg->MsgId) {
00000e  6820              LDR      r0,[r4,#0]
000010  281d              CMP      r0,#0x1d
000012  d07d              BEQ      |L7.272|
000014  dc04              BGT      |L7.32|
000016  280e              CMP      r0,#0xe
000018  d07b              BEQ      |L7.274|
00001a  280f              CMP      r0,#0xf
                  |L7.28|
00001c  d17a              BNE      |L7.276|
00001e  e006              B        |L7.46|
                  |L7.32|
000020  2826              CMP      r0,#0x26
000022  d078              BEQ      |L7.278|
000024  f2a01013          SUB      r0,r0,#0x113
000028  2800              CMP      r0,#0
00002a  d1f7              BNE      |L7.28|
00002c  e0a0              B        |L7.368|
                  |L7.46|
;;;111     
;;;112    	case WM_PAINT://无效化重绘
;;;113    	
;;;114    		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_9);	
00002e  f6400129          MOV      r1,#0x829
000032  6860              LDR      r0,[r4,#4]
000034  f7fffffe          BL       WM_GetDialogItem
000038  4605              MOV      r5,r0
;;;115    		
;;;116    		BUTTON_SetPressed( hItem , 1 );		
00003a  2101              MOVS     r1,#1
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       BUTTON_SetPressed
;;;117    	
;;;118    		GUI_SetColor(0x0003FCF5);
000042  489a              LDR      r0,|L7.684|
000044  f7fffffe          BL       GUI_SetColor
;;;119    		
;;;120    		GUI_FillRoundedRect(0,0,480,33,5);
000048  2005              MOVS     r0,#5
00004a  2321              MOVS     r3,#0x21
00004c  f44f72f0          MOV      r2,#0x1e0
000050  2100              MOVS     r1,#0
000052  9000              STR      r0,[sp,#0]
000054  4608              MOV      r0,r1
000056  f7fffffe          BL       GUI_FillRoundedRect
;;;121    		
;;;122    		GUI_SetColor(GUI_BLACK);
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       GUI_SetColor
;;;123    		
;;;124    		GUI_SetFont(&GUI_FontSONG16);
000060  4893              LDR      r0,|L7.688|
000062  f7fffffe          BL       GUI_SetFont
;;;125    		
;;;126    		GUI_UC_SetEncodeUTF8();
000066  f7fffffe          BL       GUI_UC_SetEncodeUTF8
;;;127    		
;;;128    		GUI_SetTextMode(GUI_TM_TRANS);//设置文本模式为底色透明
00006a  2002              MOVS     r0,#2
00006c  f7fffffe          BL       GUI_SetTextMode
;;;129    		
;;;130    		winName = ( FLAG_LANG == 1) ? "LOAD" : "程控负载";
000070  4890              LDR      r0,|L7.692|
000072  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
000074  2801              CMP      r0,#1
000076  d101              BNE      |L7.124|
000078  a08f              ADR      r0,|L7.696|
00007a  e000              B        |L7.126|
                  |L7.124|
00007c  a090              ADR      r0,|L7.704|
                  |L7.126|
00007e  4680              MOV      r8,r0
;;;131    		
;;;132    		GUI_DispStringAt( winName, (480 - GUI_GetStringDistX( winName))/2, 10);
000080  4640              MOV      r0,r8
000082  f7fffffe          BL       GUI_GetStringDistX
000086  f5c07bf0          RSB      r11,r0,#0x1e0
00008a  eb0b70db          ADD      r0,r11,r11,LSR #31
00008e  1041              ASRS     r1,r0,#1
000090  220a              MOVS     r2,#0xa
000092  4640              MOV      r0,r8
000094  f7fffffe          BL       GUI_DispStringAt
;;;133    
;;;134    		for( i = 0; i < sizeof( SGhListL )/sizeof( SGhListL[0]) ; i++  ){
000098  2000              MOVS     r0,#0
00009a  9022              STR      r0,[sp,#0x88]
00009c  e034              B        |L7.264|
                  |L7.158|
;;;135    			
;;;136    			bush_Graph_String( FLAG_LANG, SGhListL[i] );
00009e  f89d0088          LDRB     r0,[sp,#0x88]
0000a2  eb0000c0          ADD      r0,r0,r0,LSL #3
0000a6  498a              LDR      r1,|L7.720|
0000a8  eb010bc0          ADD      r11,r1,r0,LSL #3
0000ac  2234              MOVS     r2,#0x34
0000ae  4659              MOV      r1,r11
0000b0  a80f              ADD      r0,sp,#0x3c
0000b2  f7fffffe          BL       __aeabi_memcpy4
0000b6  f8db0034          LDR      r0,[r11,#0x34]
0000ba  901c              STR      r0,[sp,#0x70]
0000bc  f8db0038          LDR      r0,[r11,#0x38]
0000c0  901d              STR      r0,[sp,#0x74]
0000c2  f8db003c          LDR      r0,[r11,#0x3c]
0000c6  901e              STR      r0,[sp,#0x78]
0000c8  f8bb0040          LDRH     r0,[r11,#0x40]
0000cc  f8ad007c          STRH     r0,[sp,#0x7c]
0000d0  f8bb0042          LDRH     r0,[r11,#0x42]
0000d4  f8ad007e          STRH     r0,[sp,#0x7e]
0000d8  f8bb0044          LDRH     r0,[r11,#0x44]
0000dc  f8ad0080          STRH     r0,[sp,#0x80]
0000e0  f8bb0046          LDRH     r0,[r11,#0x46]
0000e4  f8ad0082          STRH     r0,[sp,#0x82]
0000e8  223c              MOVS     r2,#0x3c
0000ea  a912              ADD      r1,sp,#0x48
0000ec  4668              MOV      r0,sp
0000ee  f7fffffe          BL       __aeabi_memcpy4
0000f2  4870              LDR      r0,|L7.692|
0000f4  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
0000f6  a90f              ADD      r1,sp,#0x3c
0000f8  c90e              LDM      r1,{r1-r3}
0000fa  f7fffffe          BL       bush_Graph_String
0000fe  f89d0088          LDRB     r0,[sp,#0x88]         ;134
000102  1c40              ADDS     r0,r0,#1              ;134
000104  b2c0              UXTB     r0,r0                 ;134
000106  9022              STR      r0,[sp,#0x88]         ;134
                  |L7.264|
000108  f89d0088          LDRB     r0,[sp,#0x88]         ;134
00010c  280f              CMP      r0,#0xf               ;134
00010e  e003              B        |L7.280|
                  |L7.272|
000110  e0a8              B        |L7.612|
                  |L7.274|
000112  e02c              B        |L7.366|
                  |L7.276|
000114  e0c0              B        |L7.664|
                  |L7.278|
000116  e0b9              B        |L7.652|
                  |L7.280|
000118  d3c1              BCC      |L7.158|
;;;137    		}
;;;138    		
;;;139    		GUI_SetFont(&GUI_FontSONG12);
00011a  486e              LDR      r0,|L7.724|
00011c  f7fffffe          BL       GUI_SetFont
;;;140    		
;;;141    		GUI_UC_SetEncodeUTF8();
000120  f7fffffe          BL       GUI_UC_SetEncodeUTF8
;;;142    		
;;;143    		GUI_SetColor(0x00456654);
000124  486c              LDR      r0,|L7.728|
000126  f7fffffe          BL       GUI_SetColor
;;;144    		
;;;145    		GUI_SetTextMode(GUI_TM_TRANS);//设置文本模式为底色透明
00012a  2002              MOVS     r0,#2
00012c  f7fffffe          BL       GUI_SetTextMode
;;;146    		
;;;147    		chargeName = ( C_DISCHARGE == 1 ) ? ( ( FLAG_LANG == 1) ? "Discharging" : "放电中" ) : (( FLAG_LANG == 1) ?  "Not Charging" : "未放电" );
000130  486a              LDR      r0,|L7.732|
000132  7800              LDRB     r0,[r0,#0]  ; C_DISCHARGE
000134  2801              CMP      r0,#1
000136  d107              BNE      |L7.328|
000138  485e              LDR      r0,|L7.692|
00013a  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
00013c  2801              CMP      r0,#1
00013e  d101              BNE      |L7.324|
000140  a067              ADR      r0,|L7.736|
000142  e008              B        |L7.342|
                  |L7.324|
000144  a069              ADR      r0,|L7.748|
000146  e006              B        |L7.342|
                  |L7.328|
000148  485a              LDR      r0,|L7.692|
00014a  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
00014c  2801              CMP      r0,#1
00014e  d101              BNE      |L7.340|
000150  a069              ADR      r0,|L7.760|
000152  e000              B        |L7.342|
                  |L7.340|
000154  a06c              ADR      r0,|L7.776|
                  |L7.342|
000156  4681              MOV      r9,r0
;;;148    			
;;;149    		GUI_DispStringAt( chargeName, 460 - GUI_GetStringDistX(chargeName), 13);		
000158  4648              MOV      r0,r9
00015a  f7fffffe          BL       GUI_GetStringDistX
00015e  f5c07be6          RSB      r11,r0,#0x1cc
000162  220d              MOVS     r2,#0xd
000164  4659              MOV      r1,r11
000166  4648              MOV      r0,r9
000168  f7fffffe          BL       GUI_DispStringAt
;;;150    	
;;;151    	break;
00016c  e098              B        |L7.672|
                  |L7.366|
;;;152    	
;;;153    	case WM_KEY://接受按键消息来处理按键功能
;;;154    
;;;155    	break;
00016e  e097              B        |L7.672|
                  |L7.368|
;;;156    		
;;;157    	case WM_TIMER://定时模块消息
;;;158    	
;;;159    		if(WM_GetTimerId(pMsg->Data.v) == ID_TimerTimeLoad){
000170  68e0              LDR      r0,[r4,#0xc]
000172  f7fffffe          BL       WM_GetTimerId
000176  2802              CMP      r0,#2
000178  d173              BNE      |L7.610|
;;;160    		
;;;161    		   	sprintf( LStr, "%f", DISS_Voltage );
00017a  4866              LDR      r0,|L7.788|
00017c  6800              LDR      r0,[r0,#0]  ; DISS_Voltage
00017e  f7fffffe          BL       __aeabi_f2d
000182  ec410b18          VMOV     d8,r0,r1
000186  ec532b18          VMOV     r2,r3,d8
00018a  a163              ADR      r1,|L7.792|
00018c  4863              LDR      r0,|L7.796|
00018e  f7fffffe          BL       __2sprintf
;;;162    			
;;;163    			_dloc = dot_Loc_isNull(LStr,strlen(LStr)) > 1 ? 6 : 5;
000192  4862              LDR      r0,|L7.796|
000194  f7fffffe          BL       strlen
000198  4683              MOV      r11,r0
00019a  4659              MOV      r1,r11
00019c  485f              LDR      r0,|L7.796|
00019e  f7fffffe          BL       dot_Loc_isNull
0001a2  2801              CMP      r0,#1
0001a4  dd01              BLE      |L7.426|
0001a6  2006              MOVS     r0,#6
0001a8  e000              B        |L7.428|
                  |L7.426|
0001aa  2005              MOVS     r0,#5
                  |L7.428|
0001ac  9021              STR      r0,[sp,#0x84]
;;;164    
;;;165    			memset(SGhListL[1].f_SName, '\0', sizeof(SGhListL[1].f_SName));
0001ae  2114              MOVS     r1,#0x14
0001b0  4847              LDR      r0,|L7.720|
0001b2  3054              ADDS     r0,r0,#0x54
0001b4  f7fffffe          BL       __aeabi_memclr4
;;;166    
;;;167    			memset(SGhListL[1].f_EName, '\0', sizeof(SGhListL[1].f_EName));
0001b8  2114              MOVS     r1,#0x14
0001ba  4845              LDR      r0,|L7.720|
0001bc  3068              ADDS     r0,r0,#0x68
0001be  f7fffffe          BL       __aeabi_memclr4
;;;168    			
;;;169    			strncpy( SGhListL[1].f_SName, LStr, _dloc );
0001c2  f89d2084          LDRB     r2,[sp,#0x84]
0001c6  4955              LDR      r1,|L7.796|
0001c8  4841              LDR      r0,|L7.720|
0001ca  3054              ADDS     r0,r0,#0x54
0001cc  f7fffffe          BL       strncpy
;;;170    			
;;;171    			strncpy( SGhListL[1].f_EName, LStr, _dloc );
0001d0  f89d2084          LDRB     r2,[sp,#0x84]
0001d4  4951              LDR      r1,|L7.796|
0001d6  483e              LDR      r0,|L7.720|
0001d8  3068              ADDS     r0,r0,#0x68
0001da  f7fffffe          BL       strncpy
;;;172    			
;;;173    			memset( LStr, '\0', sizeof(LStr));		
0001de  484f              LDR      r0,|L7.796|
0001e0  2100              MOVS     r1,#0
0001e2  6001              STR      r1,[r0,#0]  ; LStr
0001e4  6041              STR      r1,[r0,#4]  ; LStr
0001e6  8101              STRH     r1,[r0,#8]
;;;174    			
;;;175    			sprintf( LStr, "%f", DISS_Current );
0001e8  484d              LDR      r0,|L7.800|
0001ea  6800              LDR      r0,[r0,#0]  ; DISS_Current
0001ec  f7fffffe          BL       __aeabi_f2d
0001f0  ec410b18          VMOV     d8,r0,r1
0001f4  ec532b18          VMOV     r2,r3,d8
0001f8  a147              ADR      r1,|L7.792|
0001fa  4848              LDR      r0,|L7.796|
0001fc  f7fffffe          BL       __2sprintf
;;;176    			
;;;177    			_dloc = dot_Loc_isNull(LStr,strlen(LStr)) > 1 ? 6 : 5;
000200  4846              LDR      r0,|L7.796|
000202  f7fffffe          BL       strlen
000206  4683              MOV      r11,r0
000208  4659              MOV      r1,r11
00020a  4844              LDR      r0,|L7.796|
00020c  f7fffffe          BL       dot_Loc_isNull
000210  2801              CMP      r0,#1
000212  dd01              BLE      |L7.536|
000214  2006              MOVS     r0,#6
000216  e000              B        |L7.538|
                  |L7.536|
000218  2005              MOVS     r0,#5
                  |L7.538|
00021a  9021              STR      r0,[sp,#0x84]
;;;178    
;;;179    			memset(SGhListL[4].f_SName, '\0', sizeof(SGhListL[4].f_SName));
00021c  2114              MOVS     r1,#0x14
00021e  4841              LDR      r0,|L7.804|
000220  f7fffffe          BL       __aeabi_memclr4
;;;180    
;;;181    			memset(SGhListL[4].f_EName, '\0', sizeof(SGhListL[4].f_EName));
000224  2114              MOVS     r1,#0x14
000226  483f              LDR      r0,|L7.804|
000228  3014              ADDS     r0,r0,#0x14
00022a  f7fffffe          BL       __aeabi_memclr4
;;;182    
;;;183    			strncpy( SGhListL[4].f_SName, LStr, _dloc );
00022e  f89d2084          LDRB     r2,[sp,#0x84]
000232  493a              LDR      r1,|L7.796|
000234  483b              LDR      r0,|L7.804|
000236  f7fffffe          BL       strncpy
;;;184    			
;;;185    			strncpy( SGhListL[4].f_EName, LStr, _dloc );
00023a  f89d2084          LDRB     r2,[sp,#0x84]
00023e  4937              LDR      r1,|L7.796|
000240  4838              LDR      r0,|L7.804|
000242  3014              ADDS     r0,r0,#0x14
000244  f7fffffe          BL       strncpy
;;;186    			
;;;187     			/* 容量  */
;;;188            /*	memset( LStr, '\0', sizeof(LStr));
;;;189    			
;;;190    			memset( lChar, '\0', sizeof(lChar));
;;;191    				
;;;192    			ftemp = atof(SGhListL[4].f_SName);
;;;193    				
;;;194    			ftemp = ftemp * 1000 * 1/3600 * abc_time;
;;;195    				
;;;196    			sprintf( lChar, "%d", ftemp );
;;;197    				
;;;198    			if( strlen(lChar) < 5){
;;;199    					
;;;200    				for( i = 0; i < 5 - strlen(lChar); i++) {
;;;201    					
;;;202    					strcat( LStr, "0");
;;;203    				}
;;;204    				strcat( LStr, lChar);
;;;205    					
;;;206    			}else{
;;;207    					
;;;208    				strncpy( LStr, lChar, 5 );
;;;209    			}
;;;210    				
;;;211    			memset(SGhListL[7].f_SName, '\0', sizeof(SGhListL[7].f_SName));
;;;212    
;;;213    			memset(SGhListL[7].f_EName, '\0', sizeof(SGhListL[7].f_EName));
;;;214    				
;;;215    			strcpy( SGhListL[7].f_SName, LStr );	
;;;216    				
;;;217    			strcpy( SGhListL[7].f_EName, LStr );
;;;218    			
;;;219    			memset( lChar, '\0', sizeof(lChar)); */
;;;220    			
;;;221    			memset( LStr, '\0', sizeof(LStr));	
000248  4834              LDR      r0,|L7.796|
00024a  2100              MOVS     r1,#0
00024c  6001              STR      r1,[r0,#0]  ; LStr
00024e  6041              STR      r1,[r0,#4]  ; LStr
000250  8101              STRH     r1,[r0,#8]
;;;222    			
;;;223    			WM_InvalidateWindow(load_wind);
000252  4835              LDR      r0,|L7.808|
000254  6800              LDR      r0,[r0,#0]  ; load_wind
000256  f7fffffe          BL       WM_InvalidateWindow
;;;224    		
;;;225    			WM_RestartTimer(pMsg->Data.v, 200);
00025a  21c8              MOVS     r1,#0xc8
00025c  68e0              LDR      r0,[r4,#0xc]
00025e  f7fffffe          BL       WM_RestartTimer
                  |L7.610|
;;;226    			
;;;227    		}
;;;228    	break;
000262  e01d              B        |L7.672|
                  |L7.612|
;;;229    	
;;;230    	case WM_INIT_DIALOG://重绘外观
;;;231    
;;;232    		hItem = pMsg->hWin;
000264  6865              LDR      r5,[r4,#4]
;;;233    		
;;;234    		WINDOW_SetBkColor(hItem, 0x004A4655);
000266  4931              LDR      r1,|L7.812|
000268  4628              MOV      r0,r5
00026a  f7fffffe          BL       WINDOW_SetBkColor
;;;235    		
;;;236    		WM_CreateTimer(hItem,ID_TimerTimeLoad,20,0);//创建本窗口定时器	
00026e  2300              MOVS     r3,#0
000270  2214              MOVS     r2,#0x14
000272  2102              MOVS     r1,#2
000274  4628              MOV      r0,r5
000276  f7fffffe          BL       WM_CreateTimer
;;;237    		
;;;238    	  MAX_LEN = sizeof(slistL)/sizeof(slistL[0]);
00027a  2705              MOVS     r7,#5
;;;239    		
;;;240    		bush_WinObj( FLAG_LANG, pMsg ,slistL, MAX_LEN);
00027c  463b              MOV      r3,r7
00027e  4a2c              LDR      r2,|L7.816|
000280  4621              MOV      r1,r4
000282  480c              LDR      r0,|L7.692|
000284  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
000286  f7fffffe          BL       bush_WinObj
;;;241    		
;;;242        break;
00028a  e009              B        |L7.672|
                  |L7.652|
;;;243    	
;;;244    	case WM_NOTIFY_PARENT:
;;;245    	
;;;246    		Id    = WM_GetId(pMsg->hWinSrc);
00028c  68a0              LDR      r0,[r4,#8]
00028e  f7fffffe          BL       WM_GetId
000292  4682              MOV      r10,r0
;;;247    		
;;;248    		NCode = pMsg->Data.v;
000294  68e6              LDR      r6,[r4,#0xc]
;;;249    		
;;;250        break;
000296  e003              B        |L7.672|
                  |L7.664|
;;;251    	
;;;252    	default:
;;;253    	
;;;254        WM_DefaultProc(pMsg);
000298  4620              MOV      r0,r4
00029a  f7fffffe          BL       WM_DefaultProc
;;;255    	
;;;256        break;
00029e  bf00              NOP      
                  |L7.672|
0002a0  bf00              NOP                            ;151
;;;257      }
;;;258    
;;;259    }
0002a2  b023              ADD      sp,sp,#0x8c
0002a4  ecbd8b02          VPOP     {d8}
0002a8  e8bd8ff0          POP      {r4-r11,pc}
;;;260    
                          ENDP

                  |L7.684|
                          DCD      0x0003fcf5
                  |L7.688|
                          DCD      GUI_FontSONG16
                  |L7.692|
                          DCD      FLAG_LANG
                  |L7.696|
0002b8  4c4f4144          DCB      "LOAD",0
0002bc  00      
0002bd  00                DCB      0
0002be  00                DCB      0
0002bf  00                DCB      0
                  |L7.704|
0002c0  e7a88be6          DCB      231,168,139,230,142,167,232,180,159,232,189,189,0
0002c4  8ea7e8b4
0002c8  9fe8bdbd
0002cc  00      
0002cd  00                DCB      0
0002ce  00                DCB      0
0002cf  00                DCB      0
                  |L7.720|
                          DCD      SGhListL
                  |L7.724|
                          DCD      GUI_FontSONG12
                  |L7.728|
                          DCD      0x00456654
                  |L7.732|
                          DCD      C_DISCHARGE
                  |L7.736|
0002e0  44697363          DCB      "Discharging",0
0002e4  68617267
0002e8  696e6700
                  |L7.748|
0002ec  e694bee7          DCB      230,148,190,231,148,181,228,184,173,0
0002f0  94b5e4b8
0002f4  ad00    
0002f6  00                DCB      0
0002f7  00                DCB      0
                  |L7.760|
0002f8  4e6f7420          DCB      "Not Charging",0
0002fc  43686172
000300  67696e67
000304  00      
000305  00                DCB      0
000306  00                DCB      0
000307  00                DCB      0
                  |L7.776|
000308  e69caae6          DCB      230,156,170,230,148,190,231,148,181,0
00030c  94bee794
000310  b500    
000312  00                DCB      0
000313  00                DCB      0
                  |L7.788|
                          DCD      DISS_Voltage
                  |L7.792|
000318  256600            DCB      "%f",0
00031b  00                DCB      0
                  |L7.796|
                          DCD      LStr
                  |L7.800|
                          DCD      DISS_Current
                  |L7.804|
                          DCD      SGhListL+0x12c
                  |L7.808|
                          DCD      load_wind
                  |L7.812|
                          DCD      0x004a4655
                  |L7.816|
                          DCD      slistL

                          AREA ||i.trig_load_discharge||, CODE, READONLY, ALIGN=2

                  trig_load_discharge PROC
;;;750    
;;;751    void trig_load_discharge(){
000000  b508              PUSH     {r3,lr}
;;;752    
;;;753    	vu8 chargeState;
;;;754    	
;;;755    	chargeState = ( C_DISCHARGE == 1 ) ?  1 : 0;
000002  4809              LDR      r0,|L8.40|
000004  7800              LDRB     r0,[r0,#0]  ; C_DISCHARGE
000006  2801              CMP      r0,#1
000008  d100              BNE      |L8.12|
00000a  e000              B        |L8.14|
                  |L8.12|
00000c  2000              MOVS     r0,#0
                  |L8.14|
00000e  9000              STR      r0,[sp,#0]
;;;756    	
;;;757    	OnOff_GPOI_ResetSet( FLAG_WIN , chargeState );
000010  f89d1000          LDRB     r1,[sp,#0]
000014  4805              LDR      r0,|L8.44|
000016  7800              LDRB     r0,[r0,#0]  ; FLAG_WIN
000018  f7fffffe          BL       OnOff_GPOI_ResetSet
;;;758    	
;;;759    	WM_InvalidateWindow(load_wind);
00001c  4804              LDR      r0,|L8.48|
00001e  6800              LDR      r0,[r0,#0]  ; load_wind
000020  f7fffffe          BL       WM_InvalidateWindow
;;;760    }
000024  bd08              POP      {r3,pc}
;;;761    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      C_DISCHARGE
                  |L8.44|
                          DCD      FLAG_WIN
                  |L8.48|
                          DCD      load_wind

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  LStr
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _aDialogCreateload
                          DCD      WINDOW_CreateIndirect
                          DCD      ||.conststring||
000008  08250000          DCW      0x0825,0x0000
00000c  000001e0          DCW      0x0000,0x01e0
000010  01100000          DCW      0x0110,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
000024  08270055          DCW      0x0827,0x0055
000028  00e80046          DCW      0x00e8,0x0046
00002c  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
000040  082800a4          DCW      0x0828,0x00a4
000044  00e80046          DCW      0x00e8,0x0046
000048  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
00005c  082900f3          DCW      0x0829,0x00f3
000060  00e80046          DCW      0x00e8,0x0046
000064  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
000078  08300142          DCW      0x0830,0x0142
00007c  00e80046          DCW      0x00e8,0x0046
000080  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
000094  08310191          DCW      0x0831,0x0191
000098  00e80046          DCW      0x00e8,0x0046
00009c  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                  WINL_id_DataLists
                          DCD      0x0000000b
                          DCD      0x0000000e

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  57696e64          DCB      "Window",0
000004  6f7700  
000007  00                DCB      0
000008  42757474          DCB      "Button",0
00000c  6f6e00  

                          AREA ||.data||, DATA, ALIGN=2

                  load_wind
                          DCD      0x00000000
                  SGhListL
                          DCD      0x00000001
                          DCD      0x00000000
                          DCD      0x00000002
000010  563a0000          DCB      0x56,0x3a,0x00,0x00
                          %        16
000024  563a0000          DCB      0x56,0x3a,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
000044  001e0037          DCW      0x001e,0x0037
000048  00000000          DCW      0x0000,0x0000
                          DCD      0x00000002
                          DCD      0x00000000
                          DCD      0x00000002
000058  302e3030          DCB      0x30,0x2e,0x30,0x30
00005c  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
00006c  302e3030          DCB      0x30,0x2e,0x30,0x30
000070  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
00008c  0058003a          DCW      0x0058,0x003a
000090  00000000          DCW      0x0000,0x0000
                          DCD      0x00000003
                          DCD      0x00000000
                          DCD      0x00000002
0000a0  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
0000b4  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
0000d4  00b20037          DCW      0x00b2,0x0037
0000d8  00000000          DCW      0x0000,0x0000
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000002
0000e8  493a0000          DCB      0x49,0x3a,0x00,0x00
                          %        16
0000fc  493a0000          DCB      0x49,0x3a,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
00011c  001e0074          DCW      0x001e,0x0074
000120  00000000          DCW      0x0000,0x0000
                          DCD      0x00000005
                          DCD      0x00000000
                          DCD      0x00000002
000130  302e3030          DCB      0x30,0x2e,0x30,0x30
000134  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
000144  302e3030          DCB      0x30,0x2e,0x30,0x30
000148  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000164  00580077          DCW      0x0058,0x0077
000168  00000000          DCW      0x0000,0x0000
                          DCD      0x00000006
                          DCD      0x00000000
                          DCD      0x00000002
000178  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
00018c  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
0001ac  00b20074          DCW      0x00b2,0x0074
0001b0  00000000          DCW      0x0000,0x0000
                          DCD      0x00000007
                          DCD      0x00000000
                          DCD      0x00000002
0001c0  433a0000          DCB      0x43,0x3a,0x00,0x00
                          %        16
0001d4  433a0000          DCB      0x43,0x3a,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
0001f4  001e00b1          DCW      0x001e,0x00b1
0001f8  00000000          DCW      0x0000,0x0000
                          DCD      0x00000008
                          DCD      0x00000000
                          DCD      0x00000002
000208  30303030          DCB      0x30,0x30,0x30,0x30
00020c  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
00021c  30303030          DCB      0x30,0x30,0x30,0x30
000220  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
00023c  005800b4          DCW      0x0058,0x00b4
000240  00000000          DCW      0x0000,0x0000
                          DCD      0x00000009
                          DCD      0x00000000
                          DCD      0x00000002
000250  6d414800          DCB      0x6d,0x41,0x48,0x00
                          %        16
000264  6d414800          DCB      0x6d,0x41,0x48,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
000284  00b200b1          DCW      0x00b2,0x00b1
000288  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000a
                          DCD      0x00000000
                          DCD      0x00000002
000298  e8b49fe8          DCB      0xe8,0xb4,0x9f,0xe8
00029c  bdbde794          DCB      0xbd,0xbd,0xe7,0x94
0002a0  b5e6b581          DCB      0xb5,0xe6,0xb5,0x81
0002a4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
0002ac  4c6f6164          DCB      0x4c,0x6f,0x61,0x64
0002b0  20430000          DCB      0x20,0x43,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0002cc  0104005a          DCW      0x0104,0x005a
0002d0  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000b
                          DCD      0x00000001
                          DCD      0x00000001
0002e0  312e3830          DCB      0x31,0x2e,0x38,0x30
0002e4  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
0002f4  312e3830          DCB      0x31,0x2e,0x38,0x30
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000314  015e005a          DCW      0x015e,0x005a
000318  0190006b          DCW      0x0190,0x006b
                          DCD      0x0000000c
                          DCD      0x00000000
                          DCD      0x00000002
000328  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
00033c  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00035c  01ae005a          DCW      0x01ae,0x005a
000360  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000d
                          DCD      0x00000000
                          DCD      0x00000002
000370  e8b49fe8          DCB      0xe8,0xb4,0x9f,0xe8
000374  bdbde794          DCB      0xbd,0xbd,0xe7,0x94
000378  b5e58e8b          DCB      0xb5,0xe5,0x8e,0x8b
00037c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000384  4c6f6164          DCB      0x4c,0x6f,0x61,0x64
000388  20560000          DCB      0x20,0x56,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0003a4  01040082          DCW      0x0104,0x0082
0003a8  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000e
                          DCD      0x00000000
                          DCD      0x00000001
0003b8  312e3830          DCB      0x31,0x2e,0x38,0x30
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
0003cc  312e3830          DCB      0x31,0x2e,0x38,0x30
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0003ec  015e0082          DCW      0x015e,0x0082
0003f0  01900093          DCW      0x0190,0x0093
                          DCD      0x0000000f
                          DCD      0x00000000
                          DCD      0x00000002
000400  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
000414  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000434  01ae0082          DCW      0x01ae,0x0082
000438  00000000          DCW      0x0000,0x0000
                  slistL
00043c  00e58685          DCB      0x00,0xe5,0x86,0x85
000440  e998bbe6          DCB      0xe9,0x98,0xbb,0xe6
000444  b58be8af          DCB      0xb5,0x8b,0xe8,0xaf
000448  95000000          DCB      0x95,0x00,0x00,0x00
                          DCD      0x00000000
000450  00492e52          DCB      0x00,0x49,0x2e,0x52
000454  2e205445          DCB      0x2e,0x20,0x54,0x45
000458  53540000          DCB      0x53,0x54,0x00,0x00
                          %        8
000464  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x00000827
000474  00e7a88b          DCB      0x00,0xe7,0xa8,0x8b
000478  e68ea7e7          DCB      0xe6,0x8e,0xa7,0xe7
00047c  94b5e6ba          DCB      0x94,0xb5,0xe6,0xba
000480  90000000          DCB      0x90,0x00,0x00,0x00
                          DCD      0x00000000
000488  00504f57          DCB      0x00,0x50,0x4f,0x57
00048c  45520000          DCB      0x45,0x52,0x00,0x00
                          %        12
00049c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x00000828
0004ac  00e7a88b          DCB      0x00,0xe7,0xa8,0x8b
0004b0  e68ea7e8          DCB      0xe6,0x8e,0xa7,0xe8
0004b4  b49fe8bd          DCB      0xb4,0x9f,0xe8,0xbd
0004b8  bd000000          DCB      0xbd,0x00,0x00,0x00
                          DCD      0x00000000
0004c0  004c4f41          DCB      0x00,0x4c,0x4f,0x41
0004c4  44000000          DCB      0x44,0x00,0x00,0x00
                          %        12
0004d4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x00000829
0004e4  00e58585          DCB      0x00,0xe5,0x85,0x85
0004e8  e694bee7          DCB      0xe6,0x94,0xbe,0xe7
0004ec  94b50000          DCB      0x94,0xb5,0x00,0x00
                          %        8
0004f8  00432644          DCB      0x00,0x43,0x26,0x44
0004fc  43000000          DCB      0x43,0x00,0x00,0x00
                          %        12
00050c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x00000830
00051c  00e7b3bb          DCB      0x00,0xe7,0xb3,0xbb
000520  e7bb9fe8          DCB      0xe7,0xbb,0x9f,0xe8
000524  aebee7bd          DCB      0xae,0xbe,0xe7,0xbd
000528  ae000000          DCB      0xae,0x00,0x00,0x00
                          DCD      0x00000000
000530  00535953          DCB      0x00,0x53,0x59,0x53
000534  54454d00          DCB      0x54,0x45,0x4d,0x00
                          %        12
000544  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x00000831

;*** Start embedded assembler ***

#line 1 "..\\APP\\load_Face.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_load_Face_c_3f81caee____REV16|
#line 129 "D:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_load_Face_c_3f81caee____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_load_Face_c_3f81caee____REVSH|
#line 144
|__asm___11_load_Face_c_3f81caee____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
