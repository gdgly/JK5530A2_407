; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\stm32f4xx_it.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\stm32f4xx_it.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\stm32f4xx_it.crf --no_multibyte_chars ..\User\stm32f4xx_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
;;;100      */
;;;101    void BusFault_Handler(void)
000000  bf00              NOP      
                  |L1.2|
;;;102    {
;;;103      /* Go to infinite loop when Bus Fault exception occurs */
;;;104      while (1)
000002  e7fe              B        |L1.2|
;;;105      {
;;;106      }
;;;107    }
;;;108    
                          ENDP


                          AREA ||i.DMA2_Stream0_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Stream0_IRQHandler PROC
;;;182    
;;;183    void  DMA2_Stream0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;184    {
;;;185    	DMA_ClearITPendingBit(DMA2_Stream0,DMA_IT_TCIF0);
000002  4906              LDR      r1,|L2.28|
000004  4806              LDR      r0,|L2.32|
000006  f7fffffe          BL       DMA_ClearITPendingBit
;;;186    	Flag_ADC_Full=1;
00000a  4806              LDR      r0,|L2.36|
00000c  6800              LDR      r0,[r0,#0]  ; flagA
00000e  f0200002          BIC      r0,r0,#2
000012  1c80              ADDS     r0,r0,#2
000014  4903              LDR      r1,|L2.36|
000016  6008              STR      r0,[r1,#0]  ; flagA
;;;187    }
000018  bd10              POP      {r4,pc}
;;;188    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x10008020
                  |L2.32|
                          DCD      0x40026410
                  |L2.36|
                          DCD      flagA

                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;135      */
;;;136    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;137    {
;;;138    }
;;;139    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
;;;74       */
;;;75     void HardFault_Handler(void)
000000  bf00              NOP      
                  |L4.2|
;;;76     {
;;;77       /* Go to infinite loop when Hard Fault exception occurs */
;;;78       while (1)
000002  e7fe              B        |L4.2|
;;;79       {
;;;80       }
;;;81     }
;;;82     
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
;;;87       */
;;;88     void MemManage_Handler(void)
000000  bf00              NOP      
                  |L5.2|
;;;89     {
;;;90       /* Go to infinite loop when Memory Manage exception occurs */
;;;91       while (1)
000002  e7fe              B        |L5.2|
;;;92       {
;;;93       }
;;;94     }
;;;95     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;65       */
;;;66     void NMI_Handler(void)
000000  4770              BX       lr
;;;67     {
;;;68     }
;;;69     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;144      */
;;;145    void PendSV_Handler(void)
000000  4770              BX       lr
;;;146    {
;;;147    }
;;;148    
                          ENDP


                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;126      */
;;;127    void SVC_Handler(void)
000000  4770              BX       lr
;;;128    {
;;;129    }
;;;130    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;153      */
;;;154    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;155    {
;;;156    	TimingDelay_Decrement();
000002  f7fffffe          BL       TimingDelay_Decrement
;;;157    	OS_TimeMS++;
000006  4822              LDR      r0,|L9.144|
000008  6800              LDR      r0,[r0,#0]  ; OS_TimeMS
00000a  1c40              ADDS     r0,r0,#1
00000c  4920              LDR      r1,|L9.144|
00000e  6008              STR      r0,[r1,#0]  ; OS_TimeMS
;;;158    	t_KeyScan++;
000010  4820              LDR      r0,|L9.148|
000012  7800              LDRB     r0,[r0,#0]  ; t_KeyScan
000014  1c40              ADDS     r0,r0,#1
000016  491f              LDR      r1,|L9.148|
000018  7008              STRB     r0,[r1,#0]
;;;159    	if(t_KeyScan>10)
00001a  4608              MOV      r0,r1
00001c  7800              LDRB     r0,[r0,#0]  ; t_KeyScan
00001e  280a              CMP      r0,#0xa
000020  dd08              BLE      |L9.52|
;;;160    	{
;;;161    		t_KeyScan=0;
000022  2000              MOVS     r0,#0
000024  7008              STRB     r0,[r1,#0]
;;;162    		Flag_Key_Scan=1;//按键消抖标志
000026  481c              LDR      r0,|L9.152|
000028  6800              LDR      r0,[r0,#0]  ; flagA
00002a  f0200008          BIC      r0,r0,#8
00002e  3008              ADDS     r0,r0,#8
000030  4919              LDR      r1,|L9.152|
000032  6008              STR      r0,[r1,#0]  ; flagA
                  |L9.52|
;;;163    	}
;;;164    	t_0_5S++;
000034  4819              LDR      r0,|L9.156|
000036  8800              LDRH     r0,[r0,#0]  ; t_0_5S
000038  1c40              ADDS     r0,r0,#1
00003a  4918              LDR      r1,|L9.156|
00003c  8008              STRH     r0,[r1,#0]
;;;165    	if(t_0_5S>20)
00003e  4608              MOV      r0,r1
000040  8800              LDRH     r0,[r0,#0]  ; t_0_5S
000042  2814              CMP      r0,#0x14
000044  dd08              BLE      |L9.88|
;;;166    	{
;;;167    		t_0_5S=0;
000046  2000              MOVS     r0,#0
000048  8008              STRH     r0,[r1,#0]
;;;168    		Flag_0_5S =1;//蜂鸣器响一声标志
00004a  4813              LDR      r0,|L9.152|
00004c  6800              LDR      r0,[r0,#0]  ; flagA
00004e  f0200080          BIC      r0,r0,#0x80
000052  3080              ADDS     r0,r0,#0x80
000054  4910              LDR      r1,|L9.152|
000056  6008              STR      r0,[r1,#0]  ; flagA
                  |L9.88|
;;;169    	}
;;;170    //--------------------------------------------
;;;171    	if(flag_Tim_USART==1)//串口清零计数
000058  4811              LDR      r0,|L9.160|
00005a  7800              LDRB     r0,[r0,#0]  ; flagD
00005c  f0000001          AND      r0,r0,#1
000060  b120              CBZ      r0,|L9.108|
;;;172    	{
;;;173    		t_USART++;
000062  4810              LDR      r0,|L9.164|
000064  7800              LDRB     r0,[r0,#0]  ; t_USART
000066  1c40              ADDS     r0,r0,#1
000068  490e              LDR      r1,|L9.164|
00006a  7008              STRB     r0,[r1,#0]
                  |L9.108|
;;;174    	}
;;;175    	if(t_USART>40)//大约2.6ms
00006c  480d              LDR      r0,|L9.164|
00006e  7800              LDRB     r0,[r0,#0]  ; t_USART
000070  2828              CMP      r0,#0x28
000072  dd0b              BLE      |L9.140|
;;;176    	{
;;;177    		t_USART=0;
000074  2000              MOVS     r0,#0
000076  490b              LDR      r1,|L9.164|
000078  7008              STRB     r0,[r1,#0]
;;;178    		flag_Tim_USART=0;
00007a  4809              LDR      r0,|L9.160|
00007c  6800              LDR      r0,[r0,#0]  ; flagD
00007e  f0200001          BIC      r0,r0,#1
000082  4907              LDR      r1,|L9.160|
000084  6008              STR      r0,[r1,#0]  ; flagD
;;;179    		UART_Buffer_Size=0;	
000086  2000              MOVS     r0,#0
000088  4907              LDR      r1,|L9.168|
00008a  7008              STRB     r0,[r1,#0]
                  |L9.140|
;;;180    	}
;;;181    }
00008c  bd10              POP      {r4,pc}
;;;182    
                          ENDP

00008e  0000              DCW      0x0000
                  |L9.144|
                          DCD      OS_TimeMS
                  |L9.148|
                          DCD      t_KeyScan
                  |L9.152|
                          DCD      flagA
                  |L9.156|
                          DCD      t_0_5S
                  |L9.160|
                          DCD      flagD
                  |L9.164|
                          DCD      t_USART
                  |L9.168|
                          DCD      UART_Buffer_Size

                          AREA ||i.TIM6_DAC_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM6_DAC_IRQHandler PROC
;;;188    
;;;189    void  TIM6_DAC_IRQHandler (void)
000000  b510              PUSH     {r4,lr}
;;;190    {
;;;191    	TIM_ClearITPendingBit(TIM6,TIM_IT_Update);//清中断标志位
000002  2101              MOVS     r1,#1
000004  4801              LDR      r0,|L10.12|
000006  f7fffffe          BL       TIM_ClearITPendingBit
;;;192    }
00000a  bd10              POP      {r4,pc}
;;;193    
                          ENDP

                  |L10.12|
                          DCD      0x40001000

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;193    
;;;194    void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;195    {
;;;196    	flag_Tim_USART=1;
000002  4828              LDR      r0,|L11.164|
000004  6800              LDR      r0,[r0,#0]  ; flagD
000006  f0200001          BIC      r0,r0,#1
00000a  1c40              ADDS     r0,r0,#1
00000c  4925              LDR      r1,|L11.164|
00000e  6008              STR      r0,[r1,#0]  ; flagD
;;;197     	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
000010  f2405125          MOV      r1,#0x525
000014  4824              LDR      r0,|L11.168|
000016  f7fffffe          BL       USART_GetITStatus
00001a  2800              CMP      r0,#0
00001c  d040              BEQ      |L11.160|
;;;198    	{
;;;199    		UART_Buffer_Rece[UART_Buffer_Size]=USART_ReceiveData(USART1);
00001e  4822              LDR      r0,|L11.168|
000020  f7fffffe          BL       USART_ReceiveData
000024  4921              LDR      r1,|L11.172|
000026  4a22              LDR      r2,|L11.176|
000028  7812              LDRB     r2,[r2,#0]  ; UART_Buffer_Size
00002a  5488              STRB     r0,[r1,r2]
;;;200    		UART_Buffer_Size++;
00002c  4820              LDR      r0,|L11.176|
00002e  7800              LDRB     r0,[r0,#0]  ; UART_Buffer_Size
000030  1c40              ADDS     r0,r0,#1
000032  491f              LDR      r1,|L11.176|
000034  7008              STRB     r0,[r1,#0]
;;;201    		if (UART_Buffer_Size > 7)
000036  4608              MOV      r0,r1
000038  7800              LDRB     r0,[r0,#0]  ; UART_Buffer_Size
00003a  2807              CMP      r0,#7
00003c  dd30              BLE      |L11.160|
;;;202    		{
;;;203    			if (UART_Buffer_Rece[1] == 16)
00003e  481b              LDR      r0,|L11.172|
000040  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
000042  2810              CMP      r0,#0x10
000044  d119              BNE      |L11.122|
;;;204    			{	
;;;205    				if (UART_Buffer_Size > (UART_Buffer_Rece[6]+8))
000046  4819              LDR      r0,|L11.172|
000048  7980              LDRB     r0,[r0,#6]  ; UART_Buffer_Rece
00004a  3008              ADDS     r0,r0,#8
00004c  7809              LDRB     r1,[r1,#0]  ; UART_Buffer_Size
00004e  4288              CMP      r0,r1
000050  da26              BGE      |L11.160|
;;;206    				{
;;;207    					UART_Buffer_Size=0;	  	   		   
000052  2000              MOVS     r0,#0
000054  4916              LDR      r1,|L11.176|
000056  7008              STRB     r0,[r1,#0]
;;;208    					UART_Buffer_Rece_flag=1;
000058  4816              LDR      r0,|L11.180|
00005a  6800              LDR      r0,[r0,#0]  ; flagA
00005c  f0200020          BIC      r0,r0,#0x20
000060  3020              ADDS     r0,r0,#0x20
000062  4914              LDR      r1,|L11.180|
000064  6008              STR      r0,[r1,#0]  ; flagA
;;;209    					flag_Tim_USART=0;
000066  480f              LDR      r0,|L11.164|
000068  6800              LDR      r0,[r0,#0]  ; flagD
00006a  f0200001          BIC      r0,r0,#1
00006e  490d              LDR      r1,|L11.164|
000070  6008              STR      r0,[r1,#0]  ; flagD
;;;210    					t_USART=0;
000072  2000              MOVS     r0,#0
000074  4910              LDR      r1,|L11.184|
000076  7008              STRB     r0,[r1,#0]
000078  e012              B        |L11.160|
                  |L11.122|
;;;211    				}
;;;212    			}
;;;213    			else
;;;214    			{
;;;215    				UART_Buffer_Size=0;	  	   	   
00007a  2000              MOVS     r0,#0
00007c  490c              LDR      r1,|L11.176|
00007e  7008              STRB     r0,[r1,#0]
;;;216    				UART_Buffer_Rece_flag=1;  
000080  480c              LDR      r0,|L11.180|
000082  6800              LDR      r0,[r0,#0]  ; flagA
000084  f0200020          BIC      r0,r0,#0x20
000088  3020              ADDS     r0,r0,#0x20
00008a  490a              LDR      r1,|L11.180|
00008c  6008              STR      r0,[r1,#0]  ; flagA
;;;217    				flag_Tim_USART=0;
00008e  4805              LDR      r0,|L11.164|
000090  6800              LDR      r0,[r0,#0]  ; flagD
000092  f0200001          BIC      r0,r0,#1
000096  4903              LDR      r1,|L11.164|
000098  6008              STR      r0,[r1,#0]  ; flagD
;;;218    				t_USART=0;
00009a  2000              MOVS     r0,#0
00009c  4906              LDR      r1,|L11.184|
00009e  7008              STRB     r0,[r1,#0]
                  |L11.160|
;;;219    			}	  
;;;220    		}
;;;221    	}
;;;222    }
0000a0  bd10              POP      {r4,pc}
;;;223    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L11.164|
                          DCD      flagD
                  |L11.168|
                          DCD      0x40011000
                  |L11.172|
                          DCD      UART_Buffer_Rece
                  |L11.176|
                          DCD      UART_Buffer_Size
                  |L11.180|
                          DCD      flagA
                  |L11.184|
                          DCD      t_USART

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
;;;113      */
;;;114    void UsageFault_Handler(void)
000000  bf00              NOP      
                  |L12.2|
;;;115    {
;;;116      /* Go to infinite loop when Usage Fault exception occurs */
;;;117      while (1)
000002  e7fe              B        |L12.2|
;;;118      {
;;;119      }
;;;120    }
;;;121    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\User\\stm32f4xx_it.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____REV16|
#line 129 "D:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_stm32f4xx_it_c_bb8ca80c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____REVSH|
#line 144
|__asm___14_stm32f4xx_it_c_bb8ca80c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
