; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\cdcharge_face.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\cdcharge_face.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\INC\ST\STM32F4xx -D__UVISION_VERSION=525 -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX -W --omf_browse=..\output\cdcharge_face.crf --no_multibyte_chars ..\APP\cdcharge_Face.c]
                          THUMB

                          AREA ||i.Cdc_delete_input||, CODE, READONLY, ALIGN=2

                  Cdc_delete_input PROC
;;;673    /*  删除  */
;;;674    void Cdc_delete_input( ){
000000  b570              PUSH     {r4-r6,lr}
;;;675    	
;;;676    	int dlen = 0, flen = 0;
000002  2500              MOVS     r5,#0
000004  2600              MOVS     r6,#0
;;;677    
;;;678    	int *key_loc;
;;;679    	
;;;680    	if( FLAG_INPUTAUTH  ){	
000006  4828              LDR      r0,|L1.168|
000008  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
00000a  2800              CMP      r0,#0
00000c  d04a              BEQ      |L1.164|
;;;681    	
;;;682    		dlen = sizeof( SGhListCDC ) / sizeof( SGhListCDC[0] );
00000e  2519              MOVS     r5,#0x19
;;;683    		
;;;684    		key_loc = get_id_index( SGhListCDC, dlen);
000010  4629              MOV      r1,r5
000012  4826              LDR      r0,|L1.172|
000014  f7fffffe          BL       get_id_index
000018  4604              MOV      r4,r0
;;;685    		
;;;686    		if( *key_loc == 0x194 )
00001a  6820              LDR      r0,[r4,#0]
00001c  f5b07fca          CMP      r0,#0x194
000020  d104              BNE      |L1.44|
;;;687    			
;;;688    		   SGhListCDC[11].focusType = 1;	
000022  2101              MOVS     r1,#1
000024  4821              LDR      r0,|L1.172|
000026  f8c0131c          STR      r1,[r0,#0x31c]
00002a  e03b              B        |L1.164|
                  |L1.44|
;;;689    		
;;;690    		else
;;;691    		{			
;;;692    			strcpy( displayStr , SGhListCDC[*(key_loc + 1)].f_EName );
00002c  6860              LDR      r0,[r4,#4]
00002e  eb0000c0          ADD      r0,r0,r0,LSL #3
000032  4a1e              LDR      r2,|L1.172|
000034  eb0200c0          ADD      r0,r2,r0,LSL #3
000038  f1000120          ADD      r1,r0,#0x20
00003c  481c              LDR      r0,|L1.176|
00003e  f7fffffe          BL       strcpy
;;;693    			
;;;694    			if( SGhListCDC[*(key_loc + 1)].t_Type == T_THref && ( strlen( displayStr) != 0 || displayStr[0] != '\0' ) )
000042  6860              LDR      r0,[r4,#4]
000044  eb0000c0          ADD      r0,r0,r0,LSL #3
000048  4918              LDR      r1,|L1.172|
00004a  eb0100c0          ADD      r0,r1,r0,LSL #3
00004e  6880              LDR      r0,[r0,#8]
000050  2801              CMP      r0,#1
000052  d127              BNE      |L1.164|
000054  4816              LDR      r0,|L1.176|
000056  f7fffffe          BL       strlen
00005a  b910              CBNZ     r0,|L1.98|
00005c  4814              LDR      r0,|L1.176|
00005e  7800              LDRB     r0,[r0,#0]  ; displayStr
000060  b300              CBZ      r0,|L1.164|
                  |L1.98|
;;;695    			{
;;;696    				displayStr [ strlen( displayStr) - 1 ] = '\0'; 
000062  4813              LDR      r0,|L1.176|
000064  f7fffffe          BL       strlen
000068  1e40              SUBS     r0,r0,#1
00006a  4911              LDR      r1,|L1.176|
00006c  2200              MOVS     r2,#0
00006e  540a              STRB     r2,[r1,r0]
;;;697    					
;;;698    				strcpy( SGhListCDC[*(key_loc + 1)].f_SName, displayStr );	
000070  6861              LDR      r1,[r4,#4]
000072  eb0101c1          ADD      r1,r1,r1,LSL #3
000076  4a0d              LDR      r2,|L1.172|
000078  eb0201c1          ADD      r1,r2,r1,LSL #3
00007c  f101000c          ADD      r0,r1,#0xc
000080  490b              LDR      r1,|L1.176|
000082  f7fffffe          BL       strcpy
;;;699    					
;;;700    				strcpy( SGhListCDC[*(key_loc + 1)].f_EName, displayStr );	
000086  6861              LDR      r1,[r4,#4]
000088  eb0101c1          ADD      r1,r1,r1,LSL #3
00008c  4a07              LDR      r2,|L1.172|
00008e  eb0201c1          ADD      r1,r2,r1,LSL #3
000092  f1010020          ADD      r0,r1,#0x20
000096  4906              LDR      r1,|L1.176|
000098  f7fffffe          BL       strcpy
;;;701    					
;;;702    				WM_InvalidateWindow(cdchargeWin);				
00009c  4805              LDR      r0,|L1.180|
00009e  6800              LDR      r0,[r0,#0]  ; cdchargeWin
0000a0  f7fffffe          BL       WM_InvalidateWindow
                  |L1.164|
;;;703    			}	
;;;704    		}
;;;705    	}
;;;706    
;;;707    }
0000a4  bd70              POP      {r4-r6,pc}
;;;708    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L1.168|
                          DCD      FLAG_INPUTAUTH
                  |L1.172|
                          DCD      SGhListCDC
                  |L1.176|
                          DCD      displayStr
                  |L1.180|
                          DCD      cdchargeWin

                          AREA ||i.Cdc_ent||, CODE, READONLY, ALIGN=2

                  Cdc_ent PROC
;;;632    /*  确认  */
;;;633    void Cdc_ent( ){
000000  b570              PUSH     {r4-r6,lr}
;;;634    	
;;;635    	int dlen, flen;
;;;636    	
;;;637    	int *key_loc;
;;;638    	
;;;639    	if( FLAG_INPUTAUTH ){
000002  481f              LDR      r0,|L2.128|
000004  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000006  b128              CBZ      r0,|L2.20|
;;;640    		
;;;641    		FLAG_INPUTAUTH = 0;
000008  2000              MOVS     r0,#0
00000a  491d              LDR      r1,|L2.128|
00000c  7008              STRB     r0,[r1,#0]
;;;642    		
;;;643    		Cdc_value_correct();
00000e  f7fffffe          BL       Cdc_value_correct
000012  e034              B        |L2.126|
                  |L2.20|
;;;644    		
;;;645    	}else{
;;;646    		
;;;647    		FLAG_INPUTAUTH = 1;
000014  2001              MOVS     r0,#1
000016  491a              LDR      r1,|L2.128|
000018  7008              STRB     r0,[r1,#0]
;;;648    		
;;;649    		dlen = sizeof(SGhListCDC) / sizeof( SGhListCDC[0] );
00001a  2519              MOVS     r5,#0x19
;;;650    		
;;;651    		key_loc = get_id_index( SGhListCDC, dlen);
00001c  4629              MOV      r1,r5
00001e  4819              LDR      r0,|L2.132|
000020  f7fffffe          BL       get_id_index
000024  4604              MOV      r4,r0
;;;652    		
;;;653    		if( *key_loc == 0x194 )
000026  6820              LDR      r0,[r4,#0]
000028  f5b07fca          CMP      r0,#0x194
00002c  d104              BNE      |L2.56|
;;;654    			
;;;655    		   SGhListCDC[11].focusType = 1;
00002e  2101              MOVS     r1,#1
000030  4814              LDR      r0,|L2.132|
000032  f8c0131c          STR      r1,[r0,#0x31c]
000036  e022              B        |L2.126|
                  |L2.56|
;;;656    			
;;;657    		else
;;;658    		{
;;;659    			memset( displayStr, '\0', sizeof( displayStr));
000038  2114              MOVS     r1,#0x14
00003a  4813              LDR      r0,|L2.136|
00003c  f7fffffe          BL       __aeabi_memclr
;;;660    			
;;;661    			SGhListCDC[*(key_loc + 1)].d_BKColor = 0x00F0FFFF;
000040  4812              LDR      r0,|L2.140|
000042  6861              LDR      r1,[r4,#4]
000044  eb0101c1          ADD      r1,r1,r1,LSL #3
000048  4a0e              LDR      r2,|L2.132|
00004a  eb0201c1          ADD      r1,r2,r1,LSL #3
00004e  6388              STR      r0,[r1,#0x38]
;;;662    			
;;;663    			strcpy( SGhListCDC[*(key_loc + 1)].f_SName, "");
000050  6860              LDR      r0,[r4,#4]
000052  eb0000c0          ADD      r0,r0,r0,LSL #3
000056  4611              MOV      r1,r2
000058  eb0100c0          ADD      r0,r1,r0,LSL #3
00005c  a10c              ADR      r1,|L2.144|
00005e  7809              LDRB     r1,[r1,#0]
000060  7301              STRB     r1,[r0,#0xc]
;;;664    			
;;;665    			strcpy( SGhListCDC[*(key_loc + 1)].f_EName, "");
000062  6860              LDR      r0,[r4,#4]
000064  eb0000c0          ADD      r0,r0,r0,LSL #3
000068  4611              MOV      r1,r2
00006a  eb0100c0          ADD      r0,r1,r0,LSL #3
00006e  a108              ADR      r1,|L2.144|
000070  7809              LDRB     r1,[r1,#0]
000072  f8801020          STRB     r1,[r0,#0x20]
;;;666    			
;;;667    			WM_InvalidateWindow(cdchargeWin);
000076  4807              LDR      r0,|L2.148|
000078  6800              LDR      r0,[r0,#0]  ; cdchargeWin
00007a  f7fffffe          BL       WM_InvalidateWindow
                  |L2.126|
;;;668    		}
;;;669    	}
;;;670    
;;;671    }
00007e  bd70              POP      {r4-r6,pc}
;;;672    
                          ENDP

                  |L2.128|
                          DCD      FLAG_INPUTAUTH
                  |L2.132|
                          DCD      SGhListCDC
                  |L2.136|
                          DCD      displayStr
                  |L2.140|
                          DCD      0x00f0ffff
                  |L2.144|
000090  00                DCB      0
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
                  |L2.148|
                          DCD      cdchargeWin

                          AREA ||i.Cdc_value_correct||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  Cdc_value_correct PROC
;;;708    
;;;709    void Cdc_value_correct( ){
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  ed2d8b04          VPUSH    {d8-d9}
000008  b08b              SUB      sp,sp,#0x2c
;;;710    	
;;;711    	int dlen = 0, flen = 0, i = 0, NUM = 0, flag_null = 0; //是否为最小值
00000a  f04f0b00          MOV      r11,#0
00000e  2000              MOVS     r0,#0
000010  900a              STR      r0,[sp,#0x28]
000012  2500              MOVS     r5,#0
000014  2700              MOVS     r7,#0
000016  4680              MOV      r8,r0
;;;712    	int *key_loc;
;;;713    	int temp_int, temp, dot_loc = 1024;  //是否具有小数点  1024---无   其余---小数点位置
000018  f44f6680          MOV      r6,#0x400
;;;714    	char temp_char[10];
;;;715    	float temp_float;
;;;716    	char int_char[10], float_char[10];
;;;717    	vu8 flag_dot = 0;
00001c  9000              STR      r0,[sp,#0]
;;;718    	
;;;719    	if( !FLAG_INPUTAUTH ){
00001e  48fe              LDR      r0,|L3.1048|
000020  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000022  2800              CMP      r0,#0
000024  d10f              BNE      |L3.70|
;;;720    		
;;;721    		dlen = sizeof( SGhListCDC ) / sizeof( SGhListCDC[0] );
000026  f04f0b19          MOV      r11,#0x19
;;;722    		
;;;723    		key_loc = get_id_index( SGhListCDC, dlen);
00002a  4659              MOV      r1,r11
00002c  48fb              LDR      r0,|L3.1052|
00002e  f7fffffe          BL       get_id_index
000032  4682              MOV      r10,r0
;;;724    		
;;;725    		if( *key_loc == 0x194 )
000034  f8da0000          LDR      r0,[r10,#0]
000038  f5b07fca          CMP      r0,#0x194
00003c  d104              BNE      |L3.72|
;;;726    			
;;;727    		   SGhListCDC[11].focusType = 1;	
00003e  2101              MOVS     r1,#1
000040  48f6              LDR      r0,|L3.1052|
000042  f8c0131c          STR      r1,[r0,#0x31c]
                  |L3.70|
000046  e3f4              B        |L3.2098|
                  |L3.72|
;;;728    		
;;;729    		else
;;;730    		{	
;;;731    		
;;;732    			temp = *(key_loc + 1);
000048  f8da9004          LDR      r9,[r10,#4]
;;;733    			
;;;734    			strcpy( displayStr , SGhListCDC[temp].f_EName );
00004c  eb0900c9          ADD      r0,r9,r9,LSL #3
000050  4af2              LDR      r2,|L3.1052|
000052  eb0200c0          ADD      r0,r2,r0,LSL #3
000056  f1000120          ADD      r1,r0,#0x20
00005a  48f1              LDR      r0,|L3.1056|
00005c  f7fffffe          BL       strcpy
;;;735    			
;;;736    			if( (displayStr[0] == '\0' || strlen(displayStr) == 0) && SGhListCDC[temp].t_Type == T_THref ){
000060  48ef              LDR      r0,|L3.1056|
000062  7800              LDRB     r0,[r0,#0]  ; displayStr
000064  b118              CBZ      r0,|L3.110|
000066  48ee              LDR      r0,|L3.1056|
000068  f7fffffe          BL       strlen
00006c  b940              CBNZ     r0,|L3.128|
                  |L3.110|
00006e  eb0900c9          ADD      r0,r9,r9,LSL #3
000072  49ea              LDR      r1,|L3.1052|
000074  eb0100c0          ADD      r0,r1,r0,LSL #3
000078  6880              LDR      r0,[r0,#8]
00007a  2801              CMP      r0,#1
00007c  d100              BNE      |L3.128|
;;;737    				
;;;738    				flag_null = 1;
00007e  4680              MOV      r8,r0
                  |L3.128|
;;;739    			}
;;;740    			for( i = 0; i < strlen(displayStr); i++  ){  
000080  2500              MOVS     r5,#0
000082  e005              B        |L3.144|
                  |L3.132|
;;;741    			
;;;742    				if( displayStr[i] == 0x2e ){		
000084  48e6              LDR      r0,|L3.1056|
000086  5d40              LDRB     r0,[r0,r5]
000088  282e              CMP      r0,#0x2e
00008a  d100              BNE      |L3.142|
;;;743    				
;;;744    					dot_loc = i;			//记录小数点位置
00008c  462e              MOV      r6,r5
                  |L3.142|
00008e  1c6d              ADDS     r5,r5,#1              ;740
                  |L3.144|
000090  48e3              LDR      r0,|L3.1056|
000092  f7fffffe          BL       strlen
000096  42a8              CMP      r0,r5                 ;740
000098  d8f4              BHI      |L3.132|
;;;745    				}			
;;;746    			}
;;;747    			
;;;748    			temp_int = atoi(displayStr);   //转为整数
00009a  48e1              LDR      r0,|L3.1056|
00009c  f7fffffe          BL       atoi
0000a0  4604              MOV      r4,r0
;;;749    			
;;;750    			temp_float = atof(displayStr);  //转为浮点数
0000a2  48df              LDR      r0,|L3.1056|
0000a4  f7fffffe          BL       __hardfp_atof
0000a8  eeb09a40          VMOV.F32 s18,s0
0000ac  eef09a60          VMOV.F32 s19,s1
0000b0  ec510b19          VMOV     r0,r1,d9
0000b4  f7fffffe          BL       __aeabi_d2f
0000b8  ee080a10          VMOV     s16,r0
;;;751    			
;;;752    			memset( temp_char, '\0', sizeof(temp_char));
0000bc  2000              MOVS     r0,#0
0000be  9007              STR      r0,[sp,#0x1c]
0000c0  9008              STR      r0,[sp,#0x20]
0000c2  9009              STR      r0,[sp,#0x24]
;;;753    			
;;;754    			memset( int_char, '\0', sizeof(int_char));
0000c4  9004              STR      r0,[sp,#0x10]
0000c6  9005              STR      r0,[sp,#0x14]
0000c8  9006              STR      r0,[sp,#0x18]
;;;755    			
;;;756    			memset( float_char, '\0', sizeof(float_char));
0000ca  9001              STR      r0,[sp,#4]
0000cc  9002              STR      r0,[sp,#8]
0000ce  9003              STR      r0,[sp,#0xc]
;;;757    			
;;;758    			sprintf(int_char, "%d", temp_int);
0000d0  4622              MOV      r2,r4
0000d2  a1d4              ADR      r1,|L3.1060|
0000d4  a804              ADD      r0,sp,#0x10
0000d6  f7fffffe          BL       __2sprintf
;;;759    			
;;;760    			sprintf(float_char, "%f", temp_float);
0000da  ee180a10          VMOV     r0,s16
0000de  f7fffffe          BL       __aeabi_f2d
0000e2  ec410b19          VMOV     d9,r0,r1
0000e6  ec532b19          VMOV     r2,r3,d9
0000ea  a1cf              ADR      r1,|L3.1064|
0000ec  a801              ADD      r0,sp,#4
0000ee  f7fffffe          BL       __2sprintf
;;;761    			
;;;762    			for( i = 0; i < strlen(displayStr); i++  ){ 
0000f2  2500              MOVS     r5,#0
0000f4  e007              B        |L3.262|
                  |L3.246|
;;;763    			
;;;764    				if( displayStr[i] == 0x2e ){	
0000f6  48ca              LDR      r0,|L3.1056|
0000f8  5d40              LDRB     r0,[r0,r5]
0000fa  282e              CMP      r0,#0x2e
0000fc  d102              BNE      |L3.260|
;;;765    				
;;;766    					flag_dot = 1;	
0000fe  2001              MOVS     r0,#1
000100  9000              STR      r0,[sp,#0]
;;;767    					
;;;768    					break;
000102  e005              B        |L3.272|
                  |L3.260|
000104  1c6d              ADDS     r5,r5,#1              ;762
                  |L3.262|
000106  48c6              LDR      r0,|L3.1056|
000108  f7fffffe          BL       strlen
00010c  42a8              CMP      r0,r5                 ;762
00010e  d8f2              BHI      |L3.246|
                  |L3.272|
000110  bf00              NOP      
;;;769    				}			
;;;770    			}	
;;;771    			for( i = 0; i < strlen(float_char); i++  ){  
000112  2500              MOVS     r5,#0
000114  e006              B        |L3.292|
                  |L3.278|
;;;772    				if( float_char[i] == 0x2e ){	
000116  a801              ADD      r0,sp,#4
000118  5d40              LDRB     r0,[r0,r5]
00011a  282e              CMP      r0,#0x2e
00011c  d101              BNE      |L3.290|
;;;773    				
;;;774    					dot_loc = i;	
00011e  462e              MOV      r6,r5
;;;775    					
;;;776    					break;
000120  e005              B        |L3.302|
                  |L3.290|
000122  1c6d              ADDS     r5,r5,#1              ;771
                  |L3.292|
000124  a801              ADD      r0,sp,#4              ;771
000126  f7fffffe          BL       strlen
00012a  42a8              CMP      r0,r5                 ;771
00012c  d8f3              BHI      |L3.278|
                  |L3.302|
00012e  bf00              NOP      
;;;777    				}			
;;;778    			}
;;;779    			
;;;780    			switch( SGhListCDC[temp].d_ID ){
000130  eb0900c9          ADD      r0,r9,r9,LSL #3
000134  49b9              LDR      r1,|L3.1052|
000136  f8510030          LDR      r0,[r1,r0,LSL #3]
00013a  2811              CMP      r0,#0x11
00013c  d07b              BEQ      |L3.566|
00013e  dc06              BGT      |L3.334|
000140  280b              CMP      r0,#0xb
000142  d00b              BEQ      |L3.348|
000144  280d              CMP      r0,#0xd
000146  d077              BEQ      |L3.568|
000148  280f              CMP      r0,#0xf
                  |L3.330|
00014a  d129              BNE      |L3.416|
00014c  e18e              B        |L3.1132|
                  |L3.334|
00014e  2814              CMP      r0,#0x14
000150  d073              BEQ      |L3.570|
000152  2816              CMP      r0,#0x16
000154  d072              BEQ      |L3.572|
000156  2818              CMP      r0,#0x18
000158  d1f7              BNE      |L3.330|
00015a  e3fc              B        |L3.2390|
                  |L3.348|
;;;781    				
;;;782    				case 11:   
;;;783    				//====================================输出电压======================================
;;;784    					if( flag_null ){  
00015c  f1b80f00          CMP      r8,#0
000160  d00c              BEQ      |L3.380|
;;;785    					
;;;786    						strcpy( displayStr, "0.000"  );
000162  a1b2              ADR      r1,|L3.1068|
000164  48ae              LDR      r0,|L3.1056|
000166  f7fffffe          BL       strcpy
;;;787    						
;;;788    						CLists.CDC_OutPut_V = 0 * 1000;
00016a  2000              MOVS     r0,#0
00016c  49b1              LDR      r1,|L3.1076|
00016e  f8a100e6          STRH     r0,[r1,#0xe6]
;;;789    						
;;;790    						CLists.CSET_Voltage = CLists.CDC_OutPut_V;
000172  4608              MOV      r0,r1
000174  f8b000e6          LDRH     r0,[r0,#0xe6]  ; CLists
000178  6088              STR      r0,[r1,#8]  ; CLists
00017a  e0a7              B        |L3.716|
                  |L3.380|
;;;791    						
;;;792    					}else{
;;;793    						
;;;794    						if( !flag_dot ){      	
00017c  f89d0000          LDRB     r0,[sp,#0]
000180  bbe8              CBNZ     r0,|L3.510|
;;;795    							
;;;796    							if( temp_int > 30  ){   //最大值
000182  2c1e              CMP      r4,#0x1e
000184  dd0d              BLE      |L3.418|
;;;797    							
;;;798    								strcpy( displayStr, "30.000"  );
000186  a1ac              ADR      r1,|L3.1080|
000188  48a5              LDR      r0,|L3.1056|
00018a  f7fffffe          BL       strcpy
;;;799    								
;;;800    								CLists.CDC_OutPut_V = 30 * 1000;
00018e  f2475030          MOV      r0,#0x7530
000192  49a8              LDR      r1,|L3.1076|
000194  f8a100e6          STRH     r0,[r1,#0xe6]
;;;801    								
;;;802    								CLists.CSET_Voltage = CLists.CDC_OutPut_V;
000198  4608              MOV      r0,r1
00019a  f8b000e6          LDRH     r0,[r0,#0xe6]  ; CLists
00019e  6088              STR      r0,[r1,#8]  ; CLists
                  |L3.416|
;;;803    									
;;;804    								break;
0001a0  e214              B        |L3.1484|
                  |L3.418|
;;;805    							}
;;;806    							if( temp_int <= 0 ){    //最小值
0001a2  2c00              CMP      r4,#0
0001a4  dc0c              BGT      |L3.448|
;;;807    							
;;;808    								strcpy( displayStr, "0.000"  );
0001a6  a1a1              ADR      r1,|L3.1068|
0001a8  489d              LDR      r0,|L3.1056|
0001aa  f7fffffe          BL       strcpy
;;;809    								
;;;810    								CLists.CDC_OutPut_V = 0 * 1000;
0001ae  2000              MOVS     r0,#0
0001b0  49a0              LDR      r1,|L3.1076|
0001b2  f8a100e6          STRH     r0,[r1,#0xe6]
;;;811    								
;;;812    								CLists.CSET_Voltage = CLists.CDC_OutPut_V;
0001b6  4608              MOV      r0,r1
0001b8  f8b000e6          LDRH     r0,[r0,#0xe6]  ; CLists
0001bc  6088              STR      r0,[r1,#8]  ; CLists
;;;813    								
;;;814    								break;
0001be  e7ef              B        |L3.416|
                  |L3.448|
;;;815    							}						
;;;816    							if( strlen(int_char) > 2){
0001c0  a804              ADD      r0,sp,#0x10
0001c2  f7fffffe          BL       strlen
0001c6  2802              CMP      r0,#2
0001c8  d904              BLS      |L3.468|
;;;817    								
;;;818    								strcat( int_char, ".0");
0001ca  a19d              ADR      r1,|L3.1088|
0001cc  a804              ADD      r0,sp,#0x10
0001ce  f7fffffe          BL       strcat
0001d2  e003              B        |L3.476|
                  |L3.468|
;;;819    								
;;;820    							}else{
;;;821    								
;;;822    								strcat( int_char, ".000");
0001d4  a19b              ADR      r1,|L3.1092|
0001d6  a804              ADD      r0,sp,#0x10
0001d8  f7fffffe          BL       strcat
                  |L3.476|
;;;823    								
;;;824    							}
;;;825    							strcpy( displayStr, int_char );
0001dc  a904              ADD      r1,sp,#0x10
0001de  4890              LDR      r0,|L3.1056|
0001e0  f7fffffe          BL       strcpy
;;;826    							
;;;827    							CLists.CDC_OutPut_V = temp_int * 1000;
0001e4  eb040044          ADD      r0,r4,r4,LSL #1
0001e8  ebc010c4          RSB      r0,r0,r4,LSL #7
0001ec  f64f71ff          MOV      r1,#0xffff
0001f0  ea0100c0          AND      r0,r1,r0,LSL #3
0001f4  498f              LDR      r1,|L3.1076|
0001f6  f8a100e6          STRH     r0,[r1,#0xe6]
;;;828    							
;;;829    							CLists.CSET_Voltage = CLists.CDC_OutPut_V;
0001fa  4608              MOV      r0,r1
0001fc  e000              B        |L3.512|
                  |L3.510|
0001fe  e003              B        |L3.520|
                  |L3.512|
000200  f8b000e6          LDRH     r0,[r0,#0xe6]  ; CLists
000204  6088              STR      r0,[r1,#8]  ; CLists
000206  e061              B        |L3.716|
                  |L3.520|
;;;830    							
;;;831    						}else{
;;;832    
;;;833    							if( temp_float - 30 > 0 ){   //最大值
000208  eeb30a0e          VMOV.F32 s0,#30.00000000
00020c  ee380a40          VSUB.F32 s0,s16,s0
000210  eeb50ac0          VCMPE.F32 s0,#0.0
000214  eef1fa10          VMRS     APSR_nzcv,FPSCR
000218  dd11              BLE      |L3.574|
;;;834    							
;;;835    								strcpy( displayStr, "30.000"  );
00021a  a187              ADR      r1,|L3.1080|
00021c  4880              LDR      r0,|L3.1056|
00021e  f7fffffe          BL       strcpy
;;;836    								
;;;837    								CLists.CDC_OutPut_V = 30 * 1000;
000222  f2475030          MOV      r0,#0x7530
000226  4983              LDR      r1,|L3.1076|
000228  f8a100e6          STRH     r0,[r1,#0xe6]
;;;838    								
;;;839    								CLists.CSET_Voltage = CLists.CDC_OutPut_V;
00022c  4608              MOV      r0,r1
00022e  f8b000e6          LDRH     r0,[r0,#0xe6]  ; CLists
000232  6088              STR      r0,[r1,#8]  ; CLists
;;;840    								
;;;841    								break;
000234  e3fb              B        |L3.2606|
                  |L3.566|
000236  e1ad              B        |L3.1428|
                  |L3.568|
000238  e049              B        |L3.718|
                  |L3.570|
00023a  e244              B        |L3.1734|
                  |L3.572|
00023c  e2fe              B        |L3.2108|
                  |L3.574|
;;;842    							}
;;;843    							
;;;844    							if( temp_float <= 0 ){    //最小值
00023e  eeb58ac0          VCMPE.F32 s16,#0.0
000242  eef1fa10          VMRS     APSR_nzcv,FPSCR
000246  d813              BHI      |L3.624|
;;;845    							
;;;846    								strcpy( displayStr, "0.000"  );
000248  a178              ADR      r1,|L3.1068|
00024a  4875              LDR      r0,|L3.1056|
00024c  f7fffffe          BL       strcpy
;;;847    								
;;;848    								CLists.CDC_OutPut_V = temp_int * 1000;
000250  eb040044          ADD      r0,r4,r4,LSL #1
000254  ebc010c4          RSB      r0,r0,r4,LSL #7
000258  f64f71ff          MOV      r1,#0xffff
00025c  ea0100c0          AND      r0,r1,r0,LSL #3
000260  4974              LDR      r1,|L3.1076|
000262  f8a100e6          STRH     r0,[r1,#0xe6]
;;;849    								
;;;850    								CLists.CSET_Voltage = CLists.CDC_OutPut_V;
000266  4608              MOV      r0,r1
000268  f8b000e6          LDRH     r0,[r0,#0xe6]  ; CLists
00026c  6088              STR      r0,[r1,#8]  ; CLists
;;;851    									
;;;852    								break;
00026e  e3de              B        |L3.2606|
                  |L3.624|
;;;853    							}
;;;854    							NUM = strlen(float_char) - dot_loc - 1;
000270  a801              ADD      r0,sp,#4
000272  f7fffffe          BL       strlen
000276  1b80              SUBS     r0,r0,r6
000278  1e47              SUBS     r7,r0,#1
;;;855    							
;;;856    							for( i = 0; i < 3 - NUM; i++ ){
00027a  2500              MOVS     r5,#0
00027c  e004              B        |L3.648|
                  |L3.638|
;;;857    								
;;;858    								strcat( float_char, "0");
00027e  a16c              ADR      r1,|L3.1072|
000280  a801              ADD      r0,sp,#4
000282  f7fffffe          BL       strcat
000286  1c6d              ADDS     r5,r5,#1              ;856
                  |L3.648|
000288  f1c70003          RSB      r0,r7,#3              ;856
00028c  42a8              CMP      r0,r5                 ;856
00028e  dcf6              BGT      |L3.638|
;;;859    							}	
;;;860    							
;;;861    							NUM = ( dot_loc > 1 ) ? 6 : 5;
000290  2e01              CMP      r6,#1
000292  dd01              BLE      |L3.664|
000294  2006              MOVS     r0,#6
000296  e000              B        |L3.666|
                  |L3.664|
000298  2005              MOVS     r0,#5
                  |L3.666|
00029a  4607              MOV      r7,r0
;;;862    							
;;;863    							strncpy( int_char, float_char, NUM );
00029c  463a              MOV      r2,r7
00029e  a901              ADD      r1,sp,#4
0002a0  a804              ADD      r0,sp,#0x10
0002a2  f7fffffe          BL       strncpy
;;;864    							
;;;865    							strcpy( displayStr, int_char );	
0002a6  a904              ADD      r1,sp,#0x10
0002a8  485d              LDR      r0,|L3.1056|
0002aa  f7fffffe          BL       strcpy
;;;866    							
;;;867    							CLists.CDC_OutPut_V = temp_float * 1000;	
0002ae  ed9f0a67          VLDR     s0,|L3.1100|
0002b2  ee280a00          VMUL.F32 s0,s16,s0
0002b6  eebc0ac0          VCVT.U32.F32 s0,s0
0002ba  ee100a10          VMOV     r0,s0
0002be  495d              LDR      r1,|L3.1076|
0002c0  f8a100e6          STRH     r0,[r1,#0xe6]
;;;868    
;;;869    							CLists.CSET_Voltage = CLists.CDC_OutPut_V;
0002c4  4608              MOV      r0,r1
0002c6  f8b000e6          LDRH     r0,[r0,#0xe6]  ; CLists
0002ca  6088              STR      r0,[r1,#8]  ; CLists
                  |L3.716|
;;;870    						
;;;871    						}
;;;872    					}
;;;873    				
;;;874    				break;
0002cc  e3af              B        |L3.2606|
                  |L3.718|
;;;875    				
;;;876    				case 13:
;;;877    				//====================================限制电流======================================
;;;878    					if( flag_null ){   
0002ce  f1b80f00          CMP      r8,#0
0002d2  d00c              BEQ      |L3.750|
;;;879    					
;;;880    						strcpy( displayStr, "0.000"  );
0002d4  a155              ADR      r1,|L3.1068|
0002d6  4852              LDR      r0,|L3.1056|
0002d8  f7fffffe          BL       strcpy
;;;881    						
;;;882    						CLists.CDC_Limit_C = 0 * 1000;
0002dc  2000              MOVS     r0,#0
0002de  4955              LDR      r1,|L3.1076|
0002e0  f8a100e8          STRH     r0,[r1,#0xe8]
;;;883    		 
;;;884    						CLists.CSET_Current = CLists.CDC_Limit_C;
0002e4  4608              MOV      r0,r1
0002e6  f8b000e8          LDRH     r0,[r0,#0xe8]  ; CLists
0002ea  60c8              STR      r0,[r1,#0xc]  ; CLists
0002ec  e0bd              B        |L3.1130|
                  |L3.750|
;;;885    						
;;;886    					}else{
;;;887    						
;;;888    						if( !flag_dot ){      	
0002ee  f89d0000          LDRB     r0,[sp,#0]
0002f2  bbe8              CBNZ     r0,|L3.880|
;;;889    							
;;;890    							if( temp_int > 10  ){   //最大值
0002f4  2c0a              CMP      r4,#0xa
0002f6  dd0d              BLE      |L3.788|
;;;891    							
;;;892    								strcpy( displayStr, "10.000"  );
0002f8  a155              ADR      r1,|L3.1104|
0002fa  4849              LDR      r0,|L3.1056|
0002fc  f7fffffe          BL       strcpy
;;;893    								
;;;894    								CLists.CDC_Limit_C = 10 * 1000;
000300  f2427010          MOV      r0,#0x2710
000304  494b              LDR      r1,|L3.1076|
000306  f8a100e8          STRH     r0,[r1,#0xe8]
;;;895    								
;;;896    								CLists.CSET_Current = CLists.CDC_Limit_C;
00030a  4608              MOV      r0,r1
00030c  f8b000e8          LDRH     r0,[r0,#0xe8]  ; CLists
000310  60c8              STR      r0,[r1,#0xc]  ; CLists
;;;897    								
;;;898    								break;
000312  e38c              B        |L3.2606|
                  |L3.788|
;;;899    							}
;;;900    							if( temp_int <= 0 ){    //最小值
000314  2c00              CMP      r4,#0
000316  dc0c              BGT      |L3.818|
;;;901    							
;;;902    								strcpy( displayStr, "0.000"  );
000318  a144              ADR      r1,|L3.1068|
00031a  4841              LDR      r0,|L3.1056|
00031c  f7fffffe          BL       strcpy
;;;903    								
;;;904    								CLists.CDC_Limit_C = 0 * 1000;
000320  2000              MOVS     r0,#0
000322  4944              LDR      r1,|L3.1076|
000324  f8a100e8          STRH     r0,[r1,#0xe8]
;;;905    								
;;;906    								CLists.CSET_Current = CLists.CDC_Limit_C;
000328  4608              MOV      r0,r1
00032a  f8b000e8          LDRH     r0,[r0,#0xe8]  ; CLists
00032e  60c8              STR      r0,[r1,#0xc]  ; CLists
;;;907    								
;;;908    								break;
000330  e37d              B        |L3.2606|
                  |L3.818|
;;;909    							}						
;;;910    							if( strlen(int_char) > 2){
000332  a804              ADD      r0,sp,#0x10
000334  f7fffffe          BL       strlen
000338  2802              CMP      r0,#2
00033a  d904              BLS      |L3.838|
;;;911    								
;;;912    								strcat( int_char, ".0");
00033c  a140              ADR      r1,|L3.1088|
00033e  a804              ADD      r0,sp,#0x10
000340  f7fffffe          BL       strcat
000344  e003              B        |L3.846|
                  |L3.838|
;;;913    								
;;;914    							}else{
;;;915    								
;;;916    								strcat( int_char, ".000");
000346  a13f              ADR      r1,|L3.1092|
000348  a804              ADD      r0,sp,#0x10
00034a  f7fffffe          BL       strcat
                  |L3.846|
;;;917    							}
;;;918    							strcpy( displayStr, int_char );
00034e  a904              ADD      r1,sp,#0x10
000350  4833              LDR      r0,|L3.1056|
000352  f7fffffe          BL       strcpy
;;;919    							
;;;920    							CLists.CDC_Limit_C = temp_int * 1000;
000356  eb040044          ADD      r0,r4,r4,LSL #1
00035a  ebc010c4          RSB      r0,r0,r4,LSL #7
00035e  f64f71ff          MOV      r1,#0xffff
000362  ea0100c0          AND      r0,r1,r0,LSL #3
000366  4933              LDR      r1,|L3.1076|
000368  f8a100e8          STRH     r0,[r1,#0xe8]
;;;921    							
;;;922    							CLists.CSET_Current = CLists.CDC_Limit_C;
00036c  4608              MOV      r0,r1
00036e  e000              B        |L3.882|
                  |L3.880|
000370  e003              B        |L3.890|
                  |L3.882|
000372  f8b000e8          LDRH     r0,[r0,#0xe8]  ; CLists
000376  60c8              STR      r0,[r1,#0xc]  ; CLists
000378  e077              B        |L3.1130|
                  |L3.890|
;;;923    							
;;;924    						}else{
;;;925    
;;;926    							if( temp_float - 10 > 0 ){   //最大值
00037a  eeb20a04          VMOV.F32 s0,#10.00000000
00037e  ee380a40          VSUB.F32 s0,s16,s0
000382  eeb50ac0          VCMPE.F32 s0,#0.0
000386  eef1fa10          VMRS     APSR_nzcv,FPSCR
00038a  dd0d              BLE      |L3.936|
;;;927    							
;;;928    								strcpy( displayStr, "10.000"  );
00038c  a130              ADR      r1,|L3.1104|
00038e  4824              LDR      r0,|L3.1056|
000390  f7fffffe          BL       strcpy
;;;929    								
;;;930    								CLists.CDC_Limit_C = 10 * 1000;
000394  f2427010          MOV      r0,#0x2710
000398  4926              LDR      r1,|L3.1076|
00039a  f8a100e8          STRH     r0,[r1,#0xe8]
;;;931    								
;;;932    								CLists.CSET_Current = CLists.CDC_Limit_C;
00039e  4608              MOV      r0,r1
0003a0  f8b000e8          LDRH     r0,[r0,#0xe8]  ; CLists
0003a4  60c8              STR      r0,[r1,#0xc]  ; CLists
;;;933    								
;;;934    								break;
0003a6  e342              B        |L3.2606|
                  |L3.936|
;;;935    							}
;;;936    							
;;;937    							if( temp_float <= 0 ){    //最小值
0003a8  eeb58ac0          VCMPE.F32 s16,#0.0
0003ac  eef1fa10          VMRS     APSR_nzcv,FPSCR
0003b0  d80c              BHI      |L3.972|
;;;938    							
;;;939    								strcpy( displayStr, "0.000"  );
0003b2  a11e              ADR      r1,|L3.1068|
0003b4  481a              LDR      r0,|L3.1056|
0003b6  f7fffffe          BL       strcpy
;;;940    								
;;;941    								CLists.CDC_Limit_C = 0 * 1000;
0003ba  2000              MOVS     r0,#0
0003bc  491d              LDR      r1,|L3.1076|
0003be  f8a100e8          STRH     r0,[r1,#0xe8]
;;;942    			
;;;943    								CLists.CSET_Current = CLists.CDC_Limit_C;
0003c2  4608              MOV      r0,r1
0003c4  f8b000e8          LDRH     r0,[r0,#0xe8]  ; CLists
0003c8  60c8              STR      r0,[r1,#0xc]  ; CLists
;;;944    								
;;;945    								break;
0003ca  e330              B        |L3.2606|
                  |L3.972|
;;;946    							}
;;;947    							NUM = strlen(float_char) - dot_loc - 1;
0003cc  a801              ADD      r0,sp,#4
0003ce  f7fffffe          BL       strlen
0003d2  1b80              SUBS     r0,r0,r6
0003d4  1e47              SUBS     r7,r0,#1
;;;948    							
;;;949    							for( i = 0; i < 3 - NUM; i++ ){
0003d6  2500              MOVS     r5,#0
0003d8  e004              B        |L3.996|
                  |L3.986|
;;;950    								
;;;951    								strcat( float_char, "0");
0003da  a115              ADR      r1,|L3.1072|
0003dc  a801              ADD      r0,sp,#4
0003de  f7fffffe          BL       strcat
0003e2  1c6d              ADDS     r5,r5,#1              ;949
                  |L3.996|
0003e4  f1c70003          RSB      r0,r7,#3              ;949
0003e8  42a8              CMP      r0,r5                 ;949
0003ea  dcf6              BGT      |L3.986|
;;;952    							}	
;;;953    							
;;;954    							NUM = ( dot_loc > 1 ) ? 6 : 5;
0003ec  2e01              CMP      r6,#1
0003ee  dd01              BLE      |L3.1012|
0003f0  2006              MOVS     r0,#6
0003f2  e000              B        |L3.1014|
                  |L3.1012|
0003f4  2005              MOVS     r0,#5
                  |L3.1014|
0003f6  4607              MOV      r7,r0
;;;955    							
;;;956    							strncpy( int_char, float_char, NUM );
0003f8  463a              MOV      r2,r7
0003fa  a901              ADD      r1,sp,#4
0003fc  a804              ADD      r0,sp,#0x10
0003fe  f7fffffe          BL       strncpy
;;;957    							
;;;958    							strcpy( displayStr, int_char );	
000402  a904              ADD      r1,sp,#0x10
000404  4806              LDR      r0,|L3.1056|
000406  f7fffffe          BL       strcpy
;;;959    							
;;;960    							CLists.CDC_Limit_C = temp_float * 1000;
00040a  ed9f0a10          VLDR     s0,|L3.1100|
00040e  ee280a00          VMUL.F32 s0,s16,s0
000412  eebc0ac0          VCVT.U32.F32 s0,s0
000416  e01f              B        |L3.1112|
                  |L3.1048|
                          DCD      FLAG_INPUTAUTH
                  |L3.1052|
                          DCD      SGhListCDC
                  |L3.1056|
                          DCD      displayStr
                  |L3.1060|
000424  256400            DCB      "%d",0
000427  00                DCB      0
                  |L3.1064|
000428  256600            DCB      "%f",0
00042b  00                DCB      0
                  |L3.1068|
00042c  302e3030          DCB      "0.00"
                  |L3.1072|
000430  3000              DCB      "0",0
000432  00                DCB      0
000433  00                DCB      0
                  |L3.1076|
                          DCD      CLists
                  |L3.1080|
000438  33302e30          DCB      "30.000",0
00043c  303000  
00043f  00                DCB      0
                  |L3.1088|
000440  2e3000            DCB      ".0",0
000443  00                DCB      0
                  |L3.1092|
000444  2e303030          DCB      ".000",0
000448  00      
000449  00                DCB      0
00044a  00                DCB      0
00044b  00                DCB      0
                  |L3.1100|
00044c  447a0000          DCFS     0x447a0000 ; 1000
                  |L3.1104|
000450  31302e30          DCB      "10.000",0
000454  303000  
000457  00                DCB      0
                  |L3.1112|
000458  ee100a10          VMOV     r0,s0
00045c  49f5              LDR      r1,|L3.2100|
00045e  f8a100e8          STRH     r0,[r1,#0xe8]
;;;961    							
;;;962    							CLists.CSET_Current = CLists.CDC_Limit_C;
000462  4608              MOV      r0,r1
000464  f8b000e8          LDRH     r0,[r0,#0xe8]  ; CLists
000468  60c8              STR      r0,[r1,#0xc]  ; CLists
                  |L3.1130|
;;;963    						}
;;;964    					}
;;;965    				
;;;966    				break;	
00046a  e2e0              B        |L3.2606|
                  |L3.1132|
;;;967    				
;;;968    				case 15:
;;;969    				//====================================截止电压======================================
;;;970    					if( flag_null ){   
00046c  f1b80f00          CMP      r8,#0
000470  d009              BEQ      |L3.1158|
;;;971    					
;;;972    						strcpy( displayStr, "0.000"  );
000472  f2af0148          ADR      r1,|L3.1068|
000476  48f0              LDR      r0,|L3.2104|
000478  f7fffffe          BL       strcpy
;;;973    						
;;;974    						CLists.CDC_Ccutoff_V = 0 * 1000;
00047c  2000              MOVS     r0,#0
00047e  49ed              LDR      r1,|L3.2100|
000480  f8c100ec          STR      r0,[r1,#0xec]  ; CLists
000484  e085              B        |L3.1426|
                  |L3.1158|
;;;975    						
;;;976    					}else{
;;;977    						if( !flag_dot ){  
000486  f89d0000          LDRB     r0,[sp,#0]
00048a  bb98              CBNZ     r0,|L3.1268|
;;;978    							
;;;979    							if( temp_int > 30  ){   //最大值
00048c  2c1e              CMP      r4,#0x1e
00048e  dd0a              BLE      |L3.1190|
;;;980    							
;;;981    								strcpy( displayStr, "30.000"  );
000490  f2af015c          ADR      r1,|L3.1080|
000494  48e8              LDR      r0,|L3.2104|
000496  f7fffffe          BL       strcpy
;;;982    								
;;;983    								CLists.CDC_Ccutoff_V = 30 * 1000;
00049a  f2475030          MOV      r0,#0x7530
00049e  49e5              LDR      r1,|L3.2100|
0004a0  f8c100ec          STR      r0,[r1,#0xec]  ; CLists
;;;984    								
;;;985    								break;
0004a4  e2c3              B        |L3.2606|
                  |L3.1190|
;;;986    							}
;;;987    							if( temp_int <= 0 ){    //最小值
0004a6  2c00              CMP      r4,#0
0004a8  dc09              BGT      |L3.1214|
;;;988    							
;;;989    								strcpy( displayStr, "0.000"  );
0004aa  f2af0180          ADR      r1,|L3.1068|
0004ae  48e2              LDR      r0,|L3.2104|
0004b0  f7fffffe          BL       strcpy
;;;990    								
;;;991    								CLists.CDC_Ccutoff_V = 0 * 1000;
0004b4  2000              MOVS     r0,#0
0004b6  49df              LDR      r1,|L3.2100|
0004b8  f8c100ec          STR      r0,[r1,#0xec]  ; CLists
;;;992    								
;;;993    								break;
0004bc  e2b7              B        |L3.2606|
                  |L3.1214|
;;;994    							}						
;;;995    							if( strlen(int_char) > 2){
0004be  a804              ADD      r0,sp,#0x10
0004c0  f7fffffe          BL       strlen
0004c4  2802              CMP      r0,#2
0004c6  d905              BLS      |L3.1236|
;;;996    								
;;;997    								strcat( int_char, ".0");
0004c8  f2af018c          ADR      r1,|L3.1088|
0004cc  a804              ADD      r0,sp,#0x10
0004ce  f7fffffe          BL       strcat
0004d2  e004              B        |L3.1246|
                  |L3.1236|
;;;998    								
;;;999    							}else{
;;;1000   								
;;;1001   								strcat( int_char, ".000");
0004d4  f2af0194          ADR      r1,|L3.1092|
0004d8  a804              ADD      r0,sp,#0x10
0004da  f7fffffe          BL       strcat
                  |L3.1246|
;;;1002   							}
;;;1003   							
;;;1004   							strcpy( displayStr, int_char );
0004de  a904              ADD      r1,sp,#0x10
0004e0  48d5              LDR      r0,|L3.2104|
0004e2  f7fffffe          BL       strcpy
;;;1005   							
;;;1006   							CLists.CDC_Ccutoff_V = temp_int * 1000;
0004e6  f44f707a          MOV      r0,#0x3e8
0004ea  4360              MULS     r0,r4,r0
0004ec  49d1              LDR      r1,|L3.2100|
0004ee  f8c100ec          STR      r0,[r1,#0xec]  ; CLists
0004f2  e04e              B        |L3.1426|
                  |L3.1268|
0004f4  e7ff              B        |L3.1270|
                  |L3.1270|
;;;1007   							
;;;1008   						}else{
;;;1009   
;;;1010   							if( temp_float - 30 > 0 ){   //最大值
0004f6  eeb30a0e          VMOV.F32 s0,#30.00000000
0004fa  ee380a40          VSUB.F32 s0,s16,s0
0004fe  eeb50ac0          VCMPE.F32 s0,#0.0
000502  eef1fa10          VMRS     APSR_nzcv,FPSCR
000506  dd0a              BLE      |L3.1310|
;;;1011   							
;;;1012   								strcpy( displayStr, "30.000"  );
000508  f2af01d4          ADR      r1,|L3.1080|
00050c  48ca              LDR      r0,|L3.2104|
00050e  f7fffffe          BL       strcpy
;;;1013   								
;;;1014   								CLists.CDC_Ccutoff_V = 30 * 1000;
000512  f2475030          MOV      r0,#0x7530
000516  49c7              LDR      r1,|L3.2100|
000518  f8c100ec          STR      r0,[r1,#0xec]  ; CLists
;;;1015   								
;;;1016   								break;
00051c  e287              B        |L3.2606|
                  |L3.1310|
;;;1017   							}
;;;1018   							
;;;1019   							if( temp_float <= 0 ){    //最小值
00051e  eeb58ac0          VCMPE.F32 s16,#0.0
000522  eef1fa10          VMRS     APSR_nzcv,FPSCR
000526  d809              BHI      |L3.1340|
;;;1020   							
;;;1021   								strcpy( displayStr, "0.000"  );
000528  f2af1100          ADR      r1,|L3.1068|
00052c  48c2              LDR      r0,|L3.2104|
00052e  f7fffffe          BL       strcpy
;;;1022   								
;;;1023   								CLists.CDC_Ccutoff_V = 0 * 1000;
000532  2000              MOVS     r0,#0
000534  49bf              LDR      r1,|L3.2100|
000536  f8c100ec          STR      r0,[r1,#0xec]  ; CLists
;;;1024   								
;;;1025   								break;
00053a  e278              B        |L3.2606|
                  |L3.1340|
;;;1026   							}
;;;1027   							NUM = strlen(float_char) - dot_loc - 1;
00053c  a801              ADD      r0,sp,#4
00053e  f7fffffe          BL       strlen
000542  1b80              SUBS     r0,r0,r6
000544  1e47              SUBS     r7,r0,#1
;;;1028   							
;;;1029   							for( i = 0; i < 3 - NUM; NUM++ ){
000546  2500              MOVS     r5,#0
000548  e005              B        |L3.1366|
                  |L3.1354|
;;;1030   								
;;;1031   								strcat( float_char, "0");
00054a  f2af111c          ADR      r1,|L3.1072|
00054e  a801              ADD      r0,sp,#4
000550  f7fffffe          BL       strcat
000554  1c7f              ADDS     r7,r7,#1              ;1029
                  |L3.1366|
000556  f1c70003          RSB      r0,r7,#3              ;1029
00055a  42a8              CMP      r0,r5                 ;1029
00055c  dcf5              BGT      |L3.1354|
;;;1032   								
;;;1033   							}	
;;;1034   							NUM = ( dot_loc > 1 ) ? 6 : 5;
00055e  2e01              CMP      r6,#1
000560  dd01              BLE      |L3.1382|
000562  2006              MOVS     r0,#6
000564  e000              B        |L3.1384|
                  |L3.1382|
000566  2005              MOVS     r0,#5
                  |L3.1384|
000568  4607              MOV      r7,r0
;;;1035   							
;;;1036   							strncpy( int_char, float_char, NUM );
00056a  463a              MOV      r2,r7
00056c  a901              ADD      r1,sp,#4
00056e  a804              ADD      r0,sp,#0x10
000570  f7fffffe          BL       strncpy
;;;1037   							
;;;1038   							strcpy( displayStr, int_char );	
000574  a904              ADD      r1,sp,#0x10
000576  48b0              LDR      r0,|L3.2104|
000578  f7fffffe          BL       strcpy
;;;1039   							
;;;1040   							CLists.CDC_Ccutoff_V = temp_float * 1000;
00057c  ed1f0a4d          VLDR     s0,|L3.1100|
000580  ee280a00          VMUL.F32 s0,s16,s0
000584  eebc0ac0          VCVT.U32.F32 s0,s0
000588  ee100a10          VMOV     r0,s0
00058c  49a9              LDR      r1,|L3.2100|
00058e  f8c100ec          STR      r0,[r1,#0xec]  ; CLists
                  |L3.1426|
;;;1041   						}
;;;1042   					}
;;;1043   				
;;;1044   				break;	
000592  e24c              B        |L3.2606|
                  |L3.1428|
;;;1045   				
;;;1046   				case 17:
;;;1047   				//====================================截止电流======================================
;;;1048   					if( flag_null ){   
000594  f1b80f00          CMP      r8,#0
000598  d009              BEQ      |L3.1454|
;;;1049   					
;;;1050   						strcpy( displayStr, "0.000"  );
00059a  f2af1170          ADR      r1,|L3.1068|
00059e  48a6              LDR      r0,|L3.2104|
0005a0  f7fffffe          BL       strcpy
;;;1051   						
;;;1052   						CLists.CDC_Ccutoff_C = 0 * 1000;
0005a4  2000              MOVS     r0,#0
0005a6  49a3              LDR      r1,|L3.2100|
0005a8  f8a100f0          STRH     r0,[r1,#0xf0]
0005ac  e08a              B        |L3.1732|
                  |L3.1454|
;;;1053   						
;;;1054   					}else{
;;;1055   						
;;;1056   						if( !flag_dot ){      	
0005ae  f89d0000          LDRB     r0,[sp,#0]
0005b2  bbc0              CBNZ     r0,|L3.1574|
;;;1057   							
;;;1058   							if( temp_int > 10  ){   //最大值
0005b4  2c0a              CMP      r4,#0xa
0005b6  dd0a              BLE      |L3.1486|
;;;1059   							
;;;1060   								strcpy( displayStr, "10.000"  );
0005b8  f2af116c          ADR      r1,|L3.1104|
0005bc  489e              LDR      r0,|L3.2104|
0005be  f7fffffe          BL       strcpy
;;;1061   								
;;;1062   								CLists.CDC_Ccutoff_C = 10 * 1000;
0005c2  f2427010          MOV      r0,#0x2710
0005c6  499b              LDR      r1,|L3.2100|
0005c8  f8a100f0          STRH     r0,[r1,#0xf0]
                  |L3.1484|
;;;1063   								
;;;1064   								break;
0005cc  e22f              B        |L3.2606|
                  |L3.1486|
;;;1065   							}
;;;1066   							if( temp_int <= 0 ){    //最小值
0005ce  2c00              CMP      r4,#0
0005d0  dc09              BGT      |L3.1510|
;;;1067   							
;;;1068   								strcpy( displayStr, "0.000"  );
0005d2  f2af11a8          ADR      r1,|L3.1068|
0005d6  4898              LDR      r0,|L3.2104|
0005d8  f7fffffe          BL       strcpy
;;;1069   								
;;;1070   								CLists.CDC_Ccutoff_C = 0 * 1000;
0005dc  2000              MOVS     r0,#0
0005de  4995              LDR      r1,|L3.2100|
0005e0  f8a100f0          STRH     r0,[r1,#0xf0]
;;;1071   								
;;;1072   								break;
0005e4  e223              B        |L3.2606|
                  |L3.1510|
;;;1073   							}						
;;;1074   							if( strlen(int_char) > 2){
0005e6  a804              ADD      r0,sp,#0x10
0005e8  f7fffffe          BL       strlen
0005ec  2802              CMP      r0,#2
0005ee  d905              BLS      |L3.1532|
;;;1075   								
;;;1076   								strcat( int_char, ".0");
0005f0  f2af11b4          ADR      r1,|L3.1088|
0005f4  a804              ADD      r0,sp,#0x10
0005f6  f7fffffe          BL       strcat
0005fa  e004              B        |L3.1542|
                  |L3.1532|
;;;1077   								
;;;1078   							}else{
;;;1079   								
;;;1080   								strcat( int_char, ".000");
0005fc  f2af11bc          ADR      r1,|L3.1092|
000600  a804              ADD      r0,sp,#0x10
000602  f7fffffe          BL       strcat
                  |L3.1542|
;;;1081   								
;;;1082   							}
;;;1083   							strcpy( displayStr, int_char );
000606  a904              ADD      r1,sp,#0x10
000608  488b              LDR      r0,|L3.2104|
00060a  f7fffffe          BL       strcpy
;;;1084   							
;;;1085   							CLists.CDC_Ccutoff_C = temp_int * 1000;
00060e  eb040044          ADD      r0,r4,r4,LSL #1
000612  ebc010c4          RSB      r0,r0,r4,LSL #7
000616  f64f71ff          MOV      r1,#0xffff
00061a  ea0100c0          AND      r0,r1,r0,LSL #3
00061e  4985              LDR      r1,|L3.2100|
000620  f8a100f0          STRH     r0,[r1,#0xf0]
000624  e04e              B        |L3.1732|
                  |L3.1574|
000626  e7ff              B        |L3.1576|
                  |L3.1576|
;;;1086   							
;;;1087   						}else{
;;;1088   
;;;1089   							if( temp_float - 10 > 0 ){   //最大值
000628  eeb20a04          VMOV.F32 s0,#10.00000000
00062c  ee380a40          VSUB.F32 s0,s16,s0
000630  eeb50ac0          VCMPE.F32 s0,#0.0
000634  eef1fa10          VMRS     APSR_nzcv,FPSCR
000638  dd0a              BLE      |L3.1616|
;;;1090   							
;;;1091   								strcpy( displayStr, "10.000"  );
00063a  f2af11ec          ADR      r1,|L3.1104|
00063e  487e              LDR      r0,|L3.2104|
000640  f7fffffe          BL       strcpy
;;;1092   								
;;;1093   								CLists.CDC_Ccutoff_C = 10 * 1000;
000644  f2427010          MOV      r0,#0x2710
000648  497a              LDR      r1,|L3.2100|
00064a  f8a100f0          STRH     r0,[r1,#0xf0]
;;;1094   								
;;;1095   								break;
00064e  e1ee              B        |L3.2606|
                  |L3.1616|
;;;1096   							}
;;;1097   							
;;;1098   							if( temp_float <= 0 ){    //最小值
000650  eeb58ac0          VCMPE.F32 s16,#0.0
000654  eef1fa10          VMRS     APSR_nzcv,FPSCR
000658  d809              BHI      |L3.1646|
;;;1099   							
;;;1100   								strcpy( displayStr, "0.000"  );
00065a  f2af2130          ADR      r1,|L3.1068|
00065e  4876              LDR      r0,|L3.2104|
000660  f7fffffe          BL       strcpy
;;;1101   								
;;;1102   								CLists.CDC_Ccutoff_C = 0 * 1000;
000664  2000              MOVS     r0,#0
000666  4973              LDR      r1,|L3.2100|
000668  f8a100f0          STRH     r0,[r1,#0xf0]
;;;1103   								
;;;1104   								break;
00066c  e1df              B        |L3.2606|
                  |L3.1646|
;;;1105   							}
;;;1106   							NUM = strlen(float_char) - dot_loc - 1;
00066e  a801              ADD      r0,sp,#4
000670  f7fffffe          BL       strlen
000674  1b80              SUBS     r0,r0,r6
000676  1e47              SUBS     r7,r0,#1
;;;1107   							
;;;1108   							for( i = 0; i < 3 - NUM; i++ ){
000678  2500              MOVS     r5,#0
00067a  e005              B        |L3.1672|
                  |L3.1660|
;;;1109   								
;;;1110   								strcat( float_char, "0");
00067c  f2af2150          ADR      r1,|L3.1072|
000680  a801              ADD      r0,sp,#4
000682  f7fffffe          BL       strcat
000686  1c6d              ADDS     r5,r5,#1              ;1108
                  |L3.1672|
000688  f1c70003          RSB      r0,r7,#3              ;1108
00068c  42a8              CMP      r0,r5                 ;1108
00068e  dcf5              BGT      |L3.1660|
;;;1111   							}	
;;;1112   							NUM = ( dot_loc > 1 ) ? 6 : 5;
000690  2e01              CMP      r6,#1
000692  dd01              BLE      |L3.1688|
000694  2006              MOVS     r0,#6
000696  e000              B        |L3.1690|
                  |L3.1688|
000698  2005              MOVS     r0,#5
                  |L3.1690|
00069a  4607              MOV      r7,r0
;;;1113   							
;;;1114   							strncpy( int_char, float_char, NUM );
00069c  463a              MOV      r2,r7
00069e  a901              ADD      r1,sp,#4
0006a0  a804              ADD      r0,sp,#0x10
0006a2  f7fffffe          BL       strncpy
;;;1115   							
;;;1116   							strcpy( displayStr, int_char );	
0006a6  a904              ADD      r1,sp,#0x10
0006a8  4863              LDR      r0,|L3.2104|
0006aa  f7fffffe          BL       strcpy
;;;1117   							
;;;1118   							CLists.CDC_Ccutoff_C = temp_float * 1000;
0006ae  ed1f0a99          VLDR     s0,|L3.1100|
0006b2  ee280a00          VMUL.F32 s0,s16,s0
0006b6  eebc0ac0          VCVT.U32.F32 s0,s0
0006ba  ee100a10          VMOV     r0,s0
0006be  495d              LDR      r1,|L3.2100|
0006c0  f8a100f0          STRH     r0,[r1,#0xf0]
                  |L3.1732|
;;;1119   							
;;;1120   						}
;;;1121   					}
;;;1122   				
;;;1123   				break;	
0006c4  e1b3              B        |L3.2606|
                  |L3.1734|
;;;1124   				
;;;1125   				case 20:
;;;1126   				//====================================负载电流======================================
;;;1127   					if( flag_null ){   
0006c6  f1b80f00          CMP      r8,#0
0006ca  d00d              BEQ      |L3.1768|
;;;1128   					
;;;1129   						strcpy( displayStr, "0.000"  );
0006cc  f2af21a4          ADR      r1,|L3.1068|
0006d0  4859              LDR      r0,|L3.2104|
0006d2  f7fffffe          BL       strcpy
;;;1130   						
;;;1131   						CLists.CDC_Load_C = 0 * 1000;
0006d6  2000              MOVS     r0,#0
0006d8  4956              LDR      r1,|L3.2100|
0006da  f8a100f2          STRH     r0,[r1,#0xf2]
;;;1132   						
;;;1133   						CLists.CSET_Current_Laod =  CLists.CDC_Load_C;
0006de  4608              MOV      r0,r1
0006e0  f8b000f2          LDRH     r0,[r0,#0xf2]  ; CLists
0006e4  6148              STR      r0,[r1,#0x14]  ; CLists
0006e6  e0a3              B        |L3.2096|
                  |L3.1768|
;;;1134   						
;;;1135   					}else{
;;;1136   						
;;;1137   						if( !flag_dot ){      	
0006e8  f89d0000          LDRB     r0,[sp,#0]
0006ec  bbf0              CBNZ     r0,|L3.1900|
;;;1138   							
;;;1139   							if( temp_int > 30  ){   //最大值
0006ee  2c1e              CMP      r4,#0x1e
0006f0  dd0e              BLE      |L3.1808|
;;;1140   							
;;;1141   								strcpy( displayStr, "30.000"  );
0006f2  f2af21bc          ADR      r1,|L3.1080|
0006f6  4850              LDR      r0,|L3.2104|
0006f8  f7fffffe          BL       strcpy
;;;1142   								
;;;1143   								CLists.CDC_Load_C = 30 * 1000;
0006fc  f2475030          MOV      r0,#0x7530
000700  494c              LDR      r1,|L3.2100|
000702  f8a100f2          STRH     r0,[r1,#0xf2]
;;;1144   								
;;;1145   								CLists.CSET_Current_Laod =  CLists.CDC_Load_C;
000706  4608              MOV      r0,r1
000708  f8b000f2          LDRH     r0,[r0,#0xf2]  ; CLists
00070c  6148              STR      r0,[r1,#0x14]  ; CLists
;;;1146   								
;;;1147   								break;
00070e  e18e              B        |L3.2606|
                  |L3.1808|
;;;1148   							}
;;;1149   							if( temp_int <= 0 ){    //最小值
000710  2c00              CMP      r4,#0
000712  dc0d              BGT      |L3.1840|
;;;1150   							
;;;1151   								strcpy( displayStr, "0.000"  );
000714  f2af21ec          ADR      r1,|L3.1068|
000718  4847              LDR      r0,|L3.2104|
00071a  f7fffffe          BL       strcpy
;;;1152   								
;;;1153   								CLists.CDC_Load_C = 0 * 1000;
00071e  2000              MOVS     r0,#0
000720  4944              LDR      r1,|L3.2100|
000722  f8a100f2          STRH     r0,[r1,#0xf2]
;;;1154   								
;;;1155   								CLists.CSET_Current_Laod =  CLists.CDC_Load_C;
000726  4608              MOV      r0,r1
000728  f8b000f2          LDRH     r0,[r0,#0xf2]  ; CLists
00072c  6148              STR      r0,[r1,#0x14]  ; CLists
;;;1156   								
;;;1157   								break;
00072e  e17e              B        |L3.2606|
                  |L3.1840|
;;;1158   							}						
;;;1159   							if( strlen(int_char) > 2){
000730  a804              ADD      r0,sp,#0x10
000732  f7fffffe          BL       strlen
000736  2802              CMP      r0,#2
000738  d905              BLS      |L3.1862|
;;;1160   								
;;;1161   								strcat( int_char, ".0");
00073a  f2af21fc          ADR      r1,|L3.1088|
00073e  a804              ADD      r0,sp,#0x10
000740  f7fffffe          BL       strcat
000744  e004              B        |L3.1872|
                  |L3.1862|
;;;1162   								
;;;1163   							}else{
;;;1164   								
;;;1165   								strcat( int_char, ".000");
000746  f2af3104          ADR      r1,|L3.1092|
00074a  a804              ADD      r0,sp,#0x10
00074c  f7fffffe          BL       strcat
                  |L3.1872|
;;;1166   							}
;;;1167   							strcpy( displayStr, int_char );
000750  a904              ADD      r1,sp,#0x10
000752  4839              LDR      r0,|L3.2104|
000754  f7fffffe          BL       strcpy
;;;1168   							
;;;1169   							CLists.CDC_Load_C = temp_int * 1000;
000758  eb040044          ADD      r0,r4,r4,LSL #1
00075c  ebc010c4          RSB      r0,r0,r4,LSL #7
000760  f64f71ff          MOV      r1,#0xffff
000764  ea0100c0          AND      r0,r1,r0,LSL #3
000768  4932              LDR      r1,|L3.2100|
00076a  e000              B        |L3.1902|
                  |L3.1900|
00076c  e006              B        |L3.1916|
                  |L3.1902|
00076e  f8a100f2          STRH     r0,[r1,#0xf2]
;;;1170   							
;;;1171   							CLists.CSET_Current_Laod =  CLists.CDC_Load_C;
000772  4608              MOV      r0,r1
000774  f8b000f2          LDRH     r0,[r0,#0xf2]  ; CLists
000778  6148              STR      r0,[r1,#0x14]  ; CLists
00077a  e059              B        |L3.2096|
                  |L3.1916|
;;;1172   							
;;;1173   						}else{
;;;1174   
;;;1175   							if( temp_float - 30 > 0 ){   //最大值
00077c  eeb30a0e          VMOV.F32 s0,#30.00000000
000780  ee380a40          VSUB.F32 s0,s16,s0
000784  eeb50ac0          VCMPE.F32 s0,#0.0
000788  eef1fa10          VMRS     APSR_nzcv,FPSCR
00078c  dd0e              BLE      |L3.1964|
;;;1176   							
;;;1177   								strcpy( displayStr, "30.000"  );
00078e  f2af3158          ADR      r1,|L3.1080|
000792  4829              LDR      r0,|L3.2104|
000794  f7fffffe          BL       strcpy
;;;1178   								
;;;1179   								CLists.CDC_Load_C = 30 * 1000;
000798  f2475030          MOV      r0,#0x7530
00079c  4925              LDR      r1,|L3.2100|
00079e  f8a100f2          STRH     r0,[r1,#0xf2]
;;;1180   								
;;;1181   								CLists.CSET_Current_Laod =  CLists.CDC_Load_C;
0007a2  4608              MOV      r0,r1
0007a4  f8b000f2          LDRH     r0,[r0,#0xf2]  ; CLists
0007a8  6148              STR      r0,[r1,#0x14]  ; CLists
;;;1182   								
;;;1183   								break;
0007aa  e140              B        |L3.2606|
                  |L3.1964|
;;;1184   							}
;;;1185   							
;;;1186   							if( temp_float <= 0 ){    //最小值
0007ac  eeb58ac0          VCMPE.F32 s16,#0.0
0007b0  eef1fa10          VMRS     APSR_nzcv,FPSCR
0007b4  d80d              BHI      |L3.2002|
;;;1187   							
;;;1188   								strcpy( displayStr, "0.000"  );
0007b6  f2af318c          ADR      r1,|L3.1068|
0007ba  481f              LDR      r0,|L3.2104|
0007bc  f7fffffe          BL       strcpy
;;;1189   								
;;;1190   								CLists.CDC_Load_C = 0 * 1000;
0007c0  2000              MOVS     r0,#0
0007c2  491c              LDR      r1,|L3.2100|
0007c4  f8a100f2          STRH     r0,[r1,#0xf2]
;;;1191   								
;;;1192   								CLists.CSET_Current_Laod =  CLists.CDC_Load_C;
0007c8  4608              MOV      r0,r1
0007ca  f8b000f2          LDRH     r0,[r0,#0xf2]  ; CLists
0007ce  6148              STR      r0,[r1,#0x14]  ; CLists
;;;1193   								
;;;1194   								break;
0007d0  e12d              B        |L3.2606|
                  |L3.2002|
;;;1195   							}
;;;1196   							NUM = strlen(float_char) - dot_loc - 1;
0007d2  a801              ADD      r0,sp,#4
0007d4  f7fffffe          BL       strlen
0007d8  1b80              SUBS     r0,r0,r6
0007da  1e47              SUBS     r7,r0,#1
;;;1197   							
;;;1198   							for( i = 0; i < 3 - NUM; i++ ){
0007dc  2500              MOVS     r5,#0
0007de  e005              B        |L3.2028|
                  |L3.2016|
;;;1199   								
;;;1200   								strcat( float_char, "0");
0007e0  f2af31b4          ADR      r1,|L3.1072|
0007e4  a801              ADD      r0,sp,#4
0007e6  f7fffffe          BL       strcat
0007ea  1c6d              ADDS     r5,r5,#1              ;1198
                  |L3.2028|
0007ec  f1c70003          RSB      r0,r7,#3              ;1198
0007f0  42a8              CMP      r0,r5                 ;1198
0007f2  dcf5              BGT      |L3.2016|
;;;1201   							}	
;;;1202   							NUM = ( dot_loc > 1 ) ? 6 : 5;
0007f4  2e01              CMP      r6,#1
0007f6  dd01              BLE      |L3.2044|
0007f8  2006              MOVS     r0,#6
0007fa  e000              B        |L3.2046|
                  |L3.2044|
0007fc  2005              MOVS     r0,#5
                  |L3.2046|
0007fe  4607              MOV      r7,r0
;;;1203   							
;;;1204   							strncpy( int_char, float_char, NUM );
000800  463a              MOV      r2,r7
000802  a901              ADD      r1,sp,#4
000804  a804              ADD      r0,sp,#0x10
000806  f7fffffe          BL       strncpy
;;;1205   							
;;;1206   							strcpy( displayStr, int_char );	
00080a  a904              ADD      r1,sp,#0x10
00080c  480a              LDR      r0,|L3.2104|
00080e  f7fffffe          BL       strcpy
;;;1207   							
;;;1208   							CLists.CDC_Load_C = temp_float * 1000;
000812  ed1f0af2          VLDR     s0,|L3.1100|
000816  ee280a00          VMUL.F32 s0,s16,s0
00081a  eebc0ac0          VCVT.U32.F32 s0,s0
00081e  ee100a10          VMOV     r0,s0
000822  4904              LDR      r1,|L3.2100|
000824  f8a100f2          STRH     r0,[r1,#0xf2]
;;;1209   							
;;;1210   							CLists.CSET_Current_Laod =  CLists.CDC_Load_C;
000828  4608              MOV      r0,r1
00082a  f8b000f2          LDRH     r0,[r0,#0xf2]  ; CLists
00082e  6148              STR      r0,[r1,#0x14]  ; CLists
                  |L3.2096|
;;;1211   						}
;;;1212   					}
;;;1213   				
;;;1214   				break;	
000830  e0fd              B        |L3.2606|
                  |L3.2098|
000832  e119              B        |L3.2664|
                  |L3.2100|
                          DCD      CLists
                  |L3.2104|
                          DCD      displayStr
                  |L3.2108|
;;;1215   				
;;;1216   				case 22:
;;;1217   				//====================================截止电压======================================
;;;1218   					if( flag_null ){  
00083c  f1b80f00          CMP      r8,#0
000840  d009              BEQ      |L3.2134|
;;;1219   					
;;;1220   						strcpy( displayStr, "0.000"  );
000842  f2af4118          ADR      r1,|L3.1068|
000846  488f              LDR      r0,|L3.2692|
000848  f7fffffe          BL       strcpy
;;;1221   						
;;;1222   						CLists.CDC_Dcutoff_V = 0 * 1000;
00084c  2000              MOVS     r0,#0
00084e  498e              LDR      r1,|L3.2696|
000850  f8c100f4          STR      r0,[r1,#0xf4]  ; CLists
000854  e085              B        |L3.2402|
                  |L3.2134|
;;;1223   			
;;;1224   					}else{
;;;1225   						
;;;1226   						if( !flag_dot ){      	
000856  f89d0000          LDRB     r0,[sp,#0]
00085a  bb90              CBNZ     r0,|L3.2242|
;;;1227   							
;;;1228   							if( temp_int > 60  ){   //最大值
00085c  2c3c              CMP      r4,#0x3c
00085e  dd09              BLE      |L3.2164|
;;;1229   							
;;;1230   								strcpy( displayStr, "60.000"  );
000860  a18a              ADR      r1,|L3.2700|
000862  4888              LDR      r0,|L3.2692|
000864  f7fffffe          BL       strcpy
;;;1231   								
;;;1232   								CLists.CDC_Dcutoff_V = 60 * 1000;
000868  f64e2060          MOV      r0,#0xea60
00086c  4986              LDR      r1,|L3.2696|
00086e  f8c100f4          STR      r0,[r1,#0xf4]  ; CLists
;;;1233   								
;;;1234   								break;
000872  e0dc              B        |L3.2606|
                  |L3.2164|
;;;1235   							}
;;;1236   							if( temp_int <= 0 ){    //最小值
000874  2c00              CMP      r4,#0
000876  dc09              BGT      |L3.2188|
;;;1237   							
;;;1238   								strcpy( displayStr, "0.000"  );
000878  f2af4150          ADR      r1,|L3.1068|
00087c  4881              LDR      r0,|L3.2692|
00087e  f7fffffe          BL       strcpy
;;;1239   								
;;;1240   								CLists.CDC_Dcutoff_V = 0 * 1000;
000882  2000              MOVS     r0,#0
000884  4980              LDR      r1,|L3.2696|
000886  f8c100f4          STR      r0,[r1,#0xf4]  ; CLists
;;;1241   								
;;;1242   								break;
00088a  e0d0              B        |L3.2606|
                  |L3.2188|
;;;1243   								
;;;1244   							}						
;;;1245   							if( strlen(int_char) > 2){
00088c  a804              ADD      r0,sp,#0x10
00088e  f7fffffe          BL       strlen
000892  2802              CMP      r0,#2
000894  d905              BLS      |L3.2210|
;;;1246   								
;;;1247   								strcat( int_char, ".0");
000896  f2af4158          ADR      r1,|L3.1088|
00089a  a804              ADD      r0,sp,#0x10
00089c  f7fffffe          BL       strcat
0008a0  e004              B        |L3.2220|
                  |L3.2210|
;;;1248   								
;;;1249   							}else{
;;;1250   								
;;;1251   								strcat( int_char, ".000");
0008a2  f2af4160          ADR      r1,|L3.1092|
0008a6  a804              ADD      r0,sp,#0x10
0008a8  f7fffffe          BL       strcat
                  |L3.2220|
;;;1252   								
;;;1253   							}
;;;1254   							strcpy( displayStr, int_char );
0008ac  a904              ADD      r1,sp,#0x10
0008ae  4875              LDR      r0,|L3.2692|
0008b0  f7fffffe          BL       strcpy
;;;1255   							
;;;1256   							CLists.CDC_Dcutoff_V = temp_int * 1000;
0008b4  f44f707a          MOV      r0,#0x3e8
0008b8  4360              MULS     r0,r4,r0
0008ba  4973              LDR      r1,|L3.2696|
0008bc  f8c100f4          STR      r0,[r1,#0xf4]  ; CLists
0008c0  e04f              B        |L3.2402|
                  |L3.2242|
0008c2  e7ff              B        |L3.2244|
                  |L3.2244|
;;;1257   							
;;;1258   						}else{
;;;1259   
;;;1260   							if( temp_float - 60 > 0 ){   //最大值
0008c4  ed9f0a73          VLDR     s0,|L3.2708|
0008c8  ee380a40          VSUB.F32 s0,s16,s0
0008cc  eeb50ac0          VCMPE.F32 s0,#0.0
0008d0  eef1fa10          VMRS     APSR_nzcv,FPSCR
0008d4  dd09              BLE      |L3.2282|
;;;1261   							
;;;1262   								strcpy( displayStr, "60.000"  );
0008d6  a16d              ADR      r1,|L3.2700|
0008d8  486a              LDR      r0,|L3.2692|
0008da  f7fffffe          BL       strcpy
;;;1263   								
;;;1264   								CLists.CDC_Dcutoff_V = 60 * 1000;
0008de  f64e2060          MOV      r0,#0xea60
0008e2  4969              LDR      r1,|L3.2696|
0008e4  f8c100f4          STR      r0,[r1,#0xf4]  ; CLists
;;;1265   								
;;;1266   								break;
0008e8  e0a1              B        |L3.2606|
                  |L3.2282|
;;;1267   							}
;;;1268   							
;;;1269   							if( temp_float <= 0 ){    //最小值
0008ea  eeb58ac0          VCMPE.F32 s16,#0.0
0008ee  eef1fa10          VMRS     APSR_nzcv,FPSCR
0008f2  d809              BHI      |L3.2312|
;;;1270   							
;;;1271   								strcpy( displayStr, "0.000"  );
0008f4  f2af41cc          ADR      r1,|L3.1068|
0008f8  4862              LDR      r0,|L3.2692|
0008fa  f7fffffe          BL       strcpy
;;;1272   								
;;;1273   								CLists.CDC_Dcutoff_V = 0 * 1000;
0008fe  2000              MOVS     r0,#0
000900  4961              LDR      r1,|L3.2696|
000902  f8c100f4          STR      r0,[r1,#0xf4]  ; CLists
;;;1274   								
;;;1275   								break;
000906  e092              B        |L3.2606|
                  |L3.2312|
;;;1276   							}
;;;1277   							NUM = strlen(float_char) - dot_loc - 1;
000908  a801              ADD      r0,sp,#4
00090a  f7fffffe          BL       strlen
00090e  1b80              SUBS     r0,r0,r6
000910  1e47              SUBS     r7,r0,#1
;;;1278   							
;;;1279   							for( i = 0; i < 3 - NUM; i++ ){
000912  2500              MOVS     r5,#0
000914  e005              B        |L3.2338|
                  |L3.2326|
;;;1280   								
;;;1281   								strcat( float_char, "0");
000916  f2af41e8          ADR      r1,|L3.1072|
00091a  a801              ADD      r0,sp,#4
00091c  f7fffffe          BL       strcat
000920  1c6d              ADDS     r5,r5,#1              ;1279
                  |L3.2338|
000922  f1c70003          RSB      r0,r7,#3              ;1279
000926  42a8              CMP      r0,r5                 ;1279
000928  dcf5              BGT      |L3.2326|
;;;1282   								
;;;1283   							}	
;;;1284   							NUM = ( dot_loc > 1 ) ? 6 : 5;
00092a  2e01              CMP      r6,#1
00092c  dd01              BLE      |L3.2354|
00092e  2006              MOVS     r0,#6
000930  e000              B        |L3.2356|
                  |L3.2354|
000932  2005              MOVS     r0,#5
                  |L3.2356|
000934  4607              MOV      r7,r0
;;;1285   							
;;;1286   							strncpy( int_char, float_char, NUM );
000936  463a              MOV      r2,r7
000938  a901              ADD      r1,sp,#4
00093a  a804              ADD      r0,sp,#0x10
00093c  f7fffffe          BL       strncpy
;;;1287   							
;;;1288   							strcpy( displayStr, int_char );	
000940  a904              ADD      r1,sp,#0x10
000942  4850              LDR      r0,|L3.2692|
000944  f7fffffe          BL       strcpy
;;;1289   							
;;;1290   							CLists.CDC_Dcutoff_V = temp_float * 1000;
000948  ed9f0a53          VLDR     s0,|L3.2712|
00094c  ee280a00          VMUL.F32 s0,s16,s0
000950  eebc0ac0          VCVT.U32.F32 s0,s0
000954  e000              B        |L3.2392|
                  |L3.2390|
000956  e005              B        |L3.2404|
                  |L3.2392|
000958  ee100a10          VMOV     r0,s0
00095c  494a              LDR      r1,|L3.2696|
00095e  f8c100f4          STR      r0,[r1,#0xf4]  ; CLists
                  |L3.2402|
;;;1291   							
;;;1292   						}
;;;1293   					}
;;;1294   				
;;;1295   				break;	
000962  e064              B        |L3.2606|
                  |L3.2404|
;;;1296   				case 24:
;;;1297   				//====================================循环次数======================================
;;;1298   					if( flag_null ){   
000964  f1b80f00          CMP      r8,#0
000968  d008              BEQ      |L3.2428|
;;;1299   					
;;;1300   						strcpy( displayStr, "0000"  );
00096a  a14c              ADR      r1,|L3.2716|
00096c  4845              LDR      r0,|L3.2692|
00096e  f7fffffe          BL       strcpy
;;;1301   						
;;;1302   						CLists.CDC_Cycle_Time = 0;
000972  2000              MOVS     r0,#0
000974  4944              LDR      r1,|L3.2696|
000976  f88100f8          STRB     r0,[r1,#0xf8]
00097a  e057              B        |L3.2604|
                  |L3.2428|
;;;1303   						
;;;1304   					}else{
;;;1305   						
;;;1306   						if( !flag_dot ){      		
00097c  f89d0000          LDRB     r0,[sp,#0]
000980  b9f8              CBNZ     r0,|L3.2498|
;;;1307   		
;;;1308   							if(  temp_int > 200  ){   //最大值
000982  2cc8              CMP      r4,#0xc8
000984  dd08              BLE      |L3.2456|
;;;1309   							
;;;1310   								strcpy( displayStr, "200"  );
000986  a147              ADR      r1,|L3.2724|
000988  483e              LDR      r0,|L3.2692|
00098a  f7fffffe          BL       strcpy
;;;1311   								
;;;1312   								CLists.CDC_Cycle_Time = 200;
00098e  20c8              MOVS     r0,#0xc8
000990  493d              LDR      r1,|L3.2696|
000992  f88100f8          STRB     r0,[r1,#0xf8]
;;;1313   								
;;;1314   								break;
000996  e04a              B        |L3.2606|
                  |L3.2456|
;;;1315   							}
;;;1316   							if( temp_int <= 0 ){    //最小值
000998  2c00              CMP      r4,#0
00099a  dc09              BGT      |L3.2480|
;;;1317   							
;;;1318   								strcpy( displayStr, "0"  );
00099c  4839              LDR      r0,|L3.2692|
00099e  f2af5170          ADR      r1,|L3.1072|
0009a2  8809              LDRH     r1,[r1,#0]
0009a4  8001              STRH     r1,[r0,#0]
;;;1319   								
;;;1320   								CLists.CDC_Cycle_Time = 0;
0009a6  2000              MOVS     r0,#0
0009a8  4937              LDR      r1,|L3.2696|
0009aa  f88100f8          STRB     r0,[r1,#0xf8]
;;;1321   								
;;;1322   								break;
0009ae  e03e              B        |L3.2606|
                  |L3.2480|
;;;1323   							}
;;;1324   							
;;;1325   							strcat( temp_char, int_char); 
0009b0  a904              ADD      r1,sp,#0x10
0009b2  a807              ADD      r0,sp,#0x1c
0009b4  f7fffffe          BL       strcat
;;;1326   							
;;;1327   							strcpy( displayStr, temp_char);
0009b8  a907              ADD      r1,sp,#0x1c
0009ba  4832              LDR      r0,|L3.2692|
0009bc  f7fffffe          BL       strcpy
0009c0  e031              B        |L3.2598|
                  |L3.2498|
;;;1328   							
;;;1329   						}else{
;;;1330   
;;;1331   							if( temp_float - 200 > 0 ){   //最大值
0009c2  ed9f0a39          VLDR     s0,|L3.2728|
0009c6  ee380a40          VSUB.F32 s0,s16,s0
0009ca  eeb50ac0          VCMPE.F32 s0,#0.0
0009ce  eef1fa10          VMRS     APSR_nzcv,FPSCR
0009d2  dd08              BLE      |L3.2534|
;;;1332   							
;;;1333   								strcpy( displayStr, "200"  );
0009d4  a133              ADR      r1,|L3.2724|
0009d6  482b              LDR      r0,|L3.2692|
0009d8  f7fffffe          BL       strcpy
;;;1334   								
;;;1335   								CLists.CDC_Cycle_Time = 200;
0009dc  20c8              MOVS     r0,#0xc8
0009de  492a              LDR      r1,|L3.2696|
0009e0  f88100f8          STRB     r0,[r1,#0xf8]
;;;1336   								
;;;1337   								break;
0009e4  e023              B        |L3.2606|
                  |L3.2534|
;;;1338   							}	
;;;1339   							if( temp_float <= 0 ){    //最小值
0009e6  eeb58ac0          VCMPE.F32 s16,#0.0
0009ea  eef1fa10          VMRS     APSR_nzcv,FPSCR
0009ee  d809              BHI      |L3.2564|
;;;1340   							
;;;1341   								strcpy( displayStr, "0"  );
0009f0  4824              LDR      r0,|L3.2692|
0009f2  f2af51c4          ADR      r1,|L3.1072|
0009f6  8809              LDRH     r1,[r1,#0]
0009f8  8001              STRH     r1,[r0,#0]
;;;1342   								
;;;1343   								CLists.CDC_Cycle_Time = 0;
0009fa  2000              MOVS     r0,#0
0009fc  4922              LDR      r1,|L3.2696|
0009fe  f88100f8          STRB     r0,[r1,#0xf8]
;;;1344   								
;;;1345   								break;
000a02  e014              B        |L3.2606|
                  |L3.2564|
;;;1346   							}
;;;1347   							if( dot_loc + 1 == strlen(displayStr) ){							
000a04  481f              LDR      r0,|L3.2692|
000a06  f7fffffe          BL       strlen
000a0a  1c71              ADDS     r1,r6,#1
000a0c  4288              CMP      r0,r1
000a0e  d006              BEQ      |L3.2590|
;;;1348   										
;;;1349   							}else{
;;;1350   								
;;;1351   								temp_int++;
000a10  1c64              ADDS     r4,r4,#1
;;;1352   								
;;;1353   								sprintf( int_char , "%d" , temp_int);		
000a12  4622              MOV      r2,r4
000a14  f2af51f4          ADR      r1,|L3.1060|
000a18  a804              ADD      r0,sp,#0x10
000a1a  f7fffffe          BL       __2sprintf
                  |L3.2590|
;;;1354   							}
;;;1355   							strcpy( displayStr, int_char ); 
000a1e  a904              ADD      r1,sp,#0x10
000a20  4818              LDR      r0,|L3.2692|
000a22  f7fffffe          BL       strcpy
                  |L3.2598|
;;;1356   						}
;;;1357   						
;;;1358   						CLists.CDC_Cycle_Time = temp_int;
000a26  4918              LDR      r1,|L3.2696|
000a28  f88140f8          STRB     r4,[r1,#0xf8]
                  |L3.2604|
;;;1359   					}
;;;1360   				
;;;1361   				break;	
000a2c  bf00              NOP      
                  |L3.2606|
000a2e  bf00              NOP                            ;804
;;;1362   			}
;;;1363   			
;;;1364   			Write_Flash_Bytes();	
000a30  f7fffffe          BL       Write_Flash_Bytes
;;;1365   			
;;;1366   			SGhListCDC[temp].d_BKColor = 0x0;
000a34  2000              MOVS     r0,#0
000a36  eb0901c9          ADD      r1,r9,r9,LSL #3
000a3a  4a1c              LDR      r2,|L3.2732|
000a3c  eb0201c1          ADD      r1,r2,r1,LSL #3
000a40  6388              STR      r0,[r1,#0x38]
;;;1367   			
;;;1368   			strcpy( SGhListCDC[temp].f_SName, displayStr );
000a42  eb0901c9          ADD      r1,r9,r9,LSL #3
000a46  eb0201c1          ADD      r1,r2,r1,LSL #3
000a4a  f101000c          ADD      r0,r1,#0xc
000a4e  490d              LDR      r1,|L3.2692|
000a50  f7fffffe          BL       strcpy
;;;1369   			
;;;1370   			strcpy( SGhListCDC[temp].f_EName, displayStr );
000a54  eb0901c9          ADD      r1,r9,r9,LSL #3
000a58  4a14              LDR      r2,|L3.2732|
000a5a  eb0201c1          ADD      r1,r2,r1,LSL #3
000a5e  f1010020          ADD      r0,r1,#0x20
000a62  4908              LDR      r1,|L3.2692|
000a64  f7fffffe          BL       strcpy
                  |L3.2664|
;;;1371   			
;;;1372   		}
;;;1373   	}
;;;1374   	memset( displayStr, '\0', sizeof(displayStr));
000a68  2114              MOVS     r1,#0x14
000a6a  4806              LDR      r0,|L3.2692|
000a6c  f7fffffe          BL       __aeabi_memclr
;;;1375   	
;;;1376   	WM_InvalidateWindow(cdchargeWin);
000a70  480f              LDR      r0,|L3.2736|
000a72  6800              LDR      r0,[r0,#0]  ; cdchargeWin
000a74  f7fffffe          BL       WM_InvalidateWindow
;;;1377   
;;;1378   }
000a78  b00b              ADD      sp,sp,#0x2c
000a7a  ecbd8b04          VPOP     {d8-d9}
000a7e  e8bd8ff0          POP      {r4-r11,pc}
;;;1379   
                          ENDP

000a82  0000              DCW      0x0000
                  |L3.2692|
                          DCD      displayStr
                  |L3.2696|
                          DCD      CLists
                  |L3.2700|
000a8c  36302e30          DCB      "60.000",0
000a90  303000  
000a93  00                DCB      0
                  |L3.2708|
000a94  42700000          DCFS     0x42700000 ; 60
                  |L3.2712|
000a98  447a0000          DCFS     0x447a0000 ; 1000
                  |L3.2716|
000a9c  30303030          DCB      "0000",0
000aa0  00      
000aa1  00                DCB      0
000aa2  00                DCB      0
000aa3  00                DCB      0
                  |L3.2724|
000aa4  32303000          DCB      "200",0
                  |L3.2728|
000aa8  43480000          DCFS     0x43480000 ; 200
                  |L3.2732|
                          DCD      SGhListCDC
                  |L3.2736|
                          DCD      cdchargeWin

                          AREA ||i.CreateCdCharge||, CODE, READONLY, ALIGN=2

                  CreateCdCharge PROC
;;;409    WM_HWIN CreateCdCharge(void);
;;;410    WM_HWIN CreateCdCharge(void) {
000000  b57c              PUSH     {r2-r6,lr}
;;;411    	
;;;412    	int dlen = 0;
000002  2500              MOVS     r5,#0
;;;413    	
;;;414    	int *key_loc;
;;;415    	
;;;416    	if( FLAG_FIRSTWIN[3] ){
000004  4875              LDR      r0,|L4.476|
000006  78c0              LDRB     r0,[r0,#3]  ; FLAG_FIRSTWIN
000008  2800              CMP      r0,#0
00000a  d07d              BEQ      |L4.264|
;;;417    		
;;;418    		if( CLists.CDC_OutPut_V 	  !=	0xffffff ){	
00000c  4874              LDR      r0,|L4.480|
00000e  f8b000e6          LDRH     r0,[r0,#0xe6]  ; CLists
000012  f06f417f          MVN      r1,#0xff000000
000016  4288              CMP      r0,r1
000018  d010              BEQ      |L4.60|
;;;419    		
;;;420    			strcpy( SGhListCDC[11].f_SName , Read_Data_Parse(1) ); 		strcpy( SGhListCDC[11].f_EName , Read_Data_Parse(1) ); 			
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       Read_Data_Parse
000020  4606              MOV      r6,r0
000022  4631              MOV      r1,r6
000024  486f              LDR      r0,|L4.484|
000026  f7fffffe          BL       strcpy
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       Read_Data_Parse
000030  4606              MOV      r6,r0
000032  4631              MOV      r1,r6
000034  486b              LDR      r0,|L4.484|
000036  3014              ADDS     r0,r0,#0x14
000038  f7fffffe          BL       strcpy
                  |L4.60|
;;;421    		}
;;;422    		
;;;423    		if( CLists.CDC_Limit_C 	  	  !=	0xffffff ){	
00003c  4868              LDR      r0,|L4.480|
00003e  f8b000e8          LDRH     r0,[r0,#0xe8]  ; CLists
000042  f06f417f          MVN      r1,#0xff000000
000046  4288              CMP      r0,r1
000048  d011              BEQ      |L4.110|
;;;424    		
;;;425    			strcpy( SGhListCDC[13].f_SName , Read_Data_Parse(2) ); 		strcpy( SGhListCDC[13].f_EName , Read_Data_Parse(2) ); 			
00004a  2002              MOVS     r0,#2
00004c  f7fffffe          BL       Read_Data_Parse
000050  4606              MOV      r6,r0
000052  4631              MOV      r1,r6
000054  4863              LDR      r0,|L4.484|
000056  3090              ADDS     r0,r0,#0x90
000058  f7fffffe          BL       strcpy
00005c  2002              MOVS     r0,#2
00005e  f7fffffe          BL       Read_Data_Parse
000062  4606              MOV      r6,r0
000064  4631              MOV      r1,r6
000066  485f              LDR      r0,|L4.484|
000068  30a4              ADDS     r0,r0,#0xa4
00006a  f7fffffe          BL       strcpy
                  |L4.110|
;;;426    		}
;;;427    		
;;;428    		if( CLists.CDC_Ccutoff_V 	  !=	0xffffff ){	
00006e  485c              LDR      r0,|L4.480|
000070  f8d000ec          LDR      r0,[r0,#0xec]  ; CLists
000074  f06f417f          MVN      r1,#0xff000000
000078  4288              CMP      r0,r1
00007a  d010              BEQ      |L4.158|
;;;429    		
;;;430    			strcpy( SGhListCDC[15].f_SName , Read_Data_Parse(3) ); 		strcpy( SGhListCDC[15].f_EName , Read_Data_Parse(3) ); 			
00007c  2003              MOVS     r0,#3
00007e  f7fffffe          BL       Read_Data_Parse
000082  4606              MOV      r6,r0
000084  4631              MOV      r1,r6
000086  4858              LDR      r0,|L4.488|
000088  f7fffffe          BL       strcpy
00008c  2003              MOVS     r0,#3
00008e  f7fffffe          BL       Read_Data_Parse
000092  4606              MOV      r6,r0
000094  4631              MOV      r1,r6
000096  4854              LDR      r0,|L4.488|
000098  3014              ADDS     r0,r0,#0x14
00009a  f7fffffe          BL       strcpy
                  |L4.158|
;;;431    		}
;;;432    		
;;;433    		if( CLists.CDC_Ccutoff_C 	  !=	0xffffff ){	
00009e  4850              LDR      r0,|L4.480|
0000a0  f8b000f0          LDRH     r0,[r0,#0xf0]  ; CLists
0000a4  f06f417f          MVN      r1,#0xff000000
0000a8  4288              CMP      r0,r1
0000aa  d011              BEQ      |L4.208|
;;;434    		
;;;435    			strcpy( SGhListCDC[17].f_SName , Read_Data_Parse(4) ); 		strcpy( SGhListCDC[17].f_EName , Read_Data_Parse(4) ); 			
0000ac  2004              MOVS     r0,#4
0000ae  f7fffffe          BL       Read_Data_Parse
0000b2  4606              MOV      r6,r0
0000b4  4631              MOV      r1,r6
0000b6  484c              LDR      r0,|L4.488|
0000b8  3090              ADDS     r0,r0,#0x90
0000ba  f7fffffe          BL       strcpy
0000be  2004              MOVS     r0,#4
0000c0  f7fffffe          BL       Read_Data_Parse
0000c4  4606              MOV      r6,r0
0000c6  4631              MOV      r1,r6
0000c8  4847              LDR      r0,|L4.488|
0000ca  30a4              ADDS     r0,r0,#0xa4
0000cc  f7fffffe          BL       strcpy
                  |L4.208|
;;;436    		}
;;;437    		
;;;438    		if( CLists.CDC_Load_C 	  	  !=	0xffffff ){	
0000d0  4843              LDR      r0,|L4.480|
0000d2  f8b000f2          LDRH     r0,[r0,#0xf2]  ; CLists
0000d6  f06f417f          MVN      r1,#0xff000000
0000da  4288              CMP      r0,r1
0000dc  d010              BEQ      |L4.256|
;;;439    		
;;;440    			strcpy( SGhListCDC[20].f_SName , Read_Data_Parse(5) ); 		strcpy( SGhListCDC[20].f_EName , Read_Data_Parse(5) ); 			
0000de  2005              MOVS     r0,#5
0000e0  f7fffffe          BL       Read_Data_Parse
0000e4  4606              MOV      r6,r0
0000e6  4631              MOV      r1,r6
0000e8  4840              LDR      r0,|L4.492|
0000ea  f7fffffe          BL       strcpy
0000ee  2005              MOVS     r0,#5
0000f0  f7fffffe          BL       Read_Data_Parse
0000f4  4606              MOV      r6,r0
0000f6  4631              MOV      r1,r6
0000f8  483c              LDR      r0,|L4.492|
0000fa  3014              ADDS     r0,r0,#0x14
0000fc  f7fffffe          BL       strcpy
                  |L4.256|
;;;441    		}
;;;442    		
;;;443    		if( CLists.CDC_Dcutoff_V 	  !=	0xffffff ){	
000100  4837              LDR      r0,|L4.480|
000102  f8d000f4          LDR      r0,[r0,#0xf4]  ; CLists
000106  e000              B        |L4.266|
                  |L4.264|
000108  e030              B        |L4.364|
                  |L4.266|
00010a  f06f417f          MVN      r1,#0xff000000
00010e  4288              CMP      r0,r1
000110  d011              BEQ      |L4.310|
;;;444    		
;;;445    			strcpy( SGhListCDC[22].f_SName , Read_Data_Parse(6) ); 		strcpy( SGhListCDC[22].f_EName , Read_Data_Parse(6) ); 			
000112  2006              MOVS     r0,#6
000114  f7fffffe          BL       Read_Data_Parse
000118  4606              MOV      r6,r0
00011a  4631              MOV      r1,r6
00011c  4833              LDR      r0,|L4.492|
00011e  3090              ADDS     r0,r0,#0x90
000120  f7fffffe          BL       strcpy
000124  2006              MOVS     r0,#6
000126  f7fffffe          BL       Read_Data_Parse
00012a  4606              MOV      r6,r0
00012c  4631              MOV      r1,r6
00012e  482f              LDR      r0,|L4.492|
000130  30a4              ADDS     r0,r0,#0xa4
000132  f7fffffe          BL       strcpy
                  |L4.310|
;;;446    		}
;;;447    		
;;;448    		if( CLists.CDC_Cycle_Time 	  !=	0xffffff ){	
000136  482a              LDR      r0,|L4.480|
000138  f89000f8          LDRB     r0,[r0,#0xf8]  ; CLists
00013c  f06f417f          MVN      r1,#0xff000000
000140  4288              CMP      r0,r1
000142  d010              BEQ      |L4.358|
;;;449    		
;;;450    			strcpy( SGhListCDC[24].f_SName , Read_Data_Parse(7) ); 		strcpy( SGhListCDC[24].f_EName , Read_Data_Parse(7) ); 			
000144  2007              MOVS     r0,#7
000146  f7fffffe          BL       Read_Data_Parse
00014a  4606              MOV      r6,r0
00014c  4631              MOV      r1,r6
00014e  4828              LDR      r0,|L4.496|
000150  f7fffffe          BL       strcpy
000154  2007              MOVS     r0,#7
000156  f7fffffe          BL       Read_Data_Parse
00015a  4606              MOV      r6,r0
00015c  4631              MOV      r1,r6
00015e  4824              LDR      r0,|L4.496|
000160  3014              ADDS     r0,r0,#0x14
000162  f7fffffe          BL       strcpy
                  |L4.358|
;;;451    		}
;;;452    		
;;;453    		FLAG_FIRSTWIN[3] = 0;	
000166  2000              MOVS     r0,#0
000168  491c              LDR      r1,|L4.476|
00016a  70c8              STRB     r0,[r1,#3]
                  |L4.364|
;;;454    	} 	
;;;455    	
;;;456    	CLists.CSET_Current_Laod =  CLists.CDC_Load_C;
00016c  481c              LDR      r0,|L4.480|
00016e  f8b000f2          LDRH     r0,[r0,#0xf2]  ; CLists
000172  491b              LDR      r1,|L4.480|
000174  6148              STR      r0,[r1,#0x14]  ; CLists
;;;457    	
;;;458    	CLists.CSET_Voltage = CLists.CDC_OutPut_V;
000176  4608              MOV      r0,r1
000178  f8b000e6          LDRH     r0,[r0,#0xe6]  ; CLists
00017c  6088              STR      r0,[r1,#8]  ; CLists
;;;459    	 
;;;460    	CLists.CSET_Current = CLists.CDC_Limit_C;
00017e  4608              MOV      r0,r1
000180  f8b000e8          LDRH     r0,[r0,#0xe8]  ; CLists
000184  60c8              STR      r0,[r1,#0xc]  ; CLists
;;;461    	
;;;462    	dlen = sizeof( SGhListCDC ) / sizeof( SGhListCDC[0] );
000186  2519              MOVS     r5,#0x19
;;;463    	
;;;464    	key_loc = get_id_index( SGhListCDC, dlen);
000188  4629              MOV      r1,r5
00018a  481a              LDR      r0,|L4.500|
00018c  f7fffffe          BL       get_id_index
000190  4604              MOV      r4,r0
;;;465    	
;;;466    	memset( displayStr, '\0', sizeof(displayStr));
000192  2114              MOVS     r1,#0x14
000194  4818              LDR      r0,|L4.504|
000196  f7fffffe          BL       __aeabi_memclr
;;;467    	
;;;468    	if( *key_loc != 12 ){
00019a  6820              LDR      r0,[r4,#0]
00019c  280c              CMP      r0,#0xc
00019e  d00b              BEQ      |L4.440|
;;;469    
;;;470    		SGhListCDC[*(key_loc+1)].focusType = 0;	
0001a0  2000              MOVS     r0,#0
0001a2  6861              LDR      r1,[r4,#4]
0001a4  eb0101c1          ADD      r1,r1,r1,LSL #3
0001a8  4a12              LDR      r2,|L4.500|
0001aa  eb0201c1          ADD      r1,r2,r1,LSL #3
0001ae  6048              STR      r0,[r1,#4]
;;;471    		
;;;472    		SGhListCDC[11].focusType = 1;
0001b0  2101              MOVS     r1,#1
0001b2  4610              MOV      r0,r2
0001b4  f8c0131c          STR      r1,[r0,#0x31c]
                  |L4.440|
;;;473    	}
;;;474    	
;;;475    	cdchargeWin = GUI_CreateDialogBox(_aDialogCreatecdc, GUI_COUNTOF(_aDialogCreatecdc), _cbDialogcdc, WM_HBKWIN, 0, 0);
0001b8  f7fffffe          BL       WM_GetDesktopWindow
0001bc  4606              MOV      r6,r0
0001be  2000              MOVS     r0,#0
0001c0  9000              STR      r0,[sp,#0]
0001c2  4633              MOV      r3,r6
0001c4  4a0d              LDR      r2,|L4.508|
0001c6  2106              MOVS     r1,#6
0001c8  9001              STR      r0,[sp,#4]
0001ca  480d              LDR      r0,|L4.512|
0001cc  f7fffffe          BL       GUI_CreateDialogBox
0001d0  490c              LDR      r1,|L4.516|
0001d2  6008              STR      r0,[r1,#0]  ; cdchargeWin
;;;476    	
;;;477    	return cdchargeWin;	
0001d4  4608              MOV      r0,r1
0001d6  6800              LDR      r0,[r0,#0]  ; cdchargeWin
;;;478    }
0001d8  bd7c              POP      {r2-r6,pc}
;;;479    
                          ENDP

0001da  0000              DCW      0x0000
                  |L4.476|
                          DCD      FLAG_FIRSTWIN
                  |L4.480|
                          DCD      CLists
                  |L4.484|
                          DCD      SGhListCDC+0x324
                  |L4.488|
                          DCD      SGhListCDC+0x444
                  |L4.492|
                          DCD      SGhListCDC+0x5ac
                  |L4.496|
                          DCD      SGhListCDC+0x6cc
                  |L4.500|
                          DCD      SGhListCDC
                  |L4.504|
                          DCD      displayStr
                  |L4.508|
                          DCD      _cbDialogcdc
                  |L4.512|
                          DCD      _aDialogCreatecdc
                  |L4.516|
                          DCD      cdchargeWin

                          AREA ||i.KEY_CDC_INPUT||, CODE, READONLY, ALIGN=2

                  KEY_CDC_INPUT PROC
;;;527    /*  输入  */
;;;528    void KEY_CDC_INPUT(char *strx){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
;;;529    	
;;;530    	int *key_loc;
;;;531    	int i, dlen, flen;
;;;532    	int dot_loc = 1024;
000006  f44f6880          MOV      r8,#0x400
;;;533    	
;;;534    	dlen = sizeof( SGhListCDC ) / sizeof( SGhListCDC[0] );
00000a  2719              MOVS     r7,#0x19
;;;535    	
;;;536    	key_loc = get_id_index( SGhListCDC, dlen);
00000c  4639              MOV      r1,r7
00000e  483c              LDR      r0,|L5.256|
000010  f7fffffe          BL       get_id_index
000014  4604              MOV      r4,r0
;;;537    	
;;;538    	if( *key_loc == 0x194 )
000016  6820              LDR      r0,[r4,#0]
000018  f5b07fca          CMP      r0,#0x194
00001c  d104              BNE      |L5.40|
;;;539    			
;;;540    		 SGhListCDC[11].focusType = 1;
00001e  2101              MOVS     r1,#1
000020  4837              LDR      r0,|L5.256|
000022  f8c0131c          STR      r1,[r0,#0x31c]
000026  e064              B        |L5.242|
                  |L5.40|
;;;541    	else
;;;542    	{
;;;543    	
;;;544    		if( displayStr[0] == '\0' && *strx == 0x2e )
000028  4836              LDR      r0,|L5.260|
00002a  7800              LDRB     r0,[r0,#0]  ; displayStr
00002c  b938              CBNZ     r0,|L5.62|
00002e  7830              LDRB     r0,[r6,#0]
000030  282e              CMP      r0,#0x2e
000032  d104              BNE      |L5.62|
;;;545    			
;;;546    				strcat( displayStr, "0.");	
000034  a134              ADR      r1,|L5.264|
000036  4833              LDR      r0,|L5.260|
000038  f7fffffe          BL       strcat
00003c  e02a              B        |L5.148|
                  |L5.62|
;;;547    		else
;;;548    		{
;;;549    			for ( i = 0; i < strlen(displayStr); i++){
00003e  2500              MOVS     r5,#0
000040  e00d              B        |L5.94|
                  |L5.66|
;;;550    				
;;;551    				if( displayStr[i] == 0x2e )
000042  4830              LDR      r0,|L5.260|
000044  5d40              LDRB     r0,[r0,r5]
000046  282e              CMP      r0,#0x2e
000048  d100              BNE      |L5.76|
;;;552    					
;;;553    					dot_loc = i;
00004a  46a8              MOV      r8,r5
                  |L5.76|
;;;554    
;;;555    				if( displayStr[i] == 0x2e && *strx == 0x2e )
00004c  482d              LDR      r0,|L5.260|
00004e  5d40              LDRB     r0,[r0,r5]
000050  282e              CMP      r0,#0x2e
000052  d103              BNE      |L5.92|
000054  7830              LDRB     r0,[r6,#0]
000056  282e              CMP      r0,#0x2e
000058  d100              BNE      |L5.92|
;;;556    					
;;;557    					goto cmore_point;
00005a  e04b              B        |L5.244|
                  |L5.92|
00005c  1c6d              ADDS     r5,r5,#1              ;549
                  |L5.94|
00005e  4829              LDR      r0,|L5.260|
000060  f7fffffe          BL       strlen
000064  42a8              CMP      r0,r5                 ;549
000066  d8ec              BHI      |L5.66|
;;;558    			}
;;;559    			if( dot_loc == 1024 )
000068  f5b86f80          CMP      r8,#0x400
00006c  d109              BNE      |L5.130|
;;;560    			{			
;;;561    				if( strlen(displayStr) < 4 )
00006e  4825              LDR      r0,|L5.260|
000070  f7fffffe          BL       strlen
000074  2804              CMP      r0,#4
000076  d20d              BCS      |L5.148|
;;;562    					
;;;563    					strcat( displayStr, strx);
000078  4631              MOV      r1,r6
00007a  4822              LDR      r0,|L5.260|
00007c  f7fffffe          BL       strcat
000080  e008              B        |L5.148|
                  |L5.130|
;;;564    			}
;;;565    			else
;;;566    			{
;;;567    				if( strlen(displayStr) < 6 )
000082  4820              LDR      r0,|L5.260|
000084  f7fffffe          BL       strlen
000088  2806              CMP      r0,#6
00008a  d203              BCS      |L5.148|
;;;568    					
;;;569    					strcat( displayStr, strx);
00008c  4631              MOV      r1,r6
00008e  481d              LDR      r0,|L5.260|
000090  f7fffffe          BL       strcat
                  |L5.148|
;;;570    			}
;;;571    		}
;;;572    		if(SGhListCDC[*(key_loc+1)].focusType == 1 && (SGhListCDC[*(key_loc+1)].t_Type == T_THref || SGhListCDC[*(key_loc+1)].t_Type == T_TLISTBOX) )
000094  6860              LDR      r0,[r4,#4]
000096  eb0000c0          ADD      r0,r0,r0,LSL #3
00009a  4919              LDR      r1,|L5.256|
00009c  eb0100c0          ADD      r0,r1,r0,LSL #3
0000a0  6840              LDR      r0,[r0,#4]
0000a2  2801              CMP      r0,#1
0000a4  d125              BNE      |L5.242|
0000a6  6860              LDR      r0,[r4,#4]
0000a8  eb0000c0          ADD      r0,r0,r0,LSL #3
0000ac  eb0100c0          ADD      r0,r1,r0,LSL #3
0000b0  6880              LDR      r0,[r0,#8]
0000b2  2801              CMP      r0,#1
0000b4  d007              BEQ      |L5.198|
0000b6  6860              LDR      r0,[r4,#4]
0000b8  eb0000c0          ADD      r0,r0,r0,LSL #3
0000bc  eb0100c0          ADD      r0,r1,r0,LSL #3
0000c0  6880              LDR      r0,[r0,#8]
0000c2  2803              CMP      r0,#3
0000c4  d115              BNE      |L5.242|
                  |L5.198|
;;;573    		{	
;;;574    			
;;;575    			strcpy( SGhListCDC[*(key_loc+1)].f_SName, displayStr );	
0000c6  6861              LDR      r1,[r4,#4]
0000c8  eb0101c1          ADD      r1,r1,r1,LSL #3
0000cc  4a0c              LDR      r2,|L5.256|
0000ce  eb0201c1          ADD      r1,r2,r1,LSL #3
0000d2  f101000c          ADD      r0,r1,#0xc
0000d6  490b              LDR      r1,|L5.260|
0000d8  f7fffffe          BL       strcpy
;;;576    					 
;;;577    			strcpy( SGhListCDC[*(key_loc+1)].f_EName, displayStr );
0000dc  6861              LDR      r1,[r4,#4]
0000de  eb0101c1          ADD      r1,r1,r1,LSL #3
0000e2  4a07              LDR      r2,|L5.256|
0000e4  eb0201c1          ADD      r1,r2,r1,LSL #3
0000e8  f1010020          ADD      r0,r1,#0x20
0000ec  4905              LDR      r1,|L5.260|
0000ee  f7fffffe          BL       strcpy
                  |L5.242|
;;;578    		}	
;;;579    	}
;;;580    	cmore_point:	
0000f2  bf00              NOP      
                  |L5.244|
;;;581    		
;;;582    		WM_InvalidateWindow(cdchargeWin);
0000f4  4805              LDR      r0,|L5.268|
0000f6  6800              LDR      r0,[r0,#0]  ; cdchargeWin
0000f8  f7fffffe          BL       WM_InvalidateWindow
;;;583    }	
0000fc  e8bd81f0          POP      {r4-r8,pc}
;;;584    
                          ENDP

                  |L5.256|
                          DCD      SGhListCDC
                  |L5.260|
                          DCD      displayStr
                  |L5.264|
000108  302e00            DCB      "0.",0
00010b  00                DCB      0
                  |L5.268|
                          DCD      cdchargeWin

                          AREA ||i.KEY_DOWN_CDC||, CODE, READONLY, ALIGN=2

                  KEY_DOWN_CDC PROC
;;;585    
;;;586    void KEY_DOWN_CDC( int handle){
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4606              MOV      r6,r0
;;;587    	
;;;588    	int i;
;;;589    	int *key_loc;
;;;590    	int get_nextid = 0, nowid = 0, nowid_index = 0, dlen = 0, flag = 0;  
000006  2700              MOVS     r7,#0
000008  46b8              MOV      r8,r7
00000a  46ba              MOV      r10,r7
00000c  46b9              MOV      r9,r7
00000e  46bb              MOV      r11,r7
;;;591    	
;;;592    	if( FLAG_INPUTAUTH == 0)
000010  4827              LDR      r0,|L6.176|
000012  7800              LDRB     r0,[r0,#0]  ; FLAG_INPUTAUTH
000014  2800              CMP      r0,#0
000016  d149              BNE      |L6.172|
;;;593    	{
;;;594    		dlen = sizeof(SGhListCDC) / sizeof(SGhListCDC[0]);
000018  f04f0919          MOV      r9,#0x19
;;;595    		key_loc = get_id_index( SGhListCDC, dlen);
00001c  4649              MOV      r1,r9
00001e  4825              LDR      r0,|L6.180|
000020  f7fffffe          BL       get_id_index
000024  4605              MOV      r5,r0
;;;596    				
;;;597    		nowid = *key_loc;
000026  f8d58000          LDR      r8,[r5,#0]
;;;598    		nowid_index = *(key_loc + 1);
00002a  f8d5a004          LDR      r10,[r5,#4]
;;;599    		
;;;600    		if( nowid == 0x194 )
00002e  f5b87fca          CMP      r8,#0x194
000032  d104              BNE      |L6.62|
;;;601    			
;;;602    			SGhListCDC[11].focusType = 1;
000034  2101              MOVS     r1,#1
000036  481f              LDR      r0,|L6.180|
000038  f8c0131c          STR      r1,[r0,#0x31c]
00003c  e001              B        |L6.66|
                  |L6.62|
;;;603    		else
;;;604    			
;;;605    			flag = 1;
00003e  f04f0b01          MOV      r11,#1
                  |L6.66|
;;;606    		
;;;607    		get_nextid = get_nextindex( nowid, WINC_id_DataLists, handle);
000042  4632              MOV      r2,r6
000044  491c              LDR      r1,|L6.184|
000046  4640              MOV      r0,r8
000048  f7fffffe          BL       get_nextindex
00004c  4607              MOV      r7,r0
;;;608    		
;;;609    		if( flag && get_nextid != 0xFF )
00004e  f1bb0f00          CMP      r11,#0
000052  d02b              BEQ      |L6.172|
000054  2fff              CMP      r7,#0xff
000056  d029              BEQ      |L6.172|
;;;610    		{
;;;611    			SGhListCDC[nowid_index].focusType = 0;	
000058  2000              MOVS     r0,#0
00005a  eb0a01ca          ADD      r1,r10,r10,LSL #3
00005e  4a15              LDR      r2,|L6.180|
000060  eb0201c1          ADD      r1,r2,r1,LSL #3
000064  6048              STR      r0,[r1,#4]
;;;612    				
;;;613    			for	( i = 0; i < dlen; i++)
000066  2400              MOVS     r4,#0
000068  e01d              B        |L6.166|
                  |L6.106|
;;;614    			{
;;;615    				if( SGhListCDC[i].d_ID == get_nextid && (SGhListCDC[i].t_Type == T_THref || SGhListCDC[i].t_Type == T_TLISTBOX) )
00006a  eb0400c4          ADD      r0,r4,r4,LSL #3
00006e  4911              LDR      r1,|L6.180|
000070  f8510030          LDR      r0,[r1,r0,LSL #3]
000074  42b8              CMP      r0,r7
000076  d115              BNE      |L6.164|
000078  eb0400c4          ADD      r0,r4,r4,LSL #3
00007c  eb0100c0          ADD      r0,r1,r0,LSL #3
000080  6880              LDR      r0,[r0,#8]
000082  2801              CMP      r0,#1
000084  d006              BEQ      |L6.148|
000086  eb0400c4          ADD      r0,r4,r4,LSL #3
00008a  eb0100c0          ADD      r0,r1,r0,LSL #3
00008e  6880              LDR      r0,[r0,#8]
000090  2803              CMP      r0,#3
000092  d107              BNE      |L6.164|
                  |L6.148|
;;;616    				{				
;;;617    					SGhListCDC[i].focusType = 1;	
000094  2001              MOVS     r0,#1
000096  eb0401c4          ADD      r1,r4,r4,LSL #3
00009a  4a06              LDR      r2,|L6.180|
00009c  eb0201c1          ADD      r1,r2,r1,LSL #3
0000a0  6048              STR      r0,[r1,#4]
;;;618    					break;
0000a2  e002              B        |L6.170|
                  |L6.164|
0000a4  1c64              ADDS     r4,r4,#1              ;613
                  |L6.166|
0000a6  454c              CMP      r4,r9                 ;613
0000a8  dbdf              BLT      |L6.106|
                  |L6.170|
0000aa  bf00              NOP      
                  |L6.172|
;;;619    				}
;;;620    			}	
;;;621    		}
;;;622    	}
;;;623    	else	
;;;624    	{
;;;625    	
;;;626    	}
;;;627    
;;;628    }
0000ac  e8bd9ff0          POP      {r4-r12,pc}
;;;629    
                          ENDP

                  |L6.176|
                          DCD      FLAG_INPUTAUTH
                  |L6.180|
                          DCD      SGhListCDC
                  |L6.184|
                          DCD      WINC_id_DataLists

                          AREA ||i._cbDialogcdc||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  _cbDialogcdc PROC
;;;104    
;;;105    static void _cbDialogcdc(WM_MESSAGE * pMsg) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  ed2d8b06          VPUSH    {d8-d10}
000008  b0ab              SUB      sp,sp,#0xac
00000a  4604              MOV      r4,r0
;;;106    	
;;;107    	WM_HWIN hItem;
;;;108    	
;;;109    	int NCode, Id, MAX_LEN = 0, itemp = 0;
00000c  2600              MOVS     r6,#0
00000e  2000              MOVS     r0,#0
000010  902a              STR      r0,[sp,#0xa8]
;;;110    	
;;;111    	vu8 i;
;;;112    	
;;;113    	char *winName, *show_Name, *ctime_name, *dtime_name;
;;;114    	
;;;115    	static struct SListData slistCDC[] = {
;;;116    		
;;;117    		{T_Button , "内阻测试","I.R. TEST",  0x00B22222 , 0, ID_BUTTON_19 },
;;;118    		{T_Button , "程控电源", "POWER",  0x00B22222 , 0, ID_BUTTON_20 },
;;;119    		{T_Button , "程控负载","LOAD",  0x00B22222 , 0, ID_BUTTON_21 },
;;;120    		{T_Button , "充放电", 	"C&DC",  0x00B22222 , 0, ID_BUTTON_22 },
;;;121    		{T_Button , "系统设置","SYSTEM",  0x00B22222 , 0, ID_BUTTON_23 },
;;;122    		
;;;123    	};
;;;124    	
;;;125    	vu8 _dloc;
;;;126    	
;;;127    	char cChar[20];
;;;128    	
;;;129    	float ftemp;
;;;130    	
;;;131    	vu32 CDC_Cmah = 0;
000012  9022              STR      r0,[sp,#0x88]
;;;132    	
;;;133    	switch (pMsg->MsgId) {
000014  6820              LDR      r0,[r4,#0]
000016  280e              CMP      r0,#0xe
000018  d07d              BEQ      |L7.278|
00001a  280f              CMP      r0,#0xf
00001c  d006              BEQ      |L7.44|
00001e  281d              CMP      r0,#0x1d
000020  d07a              BEQ      |L7.280|
000022  f2a01013          SUB      r0,r0,#0x113
000026  2800              CMP      r0,#0
000028  d177              BNE      |L7.282|
00002a  e0e7              B        |L7.508|
                  |L7.44|
;;;134    	  	
;;;135    		case WM_PAINT: {
;;;136    			
;;;137    			hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_22);	
00002c  f6400159          MOV      r1,#0x859
000030  6860              LDR      r0,[r4,#4]
000032  f7fffffe          BL       WM_GetDialogItem
000036  4605              MOV      r5,r0
;;;138    			
;;;139    			BUTTON_SetPressed( hItem , 1 );		
000038  2101              MOVS     r1,#1
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       BUTTON_SetPressed
;;;140    			
;;;141    			GUI_SetColor(0x00D3D3D3);
000040  48fe              LDR      r0,|L7.1084|
000042  f7fffffe          BL       GUI_SetColor
;;;142    			
;;;143    			GUI_FillRoundedRect(0,0,480,33,5);
000046  2005              MOVS     r0,#5
000048  2321              MOVS     r3,#0x21
00004a  f44f72f0          MOV      r2,#0x1e0
00004e  2100              MOVS     r1,#0
000050  9000              STR      r0,[sp,#0]
000052  4608              MOV      r0,r1
000054  f7fffffe          BL       GUI_FillRoundedRect
;;;144    			
;;;145    			GUI_SetColor(GUI_BLACK);
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       GUI_SetColor
;;;146    			
;;;147    			GUI_SetFont(&GUI_FontSONGB16);
00005e  48f8              LDR      r0,|L7.1088|
000060  f7fffffe          BL       GUI_SetFont
;;;148    			
;;;149    			GUI_UC_SetEncodeUTF8();
000064  f7fffffe          BL       GUI_UC_SetEncodeUTF8
;;;150    			
;;;151    			GUI_SetTextMode(GUI_TM_TRANS);//设置文本模式为底色透明
000068  2002              MOVS     r0,#2
00006a  f7fffffe          BL       GUI_SetTextMode
;;;152    
;;;153    			winName = ( FLAG_LANG == 1) ? "C&DC" : "充放电";
00006e  48f5              LDR      r0,|L7.1092|
000070  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
000072  2801              CMP      r0,#1
000074  d101              BNE      |L7.122|
000076  a0f4              ADR      r0,|L7.1096|
000078  e000              B        |L7.124|
                  |L7.122|
00007a  a0f5              ADR      r0,|L7.1104|
                  |L7.124|
00007c  4607              MOV      r7,r0
;;;154    		
;;;155    			GUI_DispStringAt( winName, (480 - GUI_GetStringDistX( winName))/2, 10);
00007e  4638              MOV      r0,r7
000080  f7fffffe          BL       GUI_GetStringDistX
000084  f5c07bf0          RSB      r11,r0,#0x1e0
000088  eb0b70db          ADD      r0,r11,r11,LSR #31
00008c  1041              ASRS     r1,r0,#1
00008e  220a              MOVS     r2,#0xa
000090  4638              MOV      r0,r7
000092  f7fffffe          BL       GUI_DispStringAt
;;;156    		
;;;157    			for( i = 0; i < sizeof( SGhListCDC )/sizeof( SGhListCDC[0]) ; i++  ){
000096  2000              MOVS     r0,#0
000098  9029              STR      r0,[sp,#0xa4]
00009a  e034              B        |L7.262|
                  |L7.156|
;;;158    				
;;;159    				bush_Graph_String( FLAG_LANG, SGhListCDC[i] );
00009c  f89d00a4          LDRB     r0,[sp,#0xa4]
0000a0  eb0000c0          ADD      r0,r0,r0,LSL #3
0000a4  49ed              LDR      r1,|L7.1116|
0000a6  eb010bc0          ADD      r11,r1,r0,LSL #3
0000aa  2234              MOVS     r2,#0x34
0000ac  4659              MOV      r1,r11
0000ae  a810              ADD      r0,sp,#0x40
0000b0  f7fffffe          BL       __aeabi_memcpy4
0000b4  f8db0034          LDR      r0,[r11,#0x34]
0000b8  901d              STR      r0,[sp,#0x74]
0000ba  f8db0038          LDR      r0,[r11,#0x38]
0000be  901e              STR      r0,[sp,#0x78]
0000c0  f8db003c          LDR      r0,[r11,#0x3c]
0000c4  901f              STR      r0,[sp,#0x7c]
0000c6  f8bb0040          LDRH     r0,[r11,#0x40]
0000ca  f8ad0080          STRH     r0,[sp,#0x80]
0000ce  f8bb0042          LDRH     r0,[r11,#0x42]
0000d2  f8ad0082          STRH     r0,[sp,#0x82]
0000d6  f8bb0044          LDRH     r0,[r11,#0x44]
0000da  f8ad0084          STRH     r0,[sp,#0x84]
0000de  f8bb0046          LDRH     r0,[r11,#0x46]
0000e2  f8ad0086          STRH     r0,[sp,#0x86]
0000e6  223c              MOVS     r2,#0x3c
0000e8  a913              ADD      r1,sp,#0x4c
0000ea  4668              MOV      r0,sp
0000ec  f7fffffe          BL       __aeabi_memcpy4
0000f0  48d4              LDR      r0,|L7.1092|
0000f2  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
0000f4  a910              ADD      r1,sp,#0x40
0000f6  c90e              LDM      r1,{r1-r3}
0000f8  f7fffffe          BL       bush_Graph_String
0000fc  f89d00a4          LDRB     r0,[sp,#0xa4]         ;157
000100  1c40              ADDS     r0,r0,#1              ;157
000102  b2c0              UXTB     r0,r0                 ;157
000104  9029              STR      r0,[sp,#0xa4]         ;157
                  |L7.262|
000106  f89d00a4          LDRB     r0,[sp,#0xa4]         ;157
00010a  2819              CMP      r0,#0x19              ;157
00010c  d3c6              BCC      |L7.156|
;;;160    			}
;;;161    			
;;;162    			GUI_SetFont(&GUI_FontSONG12);	
00010e  48d4              LDR      r0,|L7.1120|
000110  f7fffffe          BL       GUI_SetFont
;;;163    			GUI_UC_SetEncodeUTF8();	
000114  e002              B        |L7.284|
                  |L7.278|
000116  e2f6              B        |L7.1798|
                  |L7.280|
000118  e2f6              B        |L7.1800|
                  |L7.282|
00011a  e309              B        |L7.1840|
                  |L7.284|
00011c  f7fffffe          BL       GUI_UC_SetEncodeUTF8
;;;164    			GUI_SetTextMode(GUI_TM_TRANS);//设置文本模式为底色透明
000120  2002              MOVS     r0,#2
000122  f7fffffe          BL       GUI_SetTextMode
;;;165    			GUI_SetColor(0x00456654);
000126  48cf              LDR      r0,|L7.1124|
000128  f7fffffe          BL       GUI_SetColor
;;;166    			
;;;167    			if( POWER_RECHARGE == 0 &&  C_DISCHARGE == 0 )
00012c  48ce              LDR      r0,|L7.1128|
00012e  7800              LDRB     r0,[r0,#0]  ; POWER_RECHARGE
000130  b958              CBNZ     r0,|L7.330|
000132  48ce              LDR      r0,|L7.1132|
000134  7800              LDRB     r0,[r0,#0]  ; C_DISCHARGE
000136  b940              CBNZ     r0,|L7.330|
;;;168    			{				
;;;169    				show_Name = ( FLAG_LANG == 1) ? "Waiting Open" : "等待开启";
000138  48c2              LDR      r0,|L7.1092|
00013a  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
00013c  2801              CMP      r0,#1
00013e  d101              BNE      |L7.324|
000140  a0cb              ADR      r0,|L7.1136|
000142  e000              B        |L7.326|
                  |L7.324|
000144  a0ce              ADR      r0,|L7.1152|
                  |L7.326|
000146  4680              MOV      r8,r0
000148  e01e              B        |L7.392|
                  |L7.330|
;;;170    			}
;;;171    			else if( POWER_RECHARGE == 1 &&  C_DISCHARGE == 0 )
00014a  48c7              LDR      r0,|L7.1128|
00014c  7800              LDRB     r0,[r0,#0]  ; POWER_RECHARGE
00014e  2801              CMP      r0,#1
000150  d10b              BNE      |L7.362|
000152  48c6              LDR      r0,|L7.1132|
000154  7800              LDRB     r0,[r0,#0]  ; C_DISCHARGE
000156  b940              CBNZ     r0,|L7.362|
;;;172    			{	
;;;173    				show_Name = ( FLAG_LANG == 1) ? "Charging" : "充电中";			
000158  48ba              LDR      r0,|L7.1092|
00015a  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
00015c  2801              CMP      r0,#1
00015e  d101              BNE      |L7.356|
000160  a0cb              ADR      r0,|L7.1168|
000162  e000              B        |L7.358|
                  |L7.356|
000164  a0cd              ADR      r0,|L7.1180|
                  |L7.358|
000166  4680              MOV      r8,r0
000168  e00e              B        |L7.392|
                  |L7.362|
;;;174    			}
;;;175    			else if( POWER_RECHARGE == 0 &&  C_DISCHARGE == 1 )
00016a  48bf              LDR      r0,|L7.1128|
00016c  7800              LDRB     r0,[r0,#0]  ; POWER_RECHARGE
00016e  b958              CBNZ     r0,|L7.392|
000170  48be              LDR      r0,|L7.1132|
000172  7800              LDRB     r0,[r0,#0]  ; C_DISCHARGE
000174  2801              CMP      r0,#1
000176  d107              BNE      |L7.392|
;;;176    			{
;;;177    				show_Name = ( FLAG_LANG == 1) ? "Discharging" : "放电中";
000178  48b2              LDR      r0,|L7.1092|
00017a  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
00017c  2801              CMP      r0,#1
00017e  d101              BNE      |L7.388|
000180  a0c9              ADR      r0,|L7.1192|
000182  e000              B        |L7.390|
                  |L7.388|
000184  a0cb              ADR      r0,|L7.1204|
                  |L7.390|
000186  4680              MOV      r8,r0
                  |L7.392|
;;;178    			}
;;;179    			GUI_DispStringAt( show_Name, 460 - GUI_GetStringDistX(show_Name), 13);
000188  4640              MOV      r0,r8
00018a  f7fffffe          BL       GUI_GetStringDistX
00018e  f5c07be6          RSB      r11,r0,#0x1cc
000192  220d              MOVS     r2,#0xd
000194  4659              MOV      r1,r11
000196  4640              MOV      r0,r8
000198  f7fffffe          BL       GUI_DispStringAt
;;;180    				
;;;181    			ctime_name =  ( FLAG_LANG == 1) ? "Charg Times：" : "充电耗时";
00019c  48a9              LDR      r0,|L7.1092|
00019e  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
0001a0  2801              CMP      r0,#1
0001a2  d101              BNE      |L7.424|
0001a4  a0c6              ADR      r0,|L7.1216|
0001a6  e000              B        |L7.426|
                  |L7.424|
0001a8  a0c9              ADR      r0,|L7.1232|
                  |L7.426|
0001aa  4681              MOV      r9,r0
;;;182    				
;;;183    			GUI_DispStringAt( ctime_name, 18, 6);
0001ac  2206              MOVS     r2,#6
0001ae  2112              MOVS     r1,#0x12
0001b0  4648              MOV      r0,r9
0001b2  f7fffffe          BL       GUI_DispStringAt
;;;184    				
;;;185    			GUI_DispStringAt( RunTimesStr[0], 18, 20);
0001b6  2214              MOVS     r2,#0x14
0001b8  2112              MOVS     r1,#0x12
0001ba  48c9              LDR      r0,|L7.1248|
0001bc  f7fffffe          BL       GUI_DispStringAt
;;;186    				
;;;187    			dtime_name =  ( FLAG_LANG == 1) ? "Discharg Times：" : "放电耗时" ;	
0001c0  48a0              LDR      r0,|L7.1092|
0001c2  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
0001c4  2801              CMP      r0,#1
0001c6  d101              BNE      |L7.460|
0001c8  a0c6              ADR      r0,|L7.1252|
0001ca  e000              B        |L7.462|
                  |L7.460|
0001cc  a0ca              ADR      r0,|L7.1272|
                  |L7.462|
0001ce  4682              MOV      r10,r0
;;;188    				
;;;189    			GUI_DispStringAt( dtime_name, 35 + GUI_GetStringDistX(ctime_name), 6);
0001d0  4648              MOV      r0,r9
0001d2  f7fffffe          BL       GUI_GetStringDistX
0001d6  f1000b23          ADD      r11,r0,#0x23
0001da  2206              MOVS     r2,#6
0001dc  4659              MOV      r1,r11
0001de  4650              MOV      r0,r10
0001e0  f7fffffe          BL       GUI_DispStringAt
;;;190    				
;;;191    			GUI_DispStringAt( RunTimesStr[1], 35 + GUI_GetStringDistX(ctime_name), 20);	
0001e4  4648              MOV      r0,r9
0001e6  f7fffffe          BL       GUI_GetStringDistX
0001ea  f1000b23          ADD      r11,r0,#0x23
0001ee  2214              MOVS     r2,#0x14
0001f0  4659              MOV      r1,r11
0001f2  48bb              LDR      r0,|L7.1248|
0001f4  301e              ADDS     r0,r0,#0x1e
0001f6  f7fffffe          BL       GUI_DispStringAt
;;;192    					
;;;193    		}
;;;194    		
;;;195    		break;
0001fa  e29d              B        |L7.1848|
                  |L7.508|
;;;196    
;;;197    		case WM_TIMER:{
;;;198    			
;;;199    			if(WM_GetTimerId(pMsg->Data.v) == ID_TimerTimeCDC){	
0001fc  68e0              LDR      r0,[r4,#0xc]
0001fe  f7fffffe          BL       WM_GetTimerId
000202  2804              CMP      r0,#4
000204  d17d              BNE      |L7.770|
;;;200    										
;;;201    				if( RunTimesStr[0][0] == '\0' || strlen( RunTimesStr[0]) == 0 ){
000206  48b6              LDR      r0,|L7.1248|
000208  7800              LDRB     r0,[r0,#0]  ; RunTimesStr
00020a  b118              CBZ      r0,|L7.532|
00020c  48b4              LDR      r0,|L7.1248|
00020e  f7fffffe          BL       strlen
000212  b920              CBNZ     r0,|L7.542|
                  |L7.532|
;;;202    							
;;;203    					strcpy( RunTimesStr[0], "00:00:00");	
000214  a1bc              ADR      r1,|L7.1288|
000216  48b2              LDR      r0,|L7.1248|
000218  f7fffffe          BL       strcpy
00021c  e008              B        |L7.560|
                  |L7.542|
;;;204    								
;;;205    				}else if( strlen( RunTimesStr[0]) > 25 ){
00021e  48b0              LDR      r0,|L7.1248|
000220  f7fffffe          BL       strlen
000224  2819              CMP      r0,#0x19
000226  d903              BLS      |L7.560|
;;;206    							
;;;207    					strcpy( RunTimesStr[0], "error");
000228  a1ba              ADR      r1,|L7.1300|
00022a  48ad              LDR      r0,|L7.1248|
00022c  f7fffffe          BL       strcpy
                  |L7.560|
;;;208    				}
;;;209    						
;;;210    				if( RunTimesStr[1][0] == '\0' || strlen( RunTimesStr[1]) == 0 ){
000230  48ab              LDR      r0,|L7.1248|
000232  7f80              LDRB     r0,[r0,#0x1e]  ; RunTimesStr
000234  b120              CBZ      r0,|L7.576|
000236  48aa              LDR      r0,|L7.1248|
000238  301e              ADDS     r0,r0,#0x1e
00023a  f7fffffe          BL       strlen
00023e  b928              CBNZ     r0,|L7.588|
                  |L7.576|
;;;211    								
;;;212    					strcpy( RunTimesStr[1], "00:00:00");
000240  a1b1              ADR      r1,|L7.1288|
000242  48a7              LDR      r0,|L7.1248|
000244  301e              ADDS     r0,r0,#0x1e
000246  f7fffffe          BL       strcpy
00024a  e00a              B        |L7.610|
                  |L7.588|
;;;213    								
;;;214    				}else if( strlen( RunTimesStr[1]) > 25 ){
00024c  48a4              LDR      r0,|L7.1248|
00024e  301e              ADDS     r0,r0,#0x1e
000250  f7fffffe          BL       strlen
000254  2819              CMP      r0,#0x19
000256  d904              BLS      |L7.610|
;;;215    							
;;;216    					strcpy( RunTimesStr[1], "error");
000258  a1ae              ADR      r1,|L7.1300|
00025a  48a1              LDR      r0,|L7.1248|
00025c  301e              ADDS     r0,r0,#0x1e
00025e  f7fffffe          BL       strcpy
                  |L7.610|
;;;217    				}		
;;;218    			
;;;219    				/*************************************************
;;;220    				*                   判断电压电流
;;;221    				**************************************************/
;;;222    				if( POWER_RECHARGE == 1 ){	  				
000262  4881              LDR      r0,|L7.1128|
000264  7800              LDRB     r0,[r0,#0]  ; POWER_RECHARGE
000266  2801              CMP      r0,#1
000268  d162              BNE      |L7.816|
;;;223    		
;;;224    					strcpy( RunTimesStr[0], show_times_char( abc_time  ) );
00026a  48ac              LDR      r0,|L7.1308|
00026c  6800              LDR      r0,[r0,#0]  ; abc_time
00026e  f7fffffe          BL       show_times_char
000272  4683              MOV      r11,r0
000274  4659              MOV      r1,r11
000276  489a              LDR      r0,|L7.1248|
000278  f7fffffe          BL       strcpy
;;;225    					
;;;226    					if( DISS_POW_Voltage >= (double)CLists.CDC_Ccutoff_V/1000 && DISS_POW_Current < (double)CLists.CDC_Ccutoff_C/1000 ){
00027c  49a8              LDR      r1,|L7.1312|
00027e  f8d100ec          LDR      r0,[r1,#0xec]  ; CLists
000282  f7fffffe          BL       __aeabi_ui2d
000286  ec410b1a          VMOV     d10,r0,r1
00028a  ed9f0ba6          VLDR     d0,|L7.1316|
00028e  ec532b10          VMOV     r2,r3,d0
000292  f7fffffe          BL       __aeabi_ddiv
000296  ec410b18          VMOV     d8,r0,r1
00029a  48a4              LDR      r0,|L7.1324|
00029c  6800              LDR      r0,[r0,#0]  ; DISS_POW_Voltage
00029e  f7fffffe          BL       __aeabi_f2d
0002a2  ec410b19          VMOV     d9,r0,r1
0002a6  ec532b18          VMOV     r2,r3,d8
0002aa  f7fffffe          BL       __aeabi_cdrcmple
0002ae  d83f              BHI      |L7.816|
0002b0  499b              LDR      r1,|L7.1312|
0002b2  f8b100f0          LDRH     r0,[r1,#0xf0]  ; CLists
0002b6  f7fffffe          BL       __aeabi_ui2d
0002ba  ec410b1a          VMOV     d10,r0,r1
0002be  ed9f0b99          VLDR     d0,|L7.1316|
0002c2  ec532b10          VMOV     r2,r3,d0
0002c6  f7fffffe          BL       __aeabi_ddiv
0002ca  ec410b18          VMOV     d8,r0,r1
0002ce  4898              LDR      r0,|L7.1328|
0002d0  6800              LDR      r0,[r0,#0]  ; DISS_POW_Current
0002d2  f7fffffe          BL       __aeabi_f2d
0002d6  ec410b19          VMOV     d9,r0,r1
0002da  ec532b18          VMOV     r2,r3,d8
0002de  f7fffffe          BL       __aeabi_cdcmple
0002e2  d225              BCS      |L7.816|
;;;227    					
;;;228    						CDC_EndTime[0][run_num] = abc_time;
0002e4  488d              LDR      r0,|L7.1308|
0002e6  6800              LDR      r0,[r0,#0]  ; abc_time
0002e8  4992              LDR      r1,|L7.1332|
0002ea  4a93              LDR      r2,|L7.1336|
0002ec  7812              LDRB     r2,[r2,#0]  ; run_num
0002ee  f8410022          STR      r0,[r1,r2,LSL #2]
;;;229    						
;;;230    						Off_GPOI_ResetSet();
0002f2  f7fffffe          BL       Off_GPOI_ResetSet
;;;231    						
;;;232    						C_DISCHARGE = 1;                //放电状态
0002f6  2001              MOVS     r0,#1
0002f8  495c              LDR      r1,|L7.1132|
0002fa  7008              STRB     r0,[r1,#0]
;;;233    						
;;;234    						OnOff_GPOI_ResetSet( 2, 1 );    //开启放电
0002fc  2101              MOVS     r1,#1
0002fe  2002              MOVS     r0,#2
000300  e000              B        |L7.772|
                  |L7.770|
000302  e1ff              B        |L7.1796|
                  |L7.772|
000304  f7fffffe          BL       OnOff_GPOI_ResetSet
;;;235    						
;;;236    						abc_time = 0;
000308  2000              MOVS     r0,#0
00030a  4984              LDR      r1,|L7.1308|
00030c  6008              STR      r0,[r1,#0]  ; abc_time
;;;237    						
;;;238    						CDC_CsumMah = 0;
00030e  ed9f0a8b          VLDR     s0,|L7.1340|
000312  488b              LDR      r0,|L7.1344|
000314  ed800a00          VSTR     s0,[r0,#0]
;;;239    						
;;;240    						strcpy( RunTimesStr[0], show_times_char( CDC_EndTime[0][run_num] ) );
000318  4986              LDR      r1,|L7.1332|
00031a  4a87              LDR      r2,|L7.1336|
00031c  7812              LDRB     r2,[r2,#0]  ; run_num
00031e  f8510022          LDR      r0,[r1,r2,LSL #2]
000322  f7fffffe          BL       show_times_char
000326  4683              MOV      r11,r0
000328  4659              MOV      r1,r11
00032a  486d              LDR      r0,|L7.1248|
00032c  f7fffffe          BL       strcpy
                  |L7.816|
;;;241    					}	
;;;242    				}
;;;243    				
;;;244    				if( C_DISCHARGE == 1 ){
000330  484e              LDR      r0,|L7.1132|
000332  7800              LDRB     r0,[r0,#0]  ; C_DISCHARGE
000334  2801              CMP      r0,#1
000336  d179              BNE      |L7.1068|
;;;245    					
;;;246    					strcpy( RunTimesStr[1], show_times_char( abc_time ) );
000338  4878              LDR      r0,|L7.1308|
00033a  6800              LDR      r0,[r0,#0]  ; abc_time
00033c  f7fffffe          BL       show_times_char
000340  4683              MOV      r11,r0
000342  4659              MOV      r1,r11
000344  4866              LDR      r0,|L7.1248|
000346  301e              ADDS     r0,r0,#0x1e
000348  f7fffffe          BL       strcpy
;;;247    					
;;;248    					if( DISS_Voltage < (double)CLists.CDC_Dcutoff_V/1000 ){
00034c  4974              LDR      r1,|L7.1312|
00034e  f8d100f4          LDR      r0,[r1,#0xf4]  ; CLists
000352  f7fffffe          BL       __aeabi_ui2d
000356  ec410b1a          VMOV     d10,r0,r1
00035a  ed9f0b72          VLDR     d0,|L7.1316|
00035e  ec532b10          VMOV     r2,r3,d0
000362  f7fffffe          BL       __aeabi_ddiv
000366  ec410b18          VMOV     d8,r0,r1
00036a  4876              LDR      r0,|L7.1348|
00036c  6800              LDR      r0,[r0,#0]  ; DISS_Voltage
00036e  f7fffffe          BL       __aeabi_f2d
000372  ec410b19          VMOV     d9,r0,r1
000376  ec532b18          VMOV     r2,r3,d8
00037a  f7fffffe          BL       __aeabi_cdcmple
00037e  d255              BCS      |L7.1068|
;;;249    						
;;;250    					    CDC_EndTime[1][run_num] = abc_time;
000380  4866              LDR      r0,|L7.1308|
000382  6801              LDR      r1,[r0,#0]  ; abc_time
000384  4870              LDR      r0,|L7.1352|
000386  4a6c              LDR      r2,|L7.1336|
000388  7812              LDRB     r2,[r2,#0]  ; run_num
00038a  f8401022          STR      r1,[r0,r2,LSL #2]
;;;251    						
;;;252    						Off_GPOI_ResetSet();   
00038e  f7fffffe          BL       Off_GPOI_ResetSet
;;;253    						
;;;254    						trig_flag_state = 0;								
000392  2000              MOVS     r0,#0
000394  496d              LDR      r1,|L7.1356|
000396  7008              STRB     r0,[r1,#0]
;;;255    						
;;;256    						//itemp = atoi( SGhListCDC[7].f_EName );
;;;257    							
;;;258    						CDC_Cmah += CDC_CsumMah ;	
000398  ed9d0a22          VLDR     s0,[sp,#0x88]
00039c  eeb80a40          VCVT.F32.U32 s0,s0
0003a0  4867              LDR      r0,|L7.1344|
0003a2  edd00a00          VLDR     s1,[r0,#0]
0003a6  ee300a20          VADD.F32 s0,s0,s1
0003aa  eebc0ac0          VCVT.U32.F32 s0,s0
0003ae  ed8d0a22          VSTR     s0,[sp,#0x88]
;;;259    						
;;;260    						CDC_CsumMah = 0;
0003b2  ed9f0a62          VLDR     s0,|L7.1340|
0003b6  ed800a00          VSTR     s0,[r0,#0]
;;;261    						
;;;262    						if( CLists.CDC_Cycle_Time  > run_num )	{
0003ba  4859              LDR      r0,|L7.1312|
0003bc  f89000f8          LDRB     r0,[r0,#0xf8]  ; CLists
0003c0  495d              LDR      r1,|L7.1336|
0003c2  7809              LDRB     r1,[r1,#0]  ; run_num
0003c4  4288              CMP      r0,r1
0003c6  dd1e              BLE      |L7.1030|
;;;263    							
;;;264    							POWER_RECHARGE = 1;
0003c8  2001              MOVS     r0,#1
0003ca  4927              LDR      r1,|L7.1128|
0003cc  7008              STRB     r0,[r1,#0]
;;;265    							
;;;266    							trig_flag_state = 1;
0003ce  495f              LDR      r1,|L7.1356|
0003d0  7008              STRB     r0,[r1,#0]
;;;267    								
;;;268    							strcpy( RunTimesStr[1], show_times_char( CDC_EndTime[1][run_num] ) );
0003d2  495d              LDR      r1,|L7.1352|
0003d4  4a58              LDR      r2,|L7.1336|
0003d6  7812              LDRB     r2,[r2,#0]  ; run_num
0003d8  f8510022          LDR      r0,[r1,r2,LSL #2]
0003dc  f7fffffe          BL       show_times_char
0003e0  4683              MOV      r11,r0
0003e2  4659              MOV      r1,r11
0003e4  483e              LDR      r0,|L7.1248|
0003e6  301e              ADDS     r0,r0,#0x1e
0003e8  f7fffffe          BL       strcpy
;;;269    							
;;;270    							run_num++;
0003ec  4852              LDR      r0,|L7.1336|
0003ee  7800              LDRB     r0,[r0,#0]  ; run_num
0003f0  1c40              ADDS     r0,r0,#1
0003f2  4951              LDR      r1,|L7.1336|
0003f4  7008              STRB     r0,[r1,#0]
;;;271    							
;;;272    							OnOff_GPOI_ResetSet( 0, 1 );   //开启充电
0003f6  2101              MOVS     r1,#1
0003f8  2000              MOVS     r0,#0
0003fa  f7fffffe          BL       OnOff_GPOI_ResetSet
;;;273    							
;;;274    							abc_time = 0;
0003fe  2000              MOVS     r0,#0
000400  4946              LDR      r1,|L7.1308|
000402  6008              STR      r0,[r1,#0]  ; abc_time
000404  e010              B        |L7.1064|
                  |L7.1030|
;;;275    							
;;;276    		
;;;277    						}else{
;;;278    							
;;;279    							/*   根据循环次数 --- 获取平均值   */
;;;280    							CDC_AvgCmah = CDC_Cmah / run_num;
000406  494c              LDR      r1,|L7.1336|
000408  7809              LDRB     r1,[r1,#0]  ; run_num
00040a  9822              LDR      r0,[sp,#0x88]
00040c  fbb0f0f1          UDIV     r0,r0,r1
000410  494f              LDR      r1,|L7.1360|
000412  6008              STR      r0,[r1,#0]  ; CDC_AvgCmah
;;;281    							
;;;282    							if( CDC_AvgCmah > 99999 ){
000414  4608              MOV      r0,r1
000416  6800              LDR      r0,[r0,#0]  ; CDC_AvgCmah
000418  494e              LDR      r1,|L7.1364|
00041a  4288              CMP      r0,r1
00041c  d902              BLS      |L7.1060|
;;;283    								
;;;284    								CDC_AvgCmah = 99999;
00041e  4608              MOV      r0,r1
000420  494b              LDR      r1,|L7.1360|
000422  6008              STR      r0,[r1,#0]  ; CDC_AvgCmah
                  |L7.1060|
;;;285    							}
;;;286    							
;;;287    							CDC_Cmah = 0;
000424  2000              MOVS     r0,#0
000426  9022              STR      r0,[sp,#0x88]
                  |L7.1064|
;;;288    						}
;;;289    						
;;;290    						if( trig_flag_state == 0 ){
000428  4848              LDR      r0,|L7.1356|
00042a  7800              LDRB     r0,[r0,#0]  ; trig_flag_state
                  |L7.1068|
;;;291    							
;;;292    						}
;;;293    					}	
;;;294    				}		
;;;295    			
;;;296    				/*************************************************
;;;297    				*                    页面显示值
;;;298    				**************************************************/
;;;299    				
;;;300    				/* 负载电压  */
;;;301    				sprintf( CStr, "%f", DISS_Voltage );
00042c  4845              LDR      r0,|L7.1348|
00042e  6800              LDR      r0,[r0,#0]  ; DISS_Voltage
000430  f7fffffe          BL       __aeabi_f2d
000434  ec410b18          VMOV     d8,r0,r1
000438  e08e              B        |L7.1368|
00043a  0000              DCW      0x0000
                  |L7.1084|
                          DCD      0x00d3d3d3
                  |L7.1088|
                          DCD      GUI_FontSONGB16
                  |L7.1092|
                          DCD      FLAG_LANG
                  |L7.1096|
000448  43264443          DCB      "C&DC",0
00044c  00      
00044d  00                DCB      0
00044e  00                DCB      0
00044f  00                DCB      0
                  |L7.1104|
000450  e58585e6          DCB      229,133,133,230,148,190,231,148,181,0
000454  94bee794
000458  b500    
00045a  00                DCB      0
00045b  00                DCB      0
                  |L7.1116|
                          DCD      SGhListCDC
                  |L7.1120|
                          DCD      GUI_FontSONG12
                  |L7.1124|
                          DCD      0x00456654
                  |L7.1128|
                          DCD      POWER_RECHARGE
                  |L7.1132|
                          DCD      C_DISCHARGE
                  |L7.1136|
000470  57616974          DCB      "Waiting Open",0
000474  696e6720
000478  4f70656e
00047c  00      
00047d  00                DCB      0
00047e  00                DCB      0
00047f  00                DCB      0
                  |L7.1152|
000480  e7ad89e5          DCB      231,173,137,229,190,133,229,188,128,229,144,175,0
000484  be85e5bc
000488  80e590af
00048c  00      
00048d  00                DCB      0
00048e  00                DCB      0
00048f  00                DCB      0
                  |L7.1168|
000490  43686172          DCB      "Charging",0
000494  67696e67
000498  00      
000499  00                DCB      0
00049a  00                DCB      0
00049b  00                DCB      0
                  |L7.1180|
00049c  e58585e7          DCB      229,133,133,231,148,181,228,184,173,0
0004a0  94b5e4b8
0004a4  ad00    
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L7.1192|
0004a8  44697363          DCB      "Discharging",0
0004ac  68617267
0004b0  696e6700
                  |L7.1204|
0004b4  e694bee7          DCB      230,148,190,231,148,181,228,184,173,0
0004b8  94b5e4b8
0004bc  ad00    
0004be  00                DCB      0
0004bf  00                DCB      0
                  |L7.1216|
0004c0  43686172          DCB      "Charg Times",239,188,154,0
0004c4  67205469
0004c8  6d6573ef
0004cc  bc9a00  
0004cf  00                DCB      0
                  |L7.1232|
0004d0  e58585e7          DCB      229,133,133,231,148,181,232,128,151,230,151,182,0
0004d4  94b5e880
0004d8  97e697b6
0004dc  00      
0004dd  00                DCB      0
0004de  00                DCB      0
0004df  00                DCB      0
                  |L7.1248|
                          DCD      RunTimesStr
                  |L7.1252|
0004e4  44697363          DCB      "Discharg Times",239,188,154,0
0004e8  68617267
0004ec  2054696d
0004f0  6573efbc
0004f4  9a00    
0004f6  00                DCB      0
0004f7  00                DCB      0
                  |L7.1272|
0004f8  e694bee7          DCB      230,148,190,231,148,181,232,128,151,230,151,182,0
0004fc  94b5e880
000500  97e697b6
000504  00      
000505  00                DCB      0
000506  00                DCB      0
000507  00                DCB      0
                  |L7.1288|
000508  30303a30          DCB      "00:00:00",0
00050c  303a3030
000510  00      
000511  00                DCB      0
000512  00                DCB      0
000513  00                DCB      0
                  |L7.1300|
000514  6572726f          DCB      "error",0
000518  7200    
00051a  00                DCB      0
00051b  00                DCB      0
                  |L7.1308|
                          DCD      abc_time
                  |L7.1312|
                          DCD      CLists
                  |L7.1316|
000524  00000000          DCFD     0x408f400000000000 ; 1000
000528  408f4000
                  |L7.1324|
                          DCD      DISS_POW_Voltage
                  |L7.1328|
                          DCD      DISS_POW_Current
                  |L7.1332|
                          DCD      CDC_EndTime
                  |L7.1336|
                          DCD      run_num
                  |L7.1340|
00053c  00000000          DCFS     0x00000000 ; 0
                  |L7.1344|
                          DCD      CDC_CsumMah
                  |L7.1348|
                          DCD      DISS_Voltage
                  |L7.1352|
                          DCD      CDC_EndTime+0x3fc
                  |L7.1356|
                          DCD      trig_flag_state
                  |L7.1360|
                          DCD      CDC_AvgCmah
                  |L7.1364|
                          DCD      0x0001869f
                  |L7.1368|
000558  ec532b18          VMOV     r2,r3,d8
00055c  a179              ADR      r1,|L7.1860|
00055e  487a              LDR      r0,|L7.1864|
000560  f7fffffe          BL       __2sprintf
;;;302    				
;;;303    				_dloc = dot_Loc_isNull(CStr,strlen(CStr)) > 1 ? 6 : 5;
000564  4878              LDR      r0,|L7.1864|
000566  f7fffffe          BL       strlen
00056a  4683              MOV      r11,r0
00056c  4659              MOV      r1,r11
00056e  4876              LDR      r0,|L7.1864|
000570  f7fffffe          BL       dot_Loc_isNull
000574  2801              CMP      r0,#1
000576  dd01              BLE      |L7.1404|
000578  2006              MOVS     r0,#6
00057a  e000              B        |L7.1406|
                  |L7.1404|
00057c  2005              MOVS     r0,#5
                  |L7.1406|
00057e  9028              STR      r0,[sp,#0xa0]
;;;304    
;;;305    				memset(SGhListCDC[1].f_SName, '\0', sizeof(SGhListCDC[1].f_SName));
000580  2114              MOVS     r1,#0x14
000582  4872              LDR      r0,|L7.1868|
000584  f7fffffe          BL       __aeabi_memclr4
;;;306    
;;;307    				memset(SGhListCDC[1].f_EName, '\0', sizeof(SGhListCDC[1].f_EName));
000588  2114              MOVS     r1,#0x14
00058a  4870              LDR      r0,|L7.1868|
00058c  3014              ADDS     r0,r0,#0x14
00058e  f7fffffe          BL       __aeabi_memclr4
;;;308    
;;;309    				strncpy( SGhListCDC[1].f_SName, CStr, _dloc );	
000592  f89d20a0          LDRB     r2,[sp,#0xa0]
000596  496c              LDR      r1,|L7.1864|
000598  486c              LDR      r0,|L7.1868|
00059a  f7fffffe          BL       strncpy
;;;310    				
;;;311    				strncpy( SGhListCDC[1].f_EName, CStr, _dloc );
00059e  f89d20a0          LDRB     r2,[sp,#0xa0]
0005a2  4969              LDR      r1,|L7.1864|
0005a4  4869              LDR      r0,|L7.1868|
0005a6  3014              ADDS     r0,r0,#0x14
0005a8  f7fffffe          BL       strncpy
;;;312    				
;;;313    				/*  电流  */
;;;314    				memset( CStr, '\0', sizeof(CStr));
0005ac  210a              MOVS     r1,#0xa
0005ae  4866              LDR      r0,|L7.1864|
0005b0  f7fffffe          BL       __aeabi_memclr4
;;;315    				
;;;316    				if( C_DISCHARGE == 1 ){  //开启放电
0005b4  4866              LDR      r0,|L7.1872|
0005b6  7800              LDRB     r0,[r0,#0]  ; C_DISCHARGE
0005b8  2801              CMP      r0,#1
0005ba  d10c              BNE      |L7.1494|
;;;317    					
;;;318    					sprintf( CStr, "%f", DISS_Current );       //负载电流
0005bc  4865              LDR      r0,|L7.1876|
0005be  6800              LDR      r0,[r0,#0]  ; DISS_Current
0005c0  f7fffffe          BL       __aeabi_f2d
0005c4  ec410b18          VMOV     d8,r0,r1
0005c8  ec532b18          VMOV     r2,r3,d8
0005cc  a15d              ADR      r1,|L7.1860|
0005ce  485e              LDR      r0,|L7.1864|
0005d0  f7fffffe          BL       __2sprintf
0005d4  e00b              B        |L7.1518|
                  |L7.1494|
;;;319    					
;;;320    				}else{
;;;321    					
;;;322    					sprintf( CStr, "%f", DISS_POW_Current );   //电源电流
0005d6  4860              LDR      r0,|L7.1880|
0005d8  6800              LDR      r0,[r0,#0]  ; DISS_POW_Current
0005da  f7fffffe          BL       __aeabi_f2d
0005de  ec410b18          VMOV     d8,r0,r1
0005e2  ec532b18          VMOV     r2,r3,d8
0005e6  a157              ADR      r1,|L7.1860|
0005e8  4857              LDR      r0,|L7.1864|
0005ea  f7fffffe          BL       __2sprintf
                  |L7.1518|
;;;323    				}
;;;324    
;;;325    				_dloc = dot_Loc_isNull(CStr,strlen(CStr)) > 1 ? 6 : 5;
0005ee  4856              LDR      r0,|L7.1864|
0005f0  f7fffffe          BL       strlen
0005f4  4683              MOV      r11,r0
0005f6  4659              MOV      r1,r11
0005f8  4853              LDR      r0,|L7.1864|
0005fa  f7fffffe          BL       dot_Loc_isNull
0005fe  2801              CMP      r0,#1
000600  dd01              BLE      |L7.1542|
000602  2006              MOVS     r0,#6
000604  e000              B        |L7.1544|
                  |L7.1542|
000606  2005              MOVS     r0,#5
                  |L7.1544|
000608  9028              STR      r0,[sp,#0xa0]
;;;326    
;;;327    				memset(SGhListCDC[4].f_SName, '\0', sizeof(SGhListCDC[4].f_SName));
00060a  2114              MOVS     r1,#0x14
00060c  484f              LDR      r0,|L7.1868|
00060e  30d8              ADDS     r0,r0,#0xd8
000610  f7fffffe          BL       __aeabi_memclr4
;;;328    
;;;329    				memset(SGhListCDC[4].f_EName, '\0', sizeof(SGhListCDC[4].f_EName));
000614  2114              MOVS     r1,#0x14
000616  484d              LDR      r0,|L7.1868|
000618  30ec              ADDS     r0,r0,#0xec
00061a  f7fffffe          BL       __aeabi_memclr4
;;;330    				
;;;331    				strncpy( SGhListCDC[4].f_SName, CStr, _dloc );	
00061e  f89d20a0          LDRB     r2,[sp,#0xa0]
000622  4949              LDR      r1,|L7.1864|
000624  4849              LDR      r0,|L7.1868|
000626  30d8              ADDS     r0,r0,#0xd8
000628  f7fffffe          BL       strncpy
;;;332    				
;;;333    				strncpy( SGhListCDC[4].f_EName, CStr, _dloc );
00062c  f89d20a0          LDRB     r2,[sp,#0xa0]
000630  4945              LDR      r1,|L7.1864|
000632  4846              LDR      r0,|L7.1868|
000634  30ec              ADDS     r0,r0,#0xec
000636  f7fffffe          BL       strncpy
;;;334    				
;;;335    				/* 容量  */
;;;336    				memset( CStr, '\0', sizeof(CStr));
00063a  210a              MOVS     r1,#0xa
00063c  4842              LDR      r0,|L7.1864|
00063e  f7fffffe          BL       __aeabi_memclr4
;;;337    				memset( cChar, '\0', sizeof(cChar));		
000642  2114              MOVS     r1,#0x14
000644  a823              ADD      r0,sp,#0x8c
000646  f7fffffe          BL       __aeabi_memclr4
;;;338    					
;;;339    				if( trig_flag_state == 0 ){
00064a  4844              LDR      r0,|L7.1884|
00064c  7800              LDRB     r0,[r0,#0]  ; trig_flag_state
00064e  b940              CBNZ     r0,|L7.1634|
;;;340    						
;;;341    					CDC_CsumMah = CDC_AvgCmah;
000650  4843              LDR      r0,|L7.1888|
000652  6800              LDR      r0,[r0,#0]  ; CDC_AvgCmah
000654  ee000a10          VMOV     s0,r0
000658  eeb80a40          VCVT.F32.U32 s0,s0
00065c  4841              LDR      r0,|L7.1892|
00065e  ed800a00          VSTR     s0,[r0,#0]
                  |L7.1634|
;;;342    				}
;;;343    				
;;;344    				sprintf( cChar, "%d", (int)CDC_CsumMah );
000662  4840              LDR      r0,|L7.1892|
000664  ed900a00          VLDR     s0,[r0,#0]
000668  eebd0ac0          VCVT.S32.F32 s0,s0
00066c  ee102a10          VMOV     r2,s0
000670  a13d              ADR      r1,|L7.1896|
000672  a823              ADD      r0,sp,#0x8c
000674  f7fffffe          BL       __2sprintf
;;;345    				
;;;346    				memset(SGhListCDC[7].f_SName, '\0', sizeof(SGhListCDC[7].f_SName));
000678  2114              MOVS     r1,#0x14
00067a  483c              LDR      r0,|L7.1900|
00067c  f7fffffe          BL       __aeabi_memclr4
;;;347    
;;;348    				memset(SGhListCDC[7].f_EName, '\0', sizeof(SGhListCDC[7].f_EName));
000680  2114              MOVS     r1,#0x14
000682  483a              LDR      r0,|L7.1900|
000684  3014              ADDS     r0,r0,#0x14
000686  f7fffffe          BL       __aeabi_memclr4
;;;349    							
;;;350    				if( strlen(cChar) < 5){
00068a  a823              ADD      r0,sp,#0x8c
00068c  f7fffffe          BL       strlen
000690  2805              CMP      r0,#5
000692  d219              BCS      |L7.1736|
;;;351    					
;;;352    					for( i = 0; i < 5 - strlen(cChar); i++) {
000694  2000              MOVS     r0,#0
000696  9029              STR      r0,[sp,#0xa4]
000698  e008              B        |L7.1708|
                  |L7.1690|
;;;353    					
;;;354    						strcat( CStr, "0");
00069a  a135              ADR      r1,|L7.1904|
00069c  482a              LDR      r0,|L7.1864|
00069e  f7fffffe          BL       strcat
0006a2  f89d00a4          LDRB     r0,[sp,#0xa4]         ;352
0006a6  1c40              ADDS     r0,r0,#1              ;352
0006a8  b2c0              UXTB     r0,r0                 ;352
0006aa  9029              STR      r0,[sp,#0xa4]         ;352
                  |L7.1708|
0006ac  a823              ADD      r0,sp,#0x8c           ;352
0006ae  f7fffffe          BL       strlen
0006b2  f1c00005          RSB      r0,r0,#5              ;352
0006b6  f89d10a4          LDRB     r1,[sp,#0xa4]         ;352
0006ba  4288              CMP      r0,r1                 ;352
0006bc  d8ed              BHI      |L7.1690|
;;;355    					}
;;;356    					strcat( CStr, cChar);
0006be  a923              ADD      r1,sp,#0x8c
0006c0  4821              LDR      r0,|L7.1864|
0006c2  f7fffffe          BL       strcat
0006c6  e004              B        |L7.1746|
                  |L7.1736|
;;;357    					
;;;358    				}else{
;;;359    					
;;;360    					strncpy( CStr, cChar, 5 );
0006c8  2205              MOVS     r2,#5
0006ca  a923              ADD      r1,sp,#0x8c
0006cc  481e              LDR      r0,|L7.1864|
0006ce  f7fffffe          BL       strncpy
                  |L7.1746|
;;;361    				}
;;;362    				
;;;363    				strcpy( SGhListCDC[7].f_SName, CStr );	
0006d2  491d              LDR      r1,|L7.1864|
0006d4  4825              LDR      r0,|L7.1900|
0006d6  f7fffffe          BL       strcpy
;;;364    				
;;;365    				strcpy( SGhListCDC[7].f_EName, CStr );
0006da  491b              LDR      r1,|L7.1864|
0006dc  4823              LDR      r0,|L7.1900|
0006de  3014              ADDS     r0,r0,#0x14
0006e0  f7fffffe          BL       strcpy
;;;366    				
;;;367    				memset( CStr, '\0', sizeof(CStr));
0006e4  210a              MOVS     r1,#0xa
0006e6  4818              LDR      r0,|L7.1864|
0006e8  f7fffffe          BL       __aeabi_memclr4
;;;368    				memset( cChar, '\0', sizeof(cChar));
0006ec  2114              MOVS     r1,#0x14
0006ee  a823              ADD      r0,sp,#0x8c
0006f0  f7fffffe          BL       __aeabi_memclr4
;;;369    				
;;;370    				/*    无效化重绘    */
;;;371    				WM_InvalidateWindow(cdchargeWin);	
0006f4  481f              LDR      r0,|L7.1908|
0006f6  6800              LDR      r0,[r0,#0]  ; cdchargeWin
0006f8  f7fffffe          BL       WM_InvalidateWindow
;;;372    				
;;;373    				WM_RestartTimer(pMsg->Data.v, 200);//复位定时器数值越大刷新时间越短		
0006fc  21c8              MOVS     r1,#0xc8
0006fe  68e0              LDR      r0,[r4,#0xc]
000700  f7fffffe          BL       WM_RestartTimer
                  |L7.1796|
;;;374    			}	
;;;375    			
;;;376    			break;
000704  e018              B        |L7.1848|
                  |L7.1798|
;;;377    		}
;;;378    		
;;;379    		break;	
;;;380    		
;;;381    		case WM_KEY:
;;;382    
;;;383    		break;
000706  e017              B        |L7.1848|
                  |L7.1800|
;;;384    			
;;;385    		case WM_INIT_DIALOG:{
;;;386    				
;;;387    			hItem = pMsg->hWin;
000708  6865              LDR      r5,[r4,#4]
;;;388    			
;;;389    			WINDOW_SetBkColor(hItem, 0x004A4655);
00070a  491b              LDR      r1,|L7.1912|
00070c  4628              MOV      r0,r5
00070e  f7fffffe          BL       WINDOW_SetBkColor
;;;390    			
;;;391    			WM_CreateTimer( hItem ,ID_TimerTimeCDC , 20 , 0);//创建本窗口定时器
000712  2300              MOVS     r3,#0
000714  2214              MOVS     r2,#0x14
000716  2104              MOVS     r1,#4
000718  4628              MOV      r0,r5
00071a  f7fffffe          BL       WM_CreateTimer
;;;392    			
;;;393    			MAX_LEN = sizeof( slistCDC )/sizeof( slistCDC[0] );
00071e  2605              MOVS     r6,#5
;;;394    			
;;;395    			bush_WinObj( FLAG_LANG, pMsg ,slistCDC, MAX_LEN );
000720  4633              MOV      r3,r6
000722  4a16              LDR      r2,|L7.1916|
000724  4621              MOV      r1,r4
000726  4816              LDR      r0,|L7.1920|
000728  7800              LDRB     r0,[r0,#0]  ; FLAG_LANG
00072a  f7fffffe          BL       bush_WinObj
;;;396    		}
;;;397    		
;;;398    		break;
00072e  e003              B        |L7.1848|
                  |L7.1840|
;;;399    		
;;;400    		default:
;;;401    		
;;;402    			WM_DefaultProc(pMsg);
000730  4620              MOV      r0,r4
000732  f7fffffe          BL       WM_DefaultProc
;;;403    			
;;;404    		break;
000736  bf00              NOP      
                  |L7.1848|
000738  bf00              NOP                            ;195
;;;405    	 }
;;;406    
;;;407    }
00073a  b02b              ADD      sp,sp,#0xac
00073c  ecbd8b06          VPOP     {d8-d10}
000740  e8bd8ff0          POP      {r4-r11,pc}
;;;408    
                          ENDP

                  |L7.1860|
000744  256600            DCB      "%f",0
000747  00                DCB      0
                  |L7.1864|
                          DCD      CStr
                  |L7.1868|
                          DCD      SGhListCDC+0x54
                  |L7.1872|
                          DCD      C_DISCHARGE
                  |L7.1876|
                          DCD      DISS_Current
                  |L7.1880|
                          DCD      DISS_POW_Current
                  |L7.1884|
                          DCD      trig_flag_state
                  |L7.1888|
                          DCD      CDC_AvgCmah
                  |L7.1892|
                          DCD      CDC_CsumMah
                  |L7.1896|
000768  256400            DCB      "%d",0
00076b  00                DCB      0
                  |L7.1900|
                          DCD      SGhListCDC+0x204
                  |L7.1904|
000770  3000              DCB      "0",0
000772  00                DCB      0
000773  00                DCB      0
                  |L7.1908|
                          DCD      cdchargeWin
                  |L7.1912|
                          DCD      0x004a4655
                  |L7.1916|
                          DCD      slistCDC
                  |L7.1920|
                          DCD      FLAG_LANG

                          AREA ||i.show_times_char||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  show_times_char PROC
;;;480    // 显示时间
;;;481    char *show_times_char( vu32 _r ){
000000  b571              PUSH     {r0,r4-r6,lr}
000002  b097              SUB      sp,sp,#0x5c
;;;482    	
;;;483    	char charTemp[30];
;;;484    	int time_h, time_m, time_s;
;;;485    	char time_h_s[20], time_m_s[20], time_s_s[20];
;;;486    
;;;487    	time_h = _r / 3600;					
000004  f44f6161          MOV      r1,#0xe10
000008  9817              LDR      r0,[sp,#0x5c]
00000a  fbb0f4f1          UDIV     r4,r0,r1
;;;488    	time_m = _r % 3600 / 60;
00000e  9817              LDR      r0,[sp,#0x5c]
000010  fbb0f2f1          UDIV     r2,r0,r1
000014  fb010012          MLS      r0,r1,r2,r0
000018  213c              MOVS     r1,#0x3c
00001a  fbb0f5f1          UDIV     r5,r0,r1
;;;489    	time_s = _r % 3600 % 60;
00001e  f44f6161          MOV      r1,#0xe10
000022  9817              LDR      r0,[sp,#0x5c]
000024  fbb0f2f1          UDIV     r2,r0,r1
000028  fb010012          MLS      r0,r1,r2,r0
00002c  213c              MOVS     r1,#0x3c
00002e  fbb0f2f1          UDIV     r2,r0,r1
000032  fb010612          MLS      r6,r1,r2,r0
;;;490    
;;;491        memset( charTemp, '\0', sizeof(charTemp));				
000036  2120              MOVS     r1,#0x20
000038  a80f              ADD      r0,sp,#0x3c
00003a  f7fffffe          BL       __aeabi_memclr4
;;;492    	memset( time_h_s, '\0', sizeof(time_h_s));
00003e  2114              MOVS     r1,#0x14
000040  a80a              ADD      r0,sp,#0x28
000042  f7fffffe          BL       __aeabi_memclr4
;;;493    	memset( time_m_s, '\0', sizeof(time_m_s));
000046  2114              MOVS     r1,#0x14
000048  a805              ADD      r0,sp,#0x14
00004a  f7fffffe          BL       __aeabi_memclr4
;;;494    	memset( time_s_s, '\0', sizeof(time_s_s));
00004e  2114              MOVS     r1,#0x14
000050  4668              MOV      r0,sp
000052  f7fffffe          BL       __aeabi_memclr4
;;;495    				
;;;496    	sprintf( time_h_s, "%d", time_h );  
000056  4622              MOV      r2,r4
000058  a124              ADR      r1,|L8.236|
00005a  a80a              ADD      r0,sp,#0x28
00005c  f7fffffe          BL       __2sprintf
;;;497    	sprintf( time_m_s, "%d", time_m ); 
000060  462a              MOV      r2,r5
000062  a122              ADR      r1,|L8.236|
000064  a805              ADD      r0,sp,#0x14
000066  f7fffffe          BL       __2sprintf
;;;498    	sprintf( time_s_s, "%d", time_s ); 
00006a  4632              MOV      r2,r6
00006c  a11f              ADR      r1,|L8.236|
00006e  4668              MOV      r0,sp
000070  f7fffffe          BL       __2sprintf
;;;499    						
;;;500    	if( strlen(time_h_s) < 2){
000074  a80a              ADD      r0,sp,#0x28
000076  f7fffffe          BL       strlen
00007a  2802              CMP      r0,#2
00007c  d203              BCS      |L8.134|
;;;501    						
;;;502    		strcat(charTemp,"0");
00007e  a11c              ADR      r1,|L8.240|
000080  a80f              ADD      r0,sp,#0x3c
000082  f7fffffe          BL       strcat
                  |L8.134|
;;;503    	}
;;;504    	strcat(charTemp,time_h_s);	
000086  a90a              ADD      r1,sp,#0x28
000088  a80f              ADD      r0,sp,#0x3c
00008a  f7fffffe          BL       strcat
;;;505    	strcat(charTemp,":");
00008e  a119              ADR      r1,|L8.244|
000090  a80f              ADD      r0,sp,#0x3c
000092  f7fffffe          BL       strcat
;;;506    	if( strlen(time_m_s) < 2){
000096  a805              ADD      r0,sp,#0x14
000098  f7fffffe          BL       strlen
00009c  2802              CMP      r0,#2
00009e  d203              BCS      |L8.168|
;;;507    						
;;;508    		strcat(charTemp,"0");
0000a0  a113              ADR      r1,|L8.240|
0000a2  a80f              ADD      r0,sp,#0x3c
0000a4  f7fffffe          BL       strcat
                  |L8.168|
;;;509    	}
;;;510    	strcat(charTemp,time_m_s);	
0000a8  a905              ADD      r1,sp,#0x14
0000aa  a80f              ADD      r0,sp,#0x3c
0000ac  f7fffffe          BL       strcat
;;;511    	strcat(charTemp,":");
0000b0  a110              ADR      r1,|L8.244|
0000b2  a80f              ADD      r0,sp,#0x3c
0000b4  f7fffffe          BL       strcat
;;;512    	if( strlen(time_s_s) < 2){
0000b8  4668              MOV      r0,sp
0000ba  f7fffffe          BL       strlen
0000be  2802              CMP      r0,#2
0000c0  d203              BCS      |L8.202|
;;;513    						
;;;514    		strcat(charTemp,"0");
0000c2  a10b              ADR      r1,|L8.240|
0000c4  a80f              ADD      r0,sp,#0x3c
0000c6  f7fffffe          BL       strcat
                  |L8.202|
;;;515    	}
;;;516    	strcat(charTemp,time_s_s);
0000ca  4669              MOV      r1,sp
0000cc  a80f              ADD      r0,sp,#0x3c
0000ce  f7fffffe          BL       strcat
;;;517    	
;;;518    	if( strlen(charTemp) > 20 ){
0000d2  a80f              ADD      r0,sp,#0x3c
0000d4  f7fffffe          BL       strlen
0000d8  2814              CMP      r0,#0x14
0000da  d903              BLS      |L8.228|
;;;519    		
;;;520    		strcpy( charTemp, "error");
0000dc  a106              ADR      r1,|L8.248|
0000de  a80f              ADD      r0,sp,#0x3c
0000e0  f7fffffe          BL       strcpy
                  |L8.228|
;;;521    	}
;;;522    	
;;;523    	return charTemp;
0000e4  a80f              ADD      r0,sp,#0x3c
;;;524    	
;;;525    }
0000e6  b018              ADD      sp,sp,#0x60
0000e8  bd70              POP      {r4-r6,pc}
;;;526    
                          ENDP

0000ea  0000              DCW      0x0000
                  |L8.236|
0000ec  256400            DCB      "%d",0
0000ef  00                DCB      0
                  |L8.240|
0000f0  3000              DCB      "0",0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L8.244|
0000f4  3a00              DCB      ":",0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L8.248|
0000f8  6572726f          DCB      "error",0
0000fc  7200    
0000fe  00                DCB      0
0000ff  00                DCB      0

                          AREA ||i.trig_Cdc_charge||, CODE, READONLY, ALIGN=2

                  trig_Cdc_charge PROC
;;;1380   //trig按键
;;;1381   void trig_Cdc_charge(){
000000  b508              PUSH     {r3,lr}
;;;1382   
;;;1383   	vu8 i = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;1384   
;;;1385   	if( !trig_flag_state ){
000006  4829              LDR      r0,|L9.172|
000008  7800              LDRB     r0,[r0,#0]  ; trig_flag_state
00000a  2800              CMP      r0,#0
00000c  d13e              BNE      |L9.140|
;;;1386   		
;;;1387   		trig_flag_state = 1;
00000e  2001              MOVS     r0,#1
000010  4926              LDR      r1,|L9.172|
000012  7008              STRB     r0,[r1,#0]
;;;1388   		
;;;1389   		run_num = 1;
000014  4926              LDR      r1,|L9.176|
000016  7008              STRB     r0,[r1,#0]
;;;1390   		CDC_AvgCmah = 0;
000018  2000              MOVS     r0,#0
00001a  4926              LDR      r1,|L9.180|
00001c  6008              STR      r0,[r1,#0]  ; CDC_AvgCmah
;;;1391   		CDC_CsumMah = 0;
00001e  ed9f0a26          VLDR     s0,|L9.184|
000022  4826              LDR      r0,|L9.188|
000024  ed800a00          VSTR     s0,[r0,#0]
;;;1392   		
;;;1393   		memset( RunTimesStr[0], '\0', sizeof(RunTimesStr[0]));
000028  211e              MOVS     r1,#0x1e
00002a  4825              LDR      r0,|L9.192|
00002c  f7fffffe          BL       __aeabi_memclr4
;;;1394   		memset( RunTimesStr[1], '\0', sizeof(RunTimesStr[1]));
000030  211e              MOVS     r1,#0x1e
000032  4823              LDR      r0,|L9.192|
000034  301e              ADDS     r0,r0,#0x1e
000036  f7fffffe          BL       __aeabi_memclr
;;;1395   		
;;;1396   		/* 清空存储  */
;;;1397   		for( i = 0; i < 255; i++){
00003a  2000              MOVS     r0,#0
00003c  9000              STR      r0,[sp,#0]
00003e  e010              B        |L9.98|
                  |L9.64|
;;;1398   			
;;;1399   			CDC_EndTime[0][i] = 0;
000040  2000              MOVS     r0,#0
000042  4920              LDR      r1,|L9.196|
000044  f89d2000          LDRB     r2,[sp,#0]
000048  f8410022          STR      r0,[r1,r2,LSL #2]
;;;1400   			CDC_EndTime[1][i] = 0;
00004c  2100              MOVS     r1,#0
00004e  481e              LDR      r0,|L9.200|
000050  f89d2000          LDRB     r2,[sp,#0]
000054  f8401022          STR      r1,[r0,r2,LSL #2]
000058  f89d0000          LDRB     r0,[sp,#0]            ;1397
00005c  1c40              ADDS     r0,r0,#1              ;1397
00005e  b2c0              UXTB     r0,r0                 ;1397
000060  9000              STR      r0,[sp,#0]            ;1397
                  |L9.98|
000062  f89d0000          LDRB     r0,[sp,#0]            ;1397
000066  28ff              CMP      r0,#0xff              ;1397
000068  dbea              BLT      |L9.64|
;;;1401   		}
;;;1402   							
;;;1403   		run_num = 1;
00006a  2001              MOVS     r0,#1
00006c  4910              LDR      r1,|L9.176|
00006e  7008              STRB     r0,[r1,#0]
;;;1404   		
;;;1405   	    if( POWER_RECHARGE == 0  ){
000070  4816              LDR      r0,|L9.204|
000072  7800              LDRB     r0,[r0,#0]  ; POWER_RECHARGE
000074  b9a0              CBNZ     r0,|L9.160|
;;;1406   
;;;1407   			POWER_RECHARGE = 1;
000076  2001              MOVS     r0,#1
000078  4914              LDR      r1,|L9.204|
00007a  7008              STRB     r0,[r1,#0]
;;;1408   			OnOff_GPOI_ResetSet( 0 , 1 );   // 开启充电
00007c  2101              MOVS     r1,#1
00007e  2000              MOVS     r0,#0
000080  f7fffffe          BL       OnOff_GPOI_ResetSet
;;;1409   			abc_time = 0;
000084  2000              MOVS     r0,#0
000086  4912              LDR      r1,|L9.208|
000088  6008              STR      r0,[r1,#0]  ; abc_time
00008a  e009              B        |L9.160|
                  |L9.140|
;;;1410   				
;;;1411   		}
;;;1412   	}else{
;;;1413   		run_num = 1;
00008c  2001              MOVS     r0,#1
00008e  4908              LDR      r1,|L9.176|
000090  7008              STRB     r0,[r1,#0]
;;;1414   		trig_flag_state = 0;	
000092  2000              MOVS     r0,#0
000094  4905              LDR      r1,|L9.172|
000096  7008              STRB     r0,[r1,#0]
;;;1415   		abc_time = 0;	
000098  490d              LDR      r1,|L9.208|
00009a  6008              STR      r0,[r1,#0]  ; abc_time
;;;1416   		Off_GPOI_ResetSet();
00009c  f7fffffe          BL       Off_GPOI_ResetSet
                  |L9.160|
;;;1417       }
;;;1418   	
;;;1419   	WM_InvalidateWindow(cdchargeWin);
0000a0  480c              LDR      r0,|L9.212|
0000a2  6800              LDR      r0,[r0,#0]  ; cdchargeWin
0000a4  f7fffffe          BL       WM_InvalidateWindow
;;;1420   	
;;;1421   }
0000a8  bd08              POP      {r3,pc}
;;;1422   
                          ENDP

0000aa  0000              DCW      0x0000
                  |L9.172|
                          DCD      trig_flag_state
                  |L9.176|
                          DCD      run_num
                  |L9.180|
                          DCD      CDC_AvgCmah
                  |L9.184|
0000b8  00000000          DCFS     0x00000000 ; 0
                  |L9.188|
                          DCD      CDC_CsumMah
                  |L9.192|
                          DCD      RunTimesStr
                  |L9.196|
                          DCD      CDC_EndTime
                  |L9.200|
                          DCD      CDC_EndTime+0x3fc
                  |L9.204|
                          DCD      POWER_RECHARGE
                  |L9.208|
                          DCD      abc_time
                  |L9.212|
                          DCD      cdchargeWin

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  CDC_EndTime
                          %        2040
                  RunTimesStr
                          %        60
                  CStr
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _aDialogCreatecdc
                          DCD      WINDOW_CreateIndirect
                          DCD      ||.conststring||
000008  08540000          DCW      0x0854,0x0000
00000c  000001e0          DCW      0x0000,0x01e0
000010  01100000          DCW      0x0110,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
000024  08560055          DCW      0x0856,0x0055
000028  00e80046          DCW      0x00e8,0x0046
00002c  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
000040  085700a4          DCW      0x0857,0x00a4
000044  00e80046          DCW      0x00e8,0x0046
000048  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
00005c  085800f3          DCW      0x0858,0x00f3
000060  00e80046          DCW      0x00e8,0x0046
000064  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
000078  08590142          DCW      0x0859,0x0142
00007c  00e80046          DCW      0x00e8,0x0046
000080  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      BUTTON_CreateIndirect
                          DCD      ||.conststring||+0x8
000094  085a0191          DCW      0x085a,0x0191
000098  00e80046          DCW      0x00e8,0x0046
00009c  002d0000          DCW      0x002d,0x0000
                          DCD      0x00000000
                          DCD      0x00000000
                  WINC_id_DataLists
                          DCD      0x0000000c
                          DCD      0x0000000e
                          DCD      0x00000010
                          DCD      0x00000012
                          DCD      0x00000015
                          DCD      0x00000017
                          DCD      0x00000019

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  57696e64          DCB      "Window",0
000004  6f7700  
000007  00                DCB      0
000008  42757474          DCB      "Button",0
00000c  6f6e00  

                          AREA ||.data||, DATA, ALIGN=2

                  cdchargeWin
                          DCD      0x00000000
                  SGhListCDC
                          DCD      0x00000001
                          DCD      0x00000000
                          DCD      0x00000002
000010  563a0000          DCB      0x56,0x3a,0x00,0x00
                          %        16
000024  563a0000          DCB      0x56,0x3a,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
000044  001e003c          DCW      0x001e,0x003c
000048  00000000          DCW      0x0000,0x0000
                          DCD      0x00000002
                          DCD      0x00000000
                          DCD      0x00000002
000058  302e3030          DCB      0x30,0x2e,0x30,0x30
00005c  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
00006c  302e3030          DCB      0x30,0x2e,0x30,0x30
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
00008c  0058003f          DCW      0x0058,0x003f
000090  00000000          DCW      0x0000,0x0000
                          DCD      0x00000003
                          DCD      0x00000000
                          DCD      0x00000002
0000a0  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
0000b4  56000000          DCB      0x56,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
0000d4  00b2003c          DCW      0x00b2,0x003c
0000d8  00000000          DCW      0x0000,0x0000
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000002
0000e8  493a0000          DCB      0x49,0x3a,0x00,0x00
                          %        16
0000fc  493a0000          DCB      0x49,0x3a,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
00011c  001e0079          DCW      0x001e,0x0079
000120  00000000          DCW      0x0000,0x0000
                          DCD      0x00000005
                          DCD      0x00000000
                          DCD      0x00000002
000130  302e3030          DCB      0x30,0x2e,0x30,0x30
000134  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
000144  302e3030          DCB      0x30,0x2e,0x30,0x30
000148  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
000164  0058007c          DCW      0x0058,0x007c
000168  00000000          DCW      0x0000,0x0000
                          DCD      0x00000006
                          DCD      0x00000000
                          DCD      0x00000002
000178  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
00018c  41000000          DCB      0x41,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
0001ac  00b20079          DCW      0x00b2,0x0079
0001b0  00000000          DCW      0x0000,0x0000
                          DCD      0x00000007
                          DCD      0x00000000
                          DCD      0x00000002
0001c0  433a0000          DCB      0x43,0x3a,0x00,0x00
                          %        16
0001d4  433a0000          DCB      0x43,0x3a,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
0001f4  001e00b6          DCW      0x001e,0x00b6
0001f8  00000000          DCW      0x0000,0x0000
                          DCD      0x00000008
                          DCD      0x00000000
                          DCD      0x00000002
000208  30303030          DCB      0x30,0x30,0x30,0x30
00020c  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
00021c  30303030          DCB      0x30,0x30,0x30,0x30
000220  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
                          DCD      0x0000ff7f
                          DCD      0x00000000
                          DCD      GUI_FontSONG26
00023c  005800b9          DCW      0x0058,0x00b9
000240  00000000          DCW      0x0000,0x0000
                          DCD      0x00000009
                          DCD      0x00000000
                          DCD      0x00000002
000250  6d414800          DCB      0x6d,0x41,0x48,0x00
                          %        16
000264  6d414800          DCB      0x6d,0x41,0x48,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONG32
000284  00b200b6          DCW      0x00b2,0x00b6
000288  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000a
                          DCD      0x00000000
                          DCD      0x00000002
000298  e58585e7          DCB      0xe5,0x85,0x85,0xe7
00029c  94b50000          DCB      0x94,0xb5,0x00,0x00
                          %        12
0002ac  00000000          DCB      0x00,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONGB16
0002cc  010e002d          DCW      0x010e,0x002d
0002d0  00000000          DCW      0x0000,0x0000
                          DCD      0x0000000b
                          DCD      0x00000000
                          DCD      0x00000002
0002e0  e8be93e5          DCB      0xe8,0xbe,0x93,0xe5
0002e4  87bae794          DCB      0x87,0xba,0xe7,0x94
0002e8  b5e58e8b          DCB      0xb5,0xe5,0x8e,0x8b
0002ec  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
0002f4  4f757470          DCB      0x4f,0x75,0x74,0x70
0002f8  75742056          DCB      0x75,0x74,0x20,0x56
0002fc  00000000          DCB      0x00,0x00,0x00,0x00
                          %        8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000314  0140002d          DCW      0x0140,0x002d
000318  018b003e          DCW      0x018b,0x003e
                          DCD      0x0000000c
                          DCD      0x00000001
                          DCD      0x00000001
000328  342e3230          DCB      0x34,0x2e,0x32,0x30
00032c  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
00033c  342e3230          DCB      0x34,0x2e,0x32,0x30
000340  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00035c  019f002d          DCW      0x019f,0x002d
000360  01d1003e          DCW      0x01d1,0x003e
                          DCD      0x0000000d
                          DCD      0x00000000
                          DCD      0x00000002
000370  e99990e5          DCB      0xe9,0x99,0x90,0xe5
000374  88b6e794          DCB      0x88,0xb6,0xe7,0x94
000378  b5e6b581          DCB      0xb5,0xe6,0xb5,0x81
00037c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000384  4c696d69          DCB      0x4c,0x69,0x6d,0x69
000388  74696e67          DCB      0x74,0x69,0x6e,0x67
00038c  20430000          DCB      0x20,0x43,0x00,0x00
                          %        8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0003a4  01400046          DCW      0x0140,0x0046
0003a8  018b0057          DCW      0x018b,0x0057
                          DCD      0x0000000e
                          DCD      0x00000000
                          DCD      0x00000001
0003b8  312e3030          DCB      0x31,0x2e,0x30,0x30
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
0003cc  312e3030          DCB      0x31,0x2e,0x30,0x30
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0003ec  019f0046          DCW      0x019f,0x0046
0003f0  01d10057          DCW      0x01d1,0x0057
                          DCD      0x0000000f
                          DCD      0x00000000
                          DCD      0x00000002
000400  e688aae6          DCB      0xe6,0x88,0xaa,0xe6
000404  ada2e794          DCB      0xad,0xa2,0xe7,0x94
000408  b5e58e8b          DCB      0xb5,0xe5,0x8e,0x8b
00040c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000414  4375746f          DCB      0x43,0x75,0x74,0x6f
000418  66662056          DCB      0x66,0x66,0x20,0x56
00041c  00000000          DCB      0x00,0x00,0x00,0x00
                          %        8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000434  0140005f          DCW      0x0140,0x005f
000438  018b0070          DCW      0x018b,0x0070
                          DCD      0x00000010
                          DCD      0x00000000
                          DCD      0x00000001
000448  342e3230          DCB      0x34,0x2e,0x32,0x30
00044c  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
00045c  342e3200          DCB      0x34,0x2e,0x32,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00047c  019f005f          DCW      0x019f,0x005f
000480  01d10070          DCW      0x01d1,0x0070
                          DCD      0x00000011
                          DCD      0x00000000
                          DCD      0x00000002
000490  e688aae6          DCB      0xe6,0x88,0xaa,0xe6
000494  ada2e794          DCB      0xad,0xa2,0xe7,0x94
000498  b5e6b581          DCB      0xb5,0xe6,0xb5,0x81
00049c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
0004a4  4375746f          DCB      0x43,0x75,0x74,0x6f
0004a8  66662043          DCB      0x66,0x66,0x20,0x43
0004ac  00000000          DCB      0x00,0x00,0x00,0x00
                          %        8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0004c4  01400078          DCW      0x0140,0x0078
0004c8  018b0089          DCW      0x018b,0x0089
                          DCD      0x00000012
                          DCD      0x00000000
                          DCD      0x00000001
0004d8  302e3036          DCB      0x30,0x2e,0x30,0x36
0004dc  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
0004ec  302e3036          DCB      0x30,0x2e,0x30,0x36
0004f0  00000000          DCB      0x00,0x00,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00050c  019f0078          DCW      0x019f,0x0078
000510  01d10089          DCW      0x01d1,0x0089
                          DCD      0x00000013
                          DCD      0x00000000
                          DCD      0x00000002
000520  e694bee7          DCB      0xe6,0x94,0xbe,0xe7
000524  94b50000          DCB      0x94,0xb5,0x00,0x00
                          %        12
000534  00000000          DCB      0x00,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      GUI_FontSONGB16
000554  010e0096          DCW      0x010e,0x0096
000558  00000000          DCW      0x0000,0x0000
                          DCD      0x00000014
                          DCD      0x00000000
                          DCD      0x00000002
000568  e8b49fe8          DCB      0xe8,0xb4,0x9f,0xe8
00056c  bdbde794          DCB      0xbd,0xbd,0xe7,0x94
000570  b5e6b581          DCB      0xb5,0xe6,0xb5,0x81
000574  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
00057c  4c6f6164          DCB      0x4c,0x6f,0x61,0x64
000580  20430000          DCB      0x20,0x43,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00059c  01400096          DCW      0x0140,0x0096
0005a0  00000000          DCW      0x0000,0x0000
                          DCD      0x00000015
                          DCD      0x00000000
                          DCD      0x00000001
0005b0  31302e30          DCB      0x31,0x30,0x2e,0x30
0005b4  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
0005c4  31302e30          DCB      0x31,0x30,0x2e,0x30
0005c8  30000000          DCB      0x30,0x00,0x00,0x00
                          %        12
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0005e4  019f0096          DCW      0x019f,0x0096
0005e8  01d100a7          DCW      0x01d1,0x00a7
                          DCD      0x00000016
                          DCD      0x00000000
                          DCD      0x00000002
0005f8  e688aae6          DCB      0xe6,0x88,0xaa,0xe6
0005fc  ada2e794          DCB      0xad,0xa2,0xe7,0x94
000600  b5e58e8b          DCB      0xb5,0xe5,0x8e,0x8b
000604  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
00060c  4375746f          DCB      0x43,0x75,0x74,0x6f
000610  66662056          DCB      0x66,0x66,0x20,0x56
000614  00000000          DCB      0x00,0x00,0x00,0x00
                          %        8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00062c  014000af          DCW      0x0140,0x00af
000630  00000000          DCW      0x0000,0x0000
                          DCD      0x00000017
                          DCD      0x00000000
                          DCD      0x00000001
000640  342e3200          DCB      0x34,0x2e,0x32,0x00
                          %        16
000654  342e3200          DCB      0x34,0x2e,0x32,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000674  019f00af          DCW      0x019f,0x00af
000678  01d100c0          DCW      0x01d1,0x00c0
                          DCD      0x00000018
                          DCD      0x00000000
                          DCD      0x00000002
000688  e5beaae7          DCB      0xe5,0xbe,0xaa,0xe7
00068c  8eafe6ac          DCB      0x8e,0xaf,0xe6,0xac
000690  a1e695b0          DCB      0xa1,0xe6,0x95,0xb0
000694  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
00069c  4379636c          DCB      0x43,0x79,0x63,0x6c
0006a0  65205469          DCB      0x65,0x20,0x54,0x69
0006a4  6d657300          DCB      0x6d,0x65,0x73,0x00
                          %        8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0006bc  014000cd          DCW      0x0140,0x00cd
0006c0  00000000          DCW      0x0000,0x0000
                          DCD      0x00000019
                          DCD      0x00000000
                          DCD      0x00000001
0006d0  30000000          DCB      0x30,0x00,0x00,0x00
                          %        16
0006e4  30000000          DCB      0x30,0x00,0x00,0x00
                          %        16
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000704  019f00cd          DCW      0x019f,0x00cd
000708  01d100de          DCW      0x01d1,0x00de
                  CDC_AvgCmah
                          DCD      0x00000000
                  CDC_CsumMah
                          DCD      0x00000000
                  run_num
000714  01                DCB      0x01
                  trig_flag_state
000715  000000            DCB      0x00,0x00,0x00
                  slistCDC
000718  00e58685          DCB      0x00,0xe5,0x86,0x85
00071c  e998bbe6          DCB      0xe9,0x98,0xbb,0xe6
000720  b58be8af          DCB      0xb5,0x8b,0xe8,0xaf
000724  95000000          DCB      0x95,0x00,0x00,0x00
                          DCD      0x00000000
00072c  00492e52          DCB      0x00,0x49,0x2e,0x52
000730  2e205445          DCB      0x2e,0x20,0x54,0x45
000734  53540000          DCB      0x53,0x54,0x00,0x00
                          %        8
000740  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x00000856
000750  00e7a88b          DCB      0x00,0xe7,0xa8,0x8b
000754  e68ea7e7          DCB      0xe6,0x8e,0xa7,0xe7
000758  94b5e6ba          DCB      0x94,0xb5,0xe6,0xba
00075c  90000000          DCB      0x90,0x00,0x00,0x00
                          DCD      0x00000000
000764  00504f57          DCB      0x00,0x50,0x4f,0x57
000768  45520000          DCB      0x45,0x52,0x00,0x00
                          %        12
000778  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x00000857
000788  00e7a88b          DCB      0x00,0xe7,0xa8,0x8b
00078c  e68ea7e8          DCB      0xe6,0x8e,0xa7,0xe8
000790  b49fe8bd          DCB      0xb4,0x9f,0xe8,0xbd
000794  bd000000          DCB      0xbd,0x00,0x00,0x00
                          DCD      0x00000000
00079c  004c4f41          DCB      0x00,0x4c,0x4f,0x41
0007a0  44000000          DCB      0x44,0x00,0x00,0x00
                          %        12
0007b0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x00000858
0007c0  00e58585          DCB      0x00,0xe5,0x85,0x85
0007c4  e694bee7          DCB      0xe6,0x94,0xbe,0xe7
0007c8  94b50000          DCB      0x94,0xb5,0x00,0x00
                          %        8
0007d4  00432644          DCB      0x00,0x43,0x26,0x44
0007d8  43000000          DCB      0x43,0x00,0x00,0x00
                          %        12
0007e8  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x00000859
0007f8  00e7b3bb          DCB      0x00,0xe7,0xb3,0xbb
0007fc  e7bb9fe8          DCB      0xe7,0xbb,0x9f,0xe8
000800  aebee7bd          DCB      0xae,0xbe,0xe7,0xbd
000804  ae000000          DCB      0xae,0x00,0x00,0x00
                          DCD      0x00000000
00080c  00535953          DCB      0x00,0x53,0x59,0x53
000810  54454d00          DCB      0x54,0x45,0x4d,0x00
                          %        12
000820  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00b22222
                          DCD      0x00000000
                          DCD      0x0000085a

;*** Start embedded assembler ***

#line 1 "..\\APP\\cdcharge_Face.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_cdcharge_Face_c_7ef8ba6e____REV16|
#line 129 "D:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_cdcharge_Face_c_7ef8ba6e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_cdcharge_Face_c_7ef8ba6e____REVSH|
#line 144
|__asm___15_cdcharge_Face_c_7ef8ba6e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
